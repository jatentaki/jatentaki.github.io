{"version":3,"file":"main.js","mappings":"mBAKA,IACQA,EADJC,GACID,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgBI,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,GAAI,EAC7FR,EAAcE,EAAGC,EAC5B,EACO,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAE7D,SAASW,IAAOC,KAAKC,YAAcd,CAAG,CADtCF,EAAcE,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,EACnF,GAEJ,SAASI,EAAQC,EAAGC,GAChB,OAAOC,KAAKC,KAAKH,EAAIC,GAAYA,CACrC,CACA,IAAIG,EAA8B,SAAUC,GAExC,SAASD,EAAaE,GAClB,IAAIC,EAAQF,EAAOb,KAAKI,KAAMU,IAAYV,KAE1C,OADAW,EAAMC,KAAO,eACND,CACX,CACA,OANAzB,EAAUsB,EAAcC,GAMjBD,CACX,CARiC,CAQ/BK,OACEC,EACA,SAAqBC,EAAMC,GACvBhB,KAAKe,KAAOA,EACZf,KAAKgB,UAAYA,CACrB,EAIAC,EAAyB,SAAUR,GAEnC,SAASQ,IACL,OAAOR,EAAOb,KAAKI,KAAM,EAAG,IAAMA,IACtC,CAYA,OAfAd,EAAU+B,EAASR,GAInBQ,EAAQvB,UAAUwB,KAAO,SAAUC,EAAQC,EAAOC,GAC9C,GAAqB,iBAAVD,EACP,MAAM,IAAIZ,EAAa,wBAAwBc,OAAOF,IAG1D,OADAC,EAAKE,SAASJ,EAAQC,GAAO,GACtBD,EAASnB,KAAKe,IACzB,EACAE,EAAQvB,UAAU8B,OAAS,SAAUL,EAAQE,GACzC,IAAII,EAAUJ,EAAKK,SAASP,GAAQ,GACpC,MAAO,CAACA,EAASnB,KAAKe,KAAMU,EAChC,EACOR,CACX,CAjB4B,CAiB1BH,GACEa,EAAyB,SAAUlB,GAEnC,SAASkB,IACL,OAAOlB,EAAOb,KAAKI,KAAM,EAAG,IAAMA,IACtC,CAYA,OAfAd,EAAUyC,EAASlB,GAInBkB,EAAQjC,UAAUwB,KAAO,SAAUC,EAAQC,EAAOC,GAC9C,GAAqB,iBAAVD,EACP,MAAM,IAAIZ,EAAa,wBAAwBc,OAAOF,IAG1D,OADAC,EAAKO,UAAUT,EAAQC,GAAO,GACvBD,EAASnB,KAAKe,IACzB,EACAY,EAAQjC,UAAU8B,OAAS,SAAUL,EAAQE,GACzC,IAAII,EAAUJ,EAAKQ,UAAUV,GAAQ,GACrC,MAAO,CAACA,EAASnB,KAAKe,KAAMU,EAChC,EACOE,CACX,CAjB4B,CAiB1Bb,GACEgB,EAAyB,SAAUrB,GAEnC,SAASqB,IACL,OAAOrB,EAAOb,KAAKI,KAAM,EAAG,IAAMA,IACtC,CAYA,OAfAd,EAAU4C,EAASrB,GAInBqB,EAAQpC,UAAUwB,KAAO,SAAUC,EAAQC,EAAOC,GAC9C,GAAqB,iBAAVD,EACP,MAAM,IAAIZ,EAAa,wBAAwBc,OAAOF,IAG1D,OADAC,EAAKU,WAAWZ,EAAQC,GAAO,GACxBD,EAASnB,KAAKe,IACzB,EACAe,EAAQpC,UAAU8B,OAAS,SAAUL,EAAQE,GACzC,IAAII,EAAUJ,EAAKW,WAAWb,GAAQ,GACtC,MAAO,CAACA,EAASnB,KAAKe,KAAMU,EAChC,EACOK,CACX,CAjB4B,CAiB1BhB,GAGSmB,GAFM,IAAIhB,EACJ,IAAIU,EACJ,IAAIG,GACjBI,EAA4B,SAAUzB,GAEtC,SAASyB,EAAWC,EAAUC,EAASpB,GACnC,IAAIL,EAAQF,EAAOb,KAAKI,KAAMmC,EAASpB,KAAOqB,EAASpB,IAAchB,KAGrE,OAFAW,EAAMwB,SAAWA,EACjBxB,EAAMyB,QAAUA,EACTzB,CACX,CAuCA,OA7CAzB,EAAUgD,EAAYzB,GAOtByB,EAAWxC,UAAUwB,KAAO,SAAUC,EAAQkB,EAAQhB,GAClD,IAAK7B,MAAM8C,QAAQD,GACf,MAAM,IAAI7B,EAAa,uBAAuBc,OAAOe,IAEzD,GAAIA,EAAOE,SAAWvC,KAAKoC,QACvB,MAAM,IAAI5B,EAAa,YAAYc,OAAOtB,KAAKoC,QAAS,iBAAiBd,OAAOe,EAAOE,SAE3F,KAAOpB,EAASnB,KAAKgB,WAAc,GAC/BG,IAEJ,IAAK,IAAIqB,EAAI,EAAGA,EAAIH,EAAOE,OAAQC,IAC/B,IACIrB,EAASnB,KAAKmC,SAASjB,KAAKC,EAAQkB,EAAOG,GAAInB,EACnD,CACA,MAAOoB,GACH,MAAIA,aAAajC,EACP,IAAIA,EAAa,uBAAuBc,OAAOkB,EAAG,MAAMlB,OAAOmB,EAAE/B,UAGjE+B,CAEd,CAGJ,OAAOtB,CACX,EACAe,EAAWxC,UAAU8B,OAAS,SAAUL,EAAQE,GAE5C,IADA,IAAIgB,EAAS,GACNlB,EAASnB,KAAKgB,WAAc,GAC/BG,IAEJ,IAAK,IAAIqB,EAAI,EAAGA,EAAIxC,KAAKoC,QAASI,IAAK,CACnC,IAAIE,EAAK1C,KAAKmC,SAASX,OAAOL,EAAQE,GAAOsB,EAAYD,EAAG,GAAItB,EAAQsB,EAAG,GAC3EvB,EAASwB,EACTN,EAAOO,KAAKxB,EAChB,CACA,MAAO,CAACD,EAAQkB,EACpB,EACOH,CACX,CA/C+B,CA+C7BpB,GACE+B,EAAsB,SAAUpC,GAEhC,SAASoC,EAAKV,GACV,OAAO1B,EAAOb,KAAKI,KAAMmC,EAAU,EAAG,IAAMnC,IAChD,CACA,OAJAd,EAAU2D,EAAMpC,GAIToC,CACX,CANyB,CAMvBX,GAEEY,EAAsB,SAAUrC,GAEhC,SAASqC,EAAKX,GACV,OAAO1B,EAAOb,KAAKI,KAAMmC,EAAU,EAAG,KAAOnC,IACjD,CACA,OAJAd,EAAU4D,EAAMrC,GAITqC,CACX,CANyB,CAMvBZ,GAEEa,EAAsB,SAAUtC,GAEhC,SAASsC,EAAKZ,GACV,OAAO1B,EAAOb,KAAKI,KAAMmC,EAAU,EAAG,KAAOnC,IACjD,CACA,OAJAd,EAAU6D,EAAMtC,GAITsC,CACX,CANyB,CAMvBb,GAEEc,EAAwB,SAAUvC,GAElC,SAASuC,EAAOC,GAOZ,IANA,IAAItC,EAAQX,KACRgB,EAAYV,KAAK4C,IAAIC,MAAM7C,KAAM2C,EAAQG,KAAI,SAAUV,GAEvD,OADYA,EAAG,GAAWA,EAAG,GACjB1B,SAChB,KACIG,EAAS,EACJkC,EAAK,EAAGC,EAAYL,EAASI,EAAKC,EAAUf,OAAQc,IAAM,CAE/D,IADA,IAAIX,EAAKY,EAAUD,GAAgBE,GAAPb,EAAG,GAAWA,EAAG,IACtCvB,EAASoC,EAAKvC,WAAc,GAC/BG,IAEJA,GAAUoC,EAAKxC,IACnB,CAGA,IAAIA,EAAOZ,EAAQgB,EAAQH,GAG3B,OAFAL,EAAQF,EAAOb,KAAKI,KAAMe,EAAMC,IAAchB,MACxCiD,QAAUA,EACTtC,CACX,CAmDA,OAxEAzB,EAAU8D,EAAQvC,GAsBlBuC,EAAOtD,UAAUwB,KAAO,SAAUC,EAAQkB,EAAQhB,GAC9C,IAAImC,EAAexD,KAAKiD,QAAQG,KAAI,SAAUV,GAC1C,IAAI9B,EAAO8B,EAAG,GACd,OAD0BA,EAAG,GACtB9B,CACX,IACI6C,EAAapE,OAAOqE,KAAKrB,GAC7B,GAAImB,EAAajB,SAAWkB,EAAWlB,OACnC,MAAM,IAAI/B,EAAa,uBAAuBc,OAAOkC,EAAc,UAAUlC,OAAOmC,IAExF,IAAKD,EAAaG,OAAM,SAAUC,GAAO,OAAOH,EAAWI,SAASD,EAAM,IACtE,MAAM,IAAIpD,EAAa,uBAAuBc,OAAOkC,EAAc,UAAUlC,OAAOmC,IAGxF,IADA,IAAIK,EAAiB3C,EACdA,EAASnB,KAAKgB,WAAc,GAC/BG,IAEJ,IAAK,IAAIkC,EAAK,EAAGX,EAAK1C,KAAKiD,QAASI,EAAKX,EAAGH,OAAQc,IAAM,CACtD,IAAIU,EAAKrB,EAAGW,GAAKW,EAASD,EAAG,GAAIR,EAAOQ,EAAG,GACvC3C,EAAQiB,EAAO2B,GACnB,IACI7C,EAASoC,EAAKrC,KAAKC,EAAQC,EAAOC,EACtC,CACA,MAAOoB,GAEH,MAAIA,aAAajC,EACP,IAAIA,EAAa,uBAAuBc,OAAO0C,EAAQ,MAAM1C,OAAOmB,EAAE/B,UAGtE+B,CAEd,CACJ,CAEA,OADAtB,GAAUnB,KAAKe,MAAQI,EAAS2C,GAEpC,EACAd,EAAOtD,UAAU8B,OAAS,SAAUL,EAAQE,GAGxC,IAFA,IAAIgB,EAAS,CAAC,EACVyB,EAAiB3C,EACdA,EAASnB,KAAKgB,WAAc,GAC/BG,IAEJ,IAAK,IAAIkC,EAAK,EAAGX,EAAK1C,KAAKiD,QAASI,EAAKX,EAAGH,OAAQc,IAAM,CACtD,IAAIU,EAAKrB,EAAGW,GAAKY,EAASF,EAAG,GACzBG,EADoCH,EAAG,GAC7BvC,OAAOL,EAAQE,GAAOsB,EAAYuB,EAAG,GAAI9C,EAAQ8C,EAAG,GAClE/C,EAASwB,EACTN,EAAO4B,GAAU7C,CACrB,CAEA,MAAO,CADPD,GAAUnB,KAAKe,MAAQI,EAAS2C,GAChBzB,EACpB,EACOW,CACX,CA1E2B,CA0EzBlC,GAEEqD,EAA6B,SAAU1D,GAEvC,SAAS0D,EAAYZ,EAAMa,GACvB,IAAIzD,EAAQX,KACRgB,EAAYuC,EAAKvC,UACjBD,EAAOqD,EAAYjE,EAAQoD,EAAKxC,KAAMwC,EAAKvC,WAK/C,OAJAL,EAAQF,EAAOb,KAAKI,KAAMe,EAAMC,IAAchB,MACxCuD,KAAOA,EACb5C,EAAMyD,UAAYA,EAClBzD,EAAM0D,OAASlE,EAAQoD,EAAKxC,KAAMwC,EAAKvC,WAChCL,CACX,CAwCA,OAlDAzB,EAAUiF,EAAa1D,GAWvB0D,EAAYzE,UAAUwB,KAAO,SAAUC,EAAQkB,EAAQhB,GACnD,IAAK7B,MAAM8C,QAAQD,GACf,MAAM,IAAI7B,EAAa,uBAAuBc,OAAOe,IAEzD,GAAIA,EAAOE,SAAWvC,KAAKoE,UACvB,MAAM,IAAI5D,EAAa,YAAYc,OAAOtB,KAAKoE,UAAW,iBAAiB9C,OAAOe,EAAOE,SAE7F,KAAOpB,EAASnB,KAAKgB,WAAc,GAC/BG,IAEJ,IAAK,IAAIqB,EAAI,EAAGA,EAAIH,EAAOE,OAAQC,IAAK,CACpC,IACIrB,EAASnB,KAAKuD,KAAKrC,KAAKC,EAAQkB,EAAOG,GAAInB,EAC/C,CACA,MAAOoB,GACH,MAAIA,aAAajC,EACP,IAAIA,EAAa,uBAAuBc,OAAOkB,EAAG,MAAMlB,OAAOmB,EAAE/B,UAGjE+B,CAEd,CACAtB,GAAUnB,KAAKqE,OAASrE,KAAKuD,KAAKxC,IACtC,CACA,OAAOI,CACX,EACAgD,EAAYzE,UAAU8B,OAAS,SAAUL,EAAQE,GAE7C,IADA,IAAIgB,EAAS,GACNlB,EAASnB,KAAKgB,WAAc,GAC/BG,IAEJ,IAAK,IAAIqB,EAAI,EAAGA,EAAIxC,KAAKoE,UAAW5B,IAAK,CACrC,IAAIE,EAAK1C,KAAKuD,KAAK/B,OAAOL,EAAQE,GAAOsB,EAAYD,EAAG,GAAItB,EAAQsB,EAAG,GACvEvB,EAASwB,EACTN,EAAOO,KAAKxB,GACZD,GAAUnB,KAAKqE,OAASrE,KAAKuD,KAAKxC,IACtC,CACA,MAAO,CAACI,EAAQkB,EACpB,EACO8B,CACX,CApDgC,CAoD9BrD,GA8EEwD,EAAwB,SAAU7D,GAElC,SAAS6D,EAAOnC,GACZ,OAAO1B,EAAOb,KAAKI,KAAMmC,EAAU,EAAG,IAAMnC,IAChD,CACA,OAJAd,EAAUoF,EAAQ7D,GAIX6D,CACX,CAN2B,CA5EK,SAAU7D,GAEtC,SAAS8D,EAAWpC,EAAUqC,EAAOC,GACjC,IACIC,EADA/D,EAAQX,KAEZ,GAAc,IAAVwE,EACAE,EAAU,IAAI7B,EAAKV,QAElB,GAAc,IAAVqC,EACLE,EAAU,IAAI5B,EAAKX,OAElB,IAAc,IAAVqC,EAIL,MAAM,IAAI3D,MAAM,2BAA2BS,OAAOkD,IAHlDE,EAAU,IAAI3B,EAAKZ,EAIvB,CACA,IAAIwC,EAAY,IAAIR,EAAYO,EAASD,GAKzC,OAJA9D,EAAQF,EAAOb,KAAKI,KAAM2E,EAAU5D,KAAM2D,EAAQ1D,YAAchB,MAC1DmC,SAAWA,EACjBxB,EAAM6D,MAAQA,EACd7D,EAAM8D,SAAWA,EACV9D,CACX,CAmDA,OAzEAzB,EAAUqF,EAAY9D,GAuBtB8D,EAAW7E,UAAUwB,KAAO,SAAUC,EAAQkB,EAAQhB,GAClD,IAAK7B,MAAM8C,QAAQD,GACf,MAAM,IAAI7B,EAAa,uBAAuBc,OAAOe,IAEzD,GAAIA,EAAOE,SAAWvC,KAAKyE,SACvB,MAAM,IAAIjE,EAAa,YAAYc,OAAOtB,KAAKyE,SAAU,kBAAkBnD,OAAOe,EAAOE,SAE7F,KAAOpB,EAASnB,KAAKgB,WAAc,GAC/BG,IAGJ,IADA,IAAIyD,EAAczD,EACTqB,EAAI,EAAGA,EAAIH,EAAOE,OAAQC,IAAK,CACpC,IAAKhD,MAAM8C,QAAQD,EAAOG,IACtB,MAAM,IAAIhC,EAAa,uBAAuBc,OAAOe,EAAOG,KAEhE,IAAK,IAAIqC,EAAI,EAAGA,EAAIxC,EAAOG,GAAGD,OAAQsC,IAClC,IACI1D,EAASnB,KAAKmC,SAASjB,KAAKC,EAAQkB,EAAOG,GAAGqC,GAAIxD,EACtD,CACA,MAAOoB,GACH,MAAIA,aAAajC,EACP,IAAIA,EAAa,uBAAuBc,OAAOkB,EAAG,KAAKlB,OAAOuD,EAAG,MAAMvD,OAAOmB,EAAE/B,UAGhF+B,CAEd,CAER,CAEA,OADSmC,EAAc5E,KAAKe,IAEhC,EACAwD,EAAW7E,UAAU8B,OAAS,SAAUL,EAAQE,GAC5C,KAAOF,EAASnB,KAAKgB,WAAc,GAC/BG,IAIJ,IAFA,IAAIyD,EAAczD,EACd2D,EAAc,GACTtC,EAAI,EAAGA,EAAIxC,KAAKyE,SAAUjC,IAAK,CAEpC,IADA,IAAIuC,EAAc,GACTF,EAAI,EAAGA,EAAI7E,KAAKwE,MAAOK,IAAK,CACjC,IAAInC,EAAK1C,KAAKmC,SAASX,OAAOL,EAAQE,GAAOsB,EAAYD,EAAG,GAAItB,EAAQsB,EAAG,GAC3EvB,EAASwB,EACToC,EAAYnC,KAAKxB,EACrB,CACA0D,EAAYlC,KAAKmC,EACrB,CAEA,MAAO,CADP5D,GAAUnB,KAAKe,MAAQI,EAASyD,GAChBE,EACpB,EACOP,CACX,CA3E+B,CA2E7BzD,IC7VEkE,EAAiC,WACjC,SAASA,EAAgBC,GAErB,IAAIvC,EAAKsC,EAAgBE,aAAaD,GAAcE,EAAczC,EAAG,GAAI0C,EAAgB1C,EAAG,GAAI2C,EAAa3C,EAAG,GAChH1C,KAAKsF,aAAeH,EAEpB,IAAII,EAAc,EAClB,IAAK,IAAIC,KAAgBJ,EACjBI,EAAaC,WAAW,aACxBF,GAAe,GAGvB,IAAIG,EAAkBH,EAAc,EACpCvF,KAAK2F,yBAA2BrF,KAAKsF,KAAKF,EAAkB,GAAK,EACjEG,QAAQC,IAAI,kBAAmB9F,KAAK2F,yBAA0B,QAASD,EAAiB,0BAGxF,IADA,IAAIK,EAAiB,GACZC,EAAM,EAAGA,EAAM,IAAKA,EACzBD,EAAenD,KAAK,QAAQtB,OAAO0E,IAEvC,IAAK,IAAIxD,EAAI,EAAGA,EAAIkD,IAAmBlD,EACnC,IAASwD,EAAM,EAAGA,EAAM,IAAKA,EACzBD,EAAenD,KAAK,UAAUtB,OAAO0E,EAAMN,EAAkBlD,IAIrExC,KAAKiG,eAAiB,IAAIjD,EAAO,CAC7B,CAAC,WAAY,IAAIF,EAAKb,IACtB,CAAC,WAAY,IAAIa,EAAKb,IACtB,CAAC,UAAW,IAAIc,EAAKd,IACrB,CAAC,eAAgBA,GACjB,CAAC,WAAY,IAAIkC,EAAY,IAAIrB,EAAKb,GAAMjC,KAAKkG,cAGrDlG,KAAKmG,oBAAsB,IAAIhC,EAAYnE,KAAKiG,eAAgBd,GAEhEnF,KAAKoG,eAAiB,GACtBpG,KAAKqG,gBAAkB,IAAIC,YAAYtG,KAAKmG,oBAAoBpF,MAChE,IAAIwF,EAAoB,IAAIC,SAASxG,KAAKqG,iBACtCI,EAAa,EACbC,EAAsB,EAC1B,IAASlE,EAAI,EAAGA,EAAI2C,EAAa3C,IAAK,CAClC,IAAIuB,EAAK/D,KAAK2G,cAAcF,EAAYpB,EAAYD,GAAgBwB,EAAgB7C,EAAG,GAAI8C,EAAY9C,EAAG,GAC1G0C,EAAaG,EACbF,EAAsB1G,KAAKiG,eAAe/E,KAAKwF,EAAqB1G,KAAK8G,cAAcD,EAAWd,GAAiBQ,GACnHvG,KAAKoG,eAAexD,KAAK,CAACiE,EAAUE,EAAGF,EAAUG,EAAGH,EAAUI,GAClE,CACJ,CAmGA,OAlGAjC,EAAgBE,aAAe,SAAUgC,GAIrC,IAHA,IAAIC,EAAU,IAAIC,YACdC,EAAe,EACfC,EAAa,KACJ,CACT,IAAIC,EAAc,IAAIC,WAAWN,EAAgBG,EAAc,IAG/D,GADAA,GAAgB,IADhBC,GAAcH,EAAQM,OAAOF,IAEd1D,SAAS,cACpB,KAER,CAIA,IAHA,IAAI6D,EAAcJ,EAAWK,MAAM,MAC/BxC,EAAc,EACdC,EAAgB,CAAC,EACZ5C,EAAI,EAAGA,EAAIkF,EAAYnF,OAAQC,IAAK,CACzC,IAAIoF,EAAOF,EAAYlF,GAAGqF,OAC1B,GAAID,EAAKnC,WAAW,kBAAmB,CACnC,IAAIqC,EAAmBF,EAAKG,MAAM,OAC9BD,IACA3C,EAAc6C,SAASF,EAAiB,IAEhD,MACK,GAAIF,EAAKnC,WAAW,YAAa,CAClC,IAAIwC,EAAgBL,EAAKG,MAAM,yBAC/B,GAAIE,EAAe,CACf,IAAIC,EAAeD,EAAc,GAEjC7C,EADmB6C,EAAc,IACHC,CAClC,CACJ,MACK,GAAa,eAATN,EACL,KAER,CACA,IAAIO,EAAmBb,EAAWc,QAAQ,cAAgB,GAAsB,EAEhF,MAAO,CACHjD,EACAC,EAHa,IAAIoB,SAASU,EAAgBiB,GAMlD,EACAnD,EAAgBtF,UAAUiH,cAAgB,SAAUxF,EAAQkE,EAAYD,GACpE,IAAIyB,EAAY,CAAC,EACjB,IAAK,IAAIwB,KAAYjD,EAAe,CAChC,IAAI8C,EAAe9C,EAAciD,GACZ,UAAjBH,GACArB,EAAUwB,GAAYhD,EAAWrD,WAAWb,GAAQ,GACpDA,GAAUmH,aAAaC,mBAED,UAAjBL,IACLrB,EAAUwB,GAAYhD,EAAWmD,SAASrH,GAAU,IACpDA,GAAUqG,WAAWe,kBAE7B,CACA,MAAO,CAACpH,EAAQ0F,EACpB,EACAxH,OAAOoJ,eAAezD,EAAgBtF,UAAW,YAAa,CAC1DgJ,IAAK,WACD,GAAsC,IAAlC1I,KAAK2F,yBACL,OAAO,EAEN,GAAsC,IAAlC3F,KAAK2F,yBACV,OAAO,EAEN,GAAsC,IAAlC3F,KAAK2F,yBACV,OAAO,EAEN,GAAsC,IAAlC3F,KAAK2F,yBACV,OAAO,GAGP,MAAM,IAAI9E,MAAM,0BAA0BS,OAAOtB,KAAK2F,0BAE9D,EACAgD,YAAY,EACZC,cAAc,IAElB5D,EAAgBtF,UAAUoH,cAAgB,SAAUD,EAAWd,GAE3D,IADA,IAAI8C,EAAW,GACNrG,EAAI,EAAGA,EAAIxC,KAAKkG,YAAa1D,EAAG,CAErC,IADA,IAAIsG,EAAQ,GACHjE,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAIkE,EAAYhD,EAAmB,EAAJvD,EAAQqC,GACvCiE,EAAMlG,KAAKiE,EAAUkC,GACzB,CACAF,EAASjG,KAAKkG,EAClB,CAQA,MAPqB,CACjBE,SAAU,CAACnC,EAAUE,EAAGF,EAAUG,EAAGH,EAAUI,GAC/CgC,SAAU,CAACpC,EAAUqC,QAASrC,EAAUsC,QAAStC,EAAUuC,SAC3DC,QAAS,CAACxC,EAAUyC,MAAOzC,EAAU0C,MAAO1C,EAAU2C,MAAO3C,EAAU4C,OACvEC,aAAc7C,EAAU8C,QACxBd,SAAUA,EAGlB,EACO7D,CACX,CAnJoC,GCHpC,IAAI4E,EAAU,KA6HVC,EAAYvB,aAsChB,SAASwB,EAAS/C,EAAI,EAAGC,EAAI,GACzB,MAAM+C,EAAM,IAAIF,EAAU,GAO1B,YANUG,IAANjD,IACAgD,EAAI,GAAKhD,OACCiD,IAANhD,IACA+C,EAAI,GAAK/C,IAGV+C,CACX,CA8nBA,IAAIE,EAAY3B,aAIhB,MAAM4B,EAAU,IAAIC,IAAI,CACpB,CAAC7B,aAAc,IAAM,IAAIA,aAAa,KACtC,CAAC8B,aAAc,IAAM,IAAIA,aAAa,KACtC,CAAC5K,MAAO,IAAM,IAAIA,MAAM,IAAI6K,KAAK,MAErC,IAAIC,EAAUJ,EAAQxB,IAAIJ,cAuM1B,SAASiC,EAAOC,EAAGT,GAWf,OAVAA,EAAMA,GAAOO,KACT,GAAKE,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,IAAMS,EAAE,IACLT,CACX,CAQA,MAAMU,EAAUF,EAyChB,SAASG,EAAWX,GAWhB,OAVAA,EAAMA,GAAOO,KACT,GAAK,EACTP,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACHA,CACX,CAmDA,SAASY,EAAUH,EAAGT,GAClBA,EAAMA,GAAOO,IACb,MAAMM,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACRa,EAAMD,EAAMJ,EAAMC,EAAME,EACxBG,GAAOF,EAAML,EAAME,EAAMC,EACzBK,EAAMJ,EAAMJ,EAAMC,EAAME,EACxBM,EAAS,GAAKZ,EAAMS,EAAMR,EAAMS,EAAMR,EAAMS,GAUlD,OATAxB,EAAI,GAAKsB,EAAMG,EACfzB,EAAI,KAAOqB,EAAMP,EAAMC,EAAMK,GAAOK,EACpCzB,EAAI,IAAMkB,EAAMJ,EAAMC,EAAME,GAAOQ,EACnCzB,EAAI,GAAKuB,EAAME,EACfzB,EAAI,IAAMqB,EAAMR,EAAME,EAAMI,GAAOM,EACnCzB,EAAI,KAAOkB,EAAML,EAAME,EAAMC,GAAOS,EACpCzB,EAAI,GAAKwB,EAAMC,EACfzB,EAAI,KAAOoB,EAAMP,EAAMC,EAAMK,GAAOM,EACpCzB,EAAI,KAAOiB,EAAMJ,EAAMC,EAAME,GAAOS,EAC7BzB,CACX,CA0BA,MAAM0B,EAAWd,EAQjB,SAASe,EAAWC,EAAGvM,EAAG2K,GACtBA,EAAMA,GAAOO,IACb,MAAMsB,EAAMD,EAAE,GACRE,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,IACRU,EAAMjN,EAAE,GACRiM,EAAMjM,EAAE,GACRkN,EAAMlN,EAAE,GACRmN,EAAMnN,EAAE,GACRkM,EAAMlM,EAAE,GACRoN,EAAMpN,EAAE,GACRqN,EAAMrN,EAAE,GACRmM,EAAMnM,EAAE,GACRsN,EAAMtN,EAAE,IAUd,OATA2K,EAAI,GAAK6B,EAAMS,EAAMN,EAAMV,EAAMa,EAAMI,EACvCvC,EAAI,GAAK8B,EAAMQ,EAAML,EAAMX,EAAMc,EAAMG,EACvCvC,EAAI,GAAK+B,EAAMO,EAAMJ,EAAMZ,EAAMe,EAAME,EACvCvC,EAAI,GAAK6B,EAAMW,EAAMR,EAAMT,EAAMY,EAAMM,EACvCzC,EAAI,GAAK8B,EAAMU,EAAMP,EAAMV,EAAMa,EAAMK,EACvCzC,EAAI,GAAK+B,EAAMS,EAAMN,EAAMX,EAAMc,EAAMI,EACvCzC,EAAI,GAAK6B,EAAMa,EAAMV,EAAMR,EAAMW,EAAMQ,EACvC3C,EAAI,GAAK8B,EAAMY,EAAMT,EAAMT,EAAMY,EAAMO,EACvC3C,EAAI,IAAM+B,EAAMW,EAAMR,EAAMV,EAAMa,EAAMM,EACjC3C,CACX,CAQA,MAAM4C,EAAQjB,EAqRd,IAAIkB,EAAwBvN,OAAOwN,OAAO,CACtCtN,UAAW,KACXuN,eArrBJ,SAA0BC,GACtB,MAAMC,EAAU/C,EAGhB,OAFAA,EAAY8C,EACZzC,EAAUJ,EAAQxB,IAAIqE,GACfC,CACX,EAirBI9M,OA9oBJ,SAAkB+M,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAC9C,MAAM1D,EAAMO,IAgCZ,OA9BAP,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,OACCC,IAAPiD,IACAlD,EAAI,GAAKkD,OACEjD,IAAPkD,IACAnD,EAAI,GAAKmD,OACElD,IAAPmD,IACApD,EAAI,GAAKoD,OACEnD,IAAPoD,IACArD,EAAI,GAAKqD,OACEpD,IAAPqD,IACAtD,EAAI,GAAKsD,OACErD,IAAPsD,IACAvD,EAAI,GAAKuD,OACEtD,IAAPuD,IACAxD,EAAI,GAAKwD,OACEvD,IAAPwD,IACAzD,EAAI,GAAKyD,OACExD,IAAPyD,IACA1D,EAAI,IAAM0D,WAUvC1D,CACX,EA6mBI2D,IA5lBJ,SAAeT,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAI1D,GAc/C,OAbAA,EAAMA,GAAOO,KACT,GAAK2C,EACTlD,EAAI,GAAKmD,EACTnD,EAAI,GAAKoD,EACTpD,EAAI,GAAK,EACTA,EAAI,GAAKqD,EACTrD,EAAI,GAAKsD,EACTtD,EAAI,GAAKuD,EACTvD,EAAI,GAAK,EACTA,EAAI,GAAKwD,EACTxD,EAAI,GAAKyD,EACTzD,EAAI,IAAM0D,EACV1D,EAAI,IAAM,EACHA,CACX,EA8kBI4D,SAvkBJ,SAAkBC,EAAI7D,GAclB,OAbAA,EAAMA,GAAOO,KACT,GAAKsD,EAAG,GACZ7D,EAAI,GAAK6D,EAAG,GACZ7D,EAAI,GAAK6D,EAAG,GACZ7D,EAAI,GAAK,EACTA,EAAI,GAAK6D,EAAG,GACZ7D,EAAI,GAAK6D,EAAG,GACZ7D,EAAI,GAAK6D,EAAG,GACZ7D,EAAI,GAAK,EACTA,EAAI,GAAK6D,EAAG,GACZ7D,EAAI,GAAK6D,EAAG,GACZ7D,EAAI,IAAM6D,EAAG,IACb7D,EAAI,IAAM,EACHA,CACX,EAyjBI8D,SAljBJ,SAAoBC,EAAG/D,GACnBA,EAAMA,GAAOO,IACb,MAAMvD,EAAI+G,EAAE,GACN9G,EAAI8G,EAAE,GACN7G,EAAI6G,EAAE,GACNC,EAAID,EAAE,GACNE,EAAKjH,EAAIA,EACTkH,EAAKjH,EAAIA,EACTkH,EAAKjH,EAAIA,EACTkH,EAAKpH,EAAIiH,EACTI,EAAKpH,EAAIgH,EACTK,EAAKrH,EAAIiH,EACTK,EAAKrH,EAAI+G,EACTO,EAAKtH,EAAIgH,EACTO,EAAKvH,EAAIiH,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAaf,OAZAnE,EAAI,GAAK,EAAIsE,EAAKG,EAClBzE,EAAI,GAAKqE,EAAKO,EACd5E,EAAI,GAAKuE,EAAKI,EACd3E,EAAI,GAAK,EACTA,EAAI,GAAKqE,EAAKO,EACd5E,EAAI,GAAK,EAAIoE,EAAKK,EAClBzE,EAAI,GAAKwE,EAAKE,EACd1E,EAAI,GAAK,EACTA,EAAI,GAAKuE,EAAKI,EACd3E,EAAI,GAAKwE,EAAKE,EACd1E,EAAI,IAAM,EAAIoE,EAAKE,EACnBtE,EAAI,IAAM,EACHA,CACX,EAohBI6E,OA7gBJ,SAAkBpE,EAAGT,GAWjB,OAVAA,EAAMA,GAAOO,KACT,IAAME,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,KAAOS,EAAE,IACNT,CACX,EAkgBI8E,KAAMtE,EACNuE,MAAOrE,EACPsE,oBAjeJ,SAA+BpD,EAAGvM,GAC9B,OAAOkB,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GAC3BtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,IAAMvM,EAAE,KAAOwK,CAClC,EAwdIqF,OAjdJ,SAAkBtD,EAAGvM,GACjB,OAAOuM,EAAE,KAAOvM,EAAE,IACduM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,MAAQvM,EAAE,GACpB,EAwcI8P,SAAUxE,EACVyE,UA/aJ,SAAqB3E,EAAGT,GAEpB,IADAA,EAAMA,GAAOO,OACDE,EAAG,CACX,IAAI4E,EAaJ,OATAA,EAAI5E,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAK4E,EACPA,EAAI5E,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAK4E,EACPA,EAAI5E,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAK4E,EACArF,CACX,CACA,MAAMa,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IAUd,OATAT,EAAI,GAAKa,EACTb,EAAI,GAAKgB,EACThB,EAAI,GAAKmB,EACTnB,EAAI,GAAKc,EACTd,EAAI,GAAKiB,EACTjB,EAAI,GAAKoB,EACTpB,EAAI,GAAKe,EACTf,EAAI,GAAKkB,EACTlB,EAAI,IAAMqB,EACHrB,CACX,EA2YIsF,QAAS1E,EACT2E,YAtWJ,SAAuB9E,GACnB,MAAMI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACd,OAAOI,GAAOI,EAAMI,EAAMD,EAAMF,GAC5BF,GAAOF,EAAMO,EAAMD,EAAML,GACzBI,GAAOL,EAAMI,EAAMD,EAAMF,EACjC,EA0VIyE,OAAQ9D,EACR+D,SAAU9D,EACV+D,IAAK9C,EACL+C,eA/RJ,SAA0B/D,EAAGgE,EAAG5F,GAa5B,OAXI4B,KADJ5B,EAAMA,GAAOW,OAETX,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,IAEf5B,EAAI,GAAK4F,EAAE,GACX5F,EAAI,GAAK4F,EAAE,GACX5F,EAAI,IAAM,EACHA,CACX,EAkRI6F,eA1QJ,SAA0BpF,EAAGT,GAIzB,OAHAA,EAAMA,GAAOD,KACT,GAAKU,EAAE,GACXT,EAAI,GAAKS,EAAE,GACJT,CACX,EAsQI8F,QA/PJ,SAAmBrF,EAAGsF,EAAM/F,GAExB,MAAMgG,EAAa,EAAPD,EAGZ,OAJA/F,EAAMA,GAAOD,KAET,GAAKU,EAAEuF,EAAM,GACjBhG,EAAI,GAAKS,EAAEuF,EAAM,GACVhG,CACX,EA0PIiG,QAjPJ,SAAmBxF,EAAGmF,EAAGG,EAAM/F,GACvBA,IAAQS,IACRT,EAAMQ,EAAOC,EAAGT,IAEpB,MAAMgG,EAAa,EAAPD,EAGZ,OAFA/F,EAAIgG,EAAM,GAAKJ,EAAE,GACjB5F,EAAIgG,EAAM,GAAKJ,EAAE,GACV5F,CACX,EA0OIkG,WApOJ,SAAsBzF,EAAGT,GACrBA,EAAMA,GAAOD,IACb,MAAMqE,EAAK3D,EAAE,GACP0F,EAAK1F,EAAE,GACP4D,EAAK5D,EAAE,GACP6D,EAAK7D,EAAE,GAGb,OAFAT,EAAI,GAAKzJ,KAAKsF,KAAKuI,EAAKA,EAAK+B,EAAKA,GAClCnG,EAAI,GAAKzJ,KAAKsF,KAAKwI,EAAKA,EAAKC,EAAKA,GAC3BtE,CACX,EA4NIoG,YArNJ,SAAuBR,EAAG5F,GAWtB,OAVAA,EAAMA,GAAOO,KACT,GAAK,EACTP,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK4F,EAAE,GACX5F,EAAI,GAAK4F,EAAE,GACX5F,EAAI,IAAM,EACHA,CACX,EA0MIqG,UAlMJ,SAAqB5F,EAAGmF,EAAG5F,GACvBA,EAAMA,GAAOO,IACb,MAAM2C,EAAK0C,EAAE,GACPzC,EAAKyC,EAAE,GACP/E,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IAYd,OAXIA,IAAMT,IACNA,EAAI,GAAKa,EACTb,EAAI,GAAKc,EACTd,EAAI,GAAKe,EACTf,EAAI,GAAKgB,EACThB,EAAI,GAAKiB,EACTjB,EAAI,GAAKkB,GAEblB,EAAI,GAAKa,EAAMqC,EAAKlC,EAAMmC,EAAKhC,EAC/BnB,EAAI,GAAKc,EAAMoC,EAAKjC,EAAMkC,EAAK/B,EAC/BpB,EAAI,IAAMe,EAAMmC,EAAKhC,EAAMiC,EAAK9B,EACzBrB,CACX,EA0KIsG,SAnKJ,SAAoBC,EAAgBvG,GAChCA,EAAMA,GAAOO,IACb,MAAMiG,EAAIjQ,KAAKkQ,IAAIF,GACbG,EAAInQ,KAAKoQ,IAAIJ,GAUnB,OATAvG,EAAI,GAAKwG,EACTxG,EAAI,GAAK0G,EACT1G,EAAI,GAAK,EACTA,EAAI,IAAM0G,EACV1G,EAAI,GAAKwG,EACTxG,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACHA,CACX,EAsJI4G,OA9IJ,SAAkBnG,EAAG8F,EAAgBvG,GACjCA,EAAMA,GAAOO,IACb,MAAMM,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACR+F,EAAIjQ,KAAKkQ,IAAIF,GACbG,EAAInQ,KAAKoQ,IAAIJ,GAYnB,OAXAvG,EAAI,GAAKwG,EAAI3F,EAAM6F,EAAI1F,EACvBhB,EAAI,GAAKwG,EAAI1F,EAAM4F,EAAIzF,EACvBjB,EAAI,GAAKwG,EAAIzF,EAAM2F,EAAIxF,EACvBlB,EAAI,GAAKwG,EAAIxF,EAAM0F,EAAI7F,EACvBb,EAAI,GAAKwG,EAAIvF,EAAMyF,EAAI5F,EACvBd,EAAI,GAAKwG,EAAItF,EAAMwF,EAAI3F,EACnBN,IAAMT,IACNA,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,IAAMS,EAAE,KAETT,CACX,EAyHI6G,QA/GJ,SAAmBjB,EAAG5F,GAWlB,OAVAA,EAAMA,GAAOO,KACT,GAAKqF,EAAE,GACX5F,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK4F,EAAE,GACX5F,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACHA,CACX,EAoGI8G,MAzFJ,SAAiBrG,EAAGmF,EAAG5F,GACnBA,EAAMA,GAAOO,IACb,MAAM2C,EAAK0C,EAAE,GACPzC,EAAKyC,EAAE,GAYb,OAXA5F,EAAI,GAAKkD,EAAKzC,EAAE,GAChBT,EAAI,GAAKkD,EAAKzC,EAAE,GAChBT,EAAI,GAAKkD,EAAKzC,EAAE,GAChBT,EAAI,GAAKmD,EAAK1C,EAAE,GAChBT,EAAI,GAAKmD,EAAK1C,EAAE,GAChBT,EAAI,GAAKmD,EAAK1C,EAAE,GACZA,IAAMT,IACNA,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,IAAMS,EAAE,KAETT,CACX,EA0EI+G,eAnEJ,SAA0BL,EAAG1G,GAWzB,OAVAA,EAAMA,GAAOO,KACT,GAAKmG,EACT1G,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK0G,EACT1G,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACHA,CACX,EAwDIgH,aA/CJ,SAAwBvG,EAAGiG,EAAG1G,GAa1B,OAZAA,EAAMA,GAAOO,KACT,GAAKmG,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACXA,IAAMT,IACNA,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,IAAMS,EAAE,KAETT,CACX,IA+EA,IAAIiH,EAAY1I,aAkBhB,SAAS2I,EAASlK,EAAGC,EAAGC,GACpB,MAAM8C,EAAM,IAAIiH,EAAU,GAU1B,YATUhH,IAANjD,IACAgD,EAAI,GAAKhD,OACCiD,IAANhD,IACA+C,EAAI,GAAK/C,OACCgD,IAAN/C,IACA8C,EAAI,GAAK9C,KAId8C,CACX,CA8BA,MAAMmH,EAAeD,EA+HrB,SAASE,EAAWxF,EAAGvM,EAAG2K,GAKtB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKrF,EAAE,GAAKvM,EAAE,GAClB2K,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GAClB2K,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GACX2K,CACX,CAQA,MAAMqH,EAAQD,EA8Fd,SAASE,EAAY1B,EAAG2B,EAAGvH,GAKvB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKrB,EAAE,GAAK2B,EAChBvH,EAAI,GAAK4F,EAAE,GAAK2B,EAChBvH,EAAI,GAAK4F,EAAE,GAAK2B,EACTvH,CACX,CAQA,MAAMwH,EAAUF,EAqBhB,SAASG,EAAU7B,EAAG5F,GAKlB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAK,EAAIrB,EAAE,GACf5F,EAAI,GAAK,EAAI4F,EAAE,GACf5F,EAAI,GAAK,EAAI4F,EAAE,GACR5F,CACX,CAOA,MAAM0H,EAAWD,EASjB,SAASE,EAAM/F,EAAGvM,EAAG2K,GACjBA,EAAMA,GAAO,IAAIiH,EAAU,GAC3B,MAAMW,EAAKhG,EAAE,GAAKvM,EAAE,GAAKuM,EAAE,GAAKvM,EAAE,GAC5BwS,EAAKjG,EAAE,GAAKvM,EAAE,GAAKuM,EAAE,GAAKvM,EAAE,GAIlC,OAHA2K,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GAAKuM,EAAE,GAAKvM,EAAE,GAChC2K,EAAI,GAAK4H,EACT5H,EAAI,GAAK6H,EACF7H,CACX,CAQA,SAAS8H,EAAMlG,EAAGvM,GACd,OAAQuM,EAAE,GAAKvM,EAAE,GAAOuM,EAAE,GAAKvM,EAAE,GAAOuM,EAAE,GAAKvM,EAAE,EACrD,CAMA,SAAS0S,EAASnC,GACd,MAAM1C,EAAK0C,EAAE,GACPzC,EAAKyC,EAAE,GACPxC,EAAKwC,EAAE,GACb,OAAOrP,KAAKsF,KAAKqH,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAC9C,CAMA,MAAM4E,EAAQD,EAMd,SAASE,EAAWrC,GAChB,MAAM1C,EAAK0C,EAAE,GACPzC,EAAKyC,EAAE,GACPxC,EAAKwC,EAAE,GACb,OAAO1C,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,CACpC,CAMA,MAAM8E,EAAUD,EAOhB,SAASE,EAAWvG,EAAGvM,GACnB,MAAM+S,EAAKxG,EAAE,GAAKvM,EAAE,GACdgT,EAAKzG,EAAE,GAAKvM,EAAE,GACdiT,EAAK1G,EAAE,GAAKvM,EAAE,GACpB,OAAOkB,KAAKsF,KAAKuM,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAC9C,CAOA,MAAMC,EAASJ,EAOf,SAASK,EAAa5G,EAAGvM,GACrB,MAAM+S,EAAKxG,EAAE,GAAKvM,EAAE,GACdgT,EAAKzG,EAAE,GAAKvM,EAAE,GACdiT,EAAK1G,EAAE,GAAKvM,EAAE,GACpB,OAAO+S,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,CACpC,CAOA,MAAMG,EAAWD,EAOjB,SAASE,EAAY9C,EAAG5F,GACpBA,EAAMA,GAAO,IAAIiH,EAAU,GAC3B,MAAM/D,EAAK0C,EAAE,GACPzC,EAAKyC,EAAE,GACPxC,EAAKwC,EAAE,GACP+C,EAAMpS,KAAKsF,KAAKqH,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAW/C,OAVIuF,EAAM,MACN3I,EAAI,GAAKkD,EAAKyF,EACd3I,EAAI,GAAKmD,EAAKwF,EACd3I,EAAI,GAAKoD,EAAKuF,IAGd3I,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAENA,CACX,CAqBA,SAAS4I,EAAOhD,EAAG5F,GAKf,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKrB,EAAE,GACX5F,EAAI,GAAK4F,EAAE,GACX5F,EAAI,GAAK4F,EAAE,GACJ5F,CACX,CAQA,MAAM6I,EAAUD,EAShB,SAASE,EAAWlH,EAAGvM,EAAG2K,GAKtB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKrF,EAAE,GAAKvM,EAAE,GAClB2K,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GAClB2K,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GACX2K,CACX,CASA,MAAM+I,GAAQD,EASd,SAASE,GAASpH,EAAGvM,EAAG2K,GAKpB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKrF,EAAE,GAAKvM,EAAE,GAClB2K,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GAClB2K,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GACX2K,CACX,CASA,MAAMiJ,GAAQD,GA4Jd,IAAIE,GAAwB5T,OAAOwN,OAAO,CACtCtN,UAAW,KACXW,OAAQ+Q,EACRnE,eA9rBJ,SAA0BC,GACtB,MAAMC,EAAUgE,EAEhB,OADAA,EAAYjE,EACLC,CACX,EA2rBIkG,WAAYhC,EACZxD,IA/nBJ,SAAe3G,EAAGC,EAAGC,EAAG8C,GAKpB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKjK,EACTgD,EAAI,GAAK/C,EACT+C,EAAI,GAAK9C,EACF8C,CACX,EA0nBIxJ,KAnnBJ,SAAgBoP,EAAG5F,GAKf,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAK1Q,KAAKC,KAAKoP,EAAE,IACrB5F,EAAI,GAAKzJ,KAAKC,KAAKoP,EAAE,IACrB5F,EAAI,GAAKzJ,KAAKC,KAAKoP,EAAE,IACd5F,CACX,EA8mBIoJ,MAvmBJ,SAAiBxD,EAAG5F,GAKhB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAK1Q,KAAK6S,MAAMxD,EAAE,IACtB5F,EAAI,GAAKzJ,KAAK6S,MAAMxD,EAAE,IACtB5F,EAAI,GAAKzJ,KAAK6S,MAAMxD,EAAE,IACf5F,CACX,EAkmBIqJ,MA3lBJ,SAAiBzD,EAAG5F,GAKhB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAK1Q,KAAK8S,MAAMzD,EAAE,IACtB5F,EAAI,GAAKzJ,KAAK8S,MAAMzD,EAAE,IACtB5F,EAAI,GAAKzJ,KAAK8S,MAAMzD,EAAE,IACf5F,CACX,EAslBIsJ,MA7kBJ,SAAiB1D,EAAG2D,EAAM,EAAGpQ,EAAM,EAAG6G,GAKlC,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAK1Q,KAAKgT,IAAIpQ,EAAK5C,KAAK4C,IAAIoQ,EAAK3D,EAAE,KACvC5F,EAAI,GAAKzJ,KAAKgT,IAAIpQ,EAAK5C,KAAK4C,IAAIoQ,EAAK3D,EAAE,KACvC5F,EAAI,GAAKzJ,KAAKgT,IAAIpQ,EAAK5C,KAAK4C,IAAIoQ,EAAK3D,EAAE,KAChC5F,CACX,EAwkBIwJ,IAhkBJ,SAAe5H,EAAGvM,EAAG2K,GAKjB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKrF,EAAE,GAAKvM,EAAE,GAClB2K,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GAClB2K,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GACX2K,CACX,EA2jBIyJ,UAljBJ,SAAqB7H,EAAGvM,EAAGyR,EAAO9G,GAK9B,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKrF,EAAE,GAAKvM,EAAE,GAAKyR,EACvB9G,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GAAKyR,EACvB9G,EAAI,GAAK4B,EAAE,GAAKvM,EAAE,GAAKyR,EAChB9G,CACX,EA6iBI0J,MAtiBJ,SAAiB9H,EAAGvM,GAChB,MAAMsU,EAAK/H,EAAE,GACPgI,EAAKhI,EAAE,GACPiI,EAAKjI,EAAE,GACPkI,EAAKlI,EAAE,GACPmI,EAAKnI,EAAE,GACPoI,EAAKpI,EAAE,GAGPqI,EAFO1T,KAAKsF,KAAK8N,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACnCtT,KAAKsF,KAAKiO,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAE1CE,EAASD,GAAOnC,EAAMlG,EAAGvM,GAAK4U,EACpC,OAAO1T,KAAK4T,KAAKD,EACrB,EA2hBIE,SAAUhD,EACViD,IAAKhD,EACLrC,oBAhgBJ,SAA+BpD,EAAGvM,GAC9B,OAAOkB,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GAC3BtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,CAChC,EA6fIqF,OAtfJ,SAAkBtD,EAAGvM,GACjB,OAAOuM,EAAE,KAAOvM,EAAE,IAAMuM,EAAE,KAAOvM,EAAE,IAAMuM,EAAE,KAAOvM,EAAE,EACxD,EAqfIiV,KA1eJ,SAAgB1I,EAAGvM,EAAGgQ,EAAGrF,GAKrB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKrF,EAAE,GAAKyD,GAAKhQ,EAAE,GAAKuM,EAAE,IAC9B5B,EAAI,GAAK4B,EAAE,GAAKyD,GAAKhQ,EAAE,GAAKuM,EAAE,IAC9B5B,EAAI,GAAK4B,EAAE,GAAKyD,GAAKhQ,EAAE,GAAKuM,EAAE,IACvB5B,CACX,EAqeIuK,MA1dJ,SAAiB3I,EAAGvM,EAAGgQ,EAAGrF,GAKtB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKrF,EAAE,GAAKyD,EAAE,IAAMhQ,EAAE,GAAKuM,EAAE,IACjC5B,EAAI,GAAK4B,EAAE,GAAKyD,EAAE,IAAMhQ,EAAE,GAAKuM,EAAE,IACjC5B,EAAI,GAAK4B,EAAE,GAAKyD,EAAE,IAAMhQ,EAAE,GAAKuM,EAAE,IAC1B5B,CACX,EAqdI7G,IA3cJ,SAAeyI,EAAGvM,EAAG2K,GAKjB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAK1Q,KAAK4C,IAAIyI,EAAE,GAAIvM,EAAE,IAC1B2K,EAAI,GAAKzJ,KAAK4C,IAAIyI,EAAE,GAAIvM,EAAE,IAC1B2K,EAAI,GAAKzJ,KAAK4C,IAAIyI,EAAE,GAAIvM,EAAE,IACnB2K,CACX,EAscIuJ,IA5bJ,SAAe3H,EAAGvM,EAAG2K,GAKjB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAK1Q,KAAKgT,IAAI3H,EAAE,GAAIvM,EAAE,IAC1B2K,EAAI,GAAKzJ,KAAKgT,IAAI3H,EAAE,GAAIvM,EAAE,IAC1B2K,EAAI,GAAKzJ,KAAKgT,IAAI3H,EAAE,GAAIvM,EAAE,IACnB2K,CACX,EAubIwK,UAAWlD,EACXR,MAAOU,EACPiD,UA3ZJ,SAAqB7E,EAAG2B,EAAGvH,GAKvB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKrB,EAAE,GAAK2B,EAChBvH,EAAI,GAAK4F,EAAE,GAAK2B,EAChBvH,EAAI,GAAK4F,EAAE,GAAK2B,EACTvH,CACX,EAsZIsF,QAASmC,EACTjC,OAAQkC,EACRC,MAAOA,EACP+C,IAAK5C,EACLtP,OAAQuP,EACRY,IAAKX,EACL2C,SAAU1C,EACV2C,MAAO1C,EACP2C,SAAU1C,EACV2C,KAAMvC,EACNwC,WAAYvC,EACZwC,OAAQvC,EACRwC,UAAWvC,EACX7D,OA7QJ,SAAkBe,EAAG5F,GAKjB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,IAAMrB,EAAE,GACZ5F,EAAI,IAAM4F,EAAE,GACZ5F,EAAI,IAAM4F,EAAE,GACL5F,CACX,EAwQI8E,KAAM8D,EACN7D,MAAO8D,EACPpD,SAAUqD,EACVpD,IAAKqD,GACLmC,OAAQlC,GACRmC,IAAKlC,GACLmC,OAjMJ,SAAgBtE,EAAQ,EAAG9G,GACvBA,EAAMA,GAAO,IAAIiH,EAAU,GAC3B,MAAMyC,EAAwB,EAAhBnT,KAAK6U,SAAe7U,KAAK8U,GACjCnO,EAAoB,EAAhB3G,KAAK6U,SAAe,EACxBE,EAAS/U,KAAKsF,KAAK,EAAIqB,EAAIA,GAAK4J,EAItC,OAHA9G,EAAI,GAAKzJ,KAAKkQ,IAAIiD,GAAS4B,EAC3BtL,EAAI,GAAKzJ,KAAKoQ,IAAI+C,GAAS4B,EAC3BtL,EAAI,GAAK9C,EAAI4J,EACN9G,CACX,EAyLIuL,KAnLJ,SAAgBvL,GAKZ,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAK,EACTjH,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,CACX,EA8KIwL,cAtKJ,SAAyB5F,EAAGnF,EAAGT,GAC3BA,EAAMA,GAAO,IAAIiH,EAAU,GAC3B,MAAMjK,EAAI4I,EAAE,GACN3I,EAAI2I,EAAE,GACN1I,EAAI0I,EAAE,GACN5B,EAAKvD,EAAE,GAAKzD,EAAIyD,EAAE,GAAKxD,EAAIwD,EAAE,IAAMvD,EAAIuD,EAAE,KAAQ,EAIvD,OAHAT,EAAI,IAAMS,EAAE,GAAKzD,EAAIyD,EAAE,GAAKxD,EAAIwD,EAAE,GAAKvD,EAAIuD,EAAE,KAAOuD,EACpDhE,EAAI,IAAMS,EAAE,GAAKzD,EAAIyD,EAAE,GAAKxD,EAAIwD,EAAE,GAAKvD,EAAIuD,EAAE,KAAOuD,EACpDhE,EAAI,IAAMS,EAAE,GAAKzD,EAAIyD,EAAE,GAAKxD,EAAIwD,EAAE,IAAMvD,EAAIuD,EAAE,KAAOuD,EAC9ChE,CACX,EA6JIyL,sBArJJ,SAA+B7F,EAAGnF,EAAGT,GACjCA,EAAMA,GAAO,IAAIiH,EAAU,GAC3B,MAAM/D,EAAK0C,EAAE,GACPzC,EAAKyC,EAAE,GACPxC,EAAKwC,EAAE,GAIb,OAHA5F,EAAI,GAAKkD,EAAKzC,EAAE,GAAa0C,EAAK1C,EAAE,GAAa2C,EAAK3C,EAAE,GACxDT,EAAI,GAAKkD,EAAKzC,EAAE,GAAa0C,EAAK1C,EAAE,GAAa2C,EAAK3C,EAAE,GACxDT,EAAI,GAAKkD,EAAKzC,EAAE,GAAa0C,EAAK1C,EAAE,GAAa2C,EAAK3C,EAAE,IACjDT,CACX,EA6II0L,cApIJ,SAAuB9F,EAAGnF,EAAGT,GACzBA,EAAMA,GAAO,IAAIiH,EAAU,GAC3B,MAAMjK,EAAI4I,EAAE,GACN3I,EAAI2I,EAAE,GACN1I,EAAI0I,EAAE,GAIZ,OAHA5F,EAAI,GAAKhD,EAAIyD,EAAE,GAAKxD,EAAIwD,EAAE,GAAKvD,EAAIuD,EAAE,GACrCT,EAAI,GAAKhD,EAAIyD,EAAE,GAAKxD,EAAIwD,EAAE,GAAKvD,EAAIuD,EAAE,GACrCT,EAAI,GAAKhD,EAAIyD,EAAE,GAAKxD,EAAIwD,EAAE,GAAKvD,EAAIuD,EAAE,IAC9BT,CACX,EA4HI2L,cApHJ,SAAuB/F,EAAG7B,EAAG/D,GACzBA,EAAMA,GAAO,IAAIiH,EAAU,GAC3B,MAAM2E,EAAK7H,EAAE,GACP8H,EAAK9H,EAAE,GACP+H,EAAK/H,EAAE,GACPgI,EAAY,EAAPhI,EAAE,GACP/G,EAAI4I,EAAE,GACN3I,EAAI2I,EAAE,GACN1I,EAAI0I,EAAE,GACNoG,EAAMH,EAAK3O,EAAI4O,EAAK7O,EACpBgP,EAAMH,EAAK9O,EAAI4O,EAAK1O,EACpBgP,EAAMN,EAAK3O,EAAI4O,EAAK7O,EAI1B,OAHAgD,EAAI,GAAKhD,EAAIgP,EAAMD,EAA6B,GAAvBF,EAAKK,EAAMJ,EAAKG,GACzCjM,EAAI,GAAK/C,EAAIgP,EAAMF,EAA6B,GAAvBD,EAAKE,EAAMJ,EAAKM,GACzClM,EAAI,GAAK9C,EAAIgP,EAAMH,EAA6B,GAAvBH,EAAKK,EAAMJ,EAAKG,GAClChM,CACX,EAqGI6F,eA7FJ,SAA0BpF,EAAGT,GAKzB,OAJAA,EAAMA,GAAO,IAAIiH,EAAU,IACvB,GAAKxG,EAAE,IACXT,EAAI,GAAKS,EAAE,IACXT,EAAI,GAAKS,EAAE,IACJT,CACX,EAwFI8F,QAjFJ,SAAmBrF,EAAGsF,EAAM/F,GAExB,MAAMgG,EAAa,EAAPD,EAIZ,OALA/F,EAAMA,GAAO,IAAIiH,EAAU,IAEvB,GAAKxG,EAAEuF,EAAM,GACjBhG,EAAI,GAAKS,EAAEuF,EAAM,GACjBhG,EAAI,GAAKS,EAAEuF,EAAM,GACVhG,CACX,EA2EIkG,WArEJ,SAAsBzF,EAAGT,GACrBA,EAAMA,GAAO,IAAIiH,EAAU,GAC3B,MAAM7C,EAAK3D,EAAE,GACP0F,EAAK1F,EAAE,GACP0L,EAAK1L,EAAE,GACP4D,EAAK5D,EAAE,GACP6D,EAAK7D,EAAE,GACP2L,EAAK3L,EAAE,GACP8D,EAAK9D,EAAE,GACP+D,EAAK/D,EAAE,GACPgE,EAAKhE,EAAE,IAIb,OAHAT,EAAI,GAAKzJ,KAAKsF,KAAKuI,EAAKA,EAAK+B,EAAKA,EAAKgG,EAAKA,GAC5CnM,EAAI,GAAKzJ,KAAKsF,KAAKwI,EAAKA,EAAKC,EAAKA,EAAK8H,EAAKA,GAC5CpM,EAAI,GAAKzJ,KAAKsF,KAAK0I,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACrCzE,CACX,IAgFA,IAAIqM,GAAU9N,aAwPd,SAAS+N,GAAO7L,EAAGT,GAkBf,OAjBAA,EAAMA,GAAO,IAAIqM,GAAQ,KACrB,GAAK5L,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACLT,CACX,CAQA,MAAMuM,GAAUD,GAuDhB,SAASE,GAAWxM,GAkBhB,OAjBAA,EAAMA,GAAO,IAAIqM,GAAQ,KACrB,GAAK,EACTrM,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,CACX,CAuEA,SAASyM,GAAUhM,EAAGT,GAClBA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAMxL,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRiM,EAAMjM,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRkM,EAAMlM,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACRmM,EAAMnM,EAAE,IACRoM,EAAMpM,EAAE,IACRqM,EAAMrM,EAAE,IACRsM,EAAMtM,EAAE,IACRuM,EAAMvM,EAAE,IACRwM,EAAO5L,EAAM2L,EACbE,EAAOH,EAAMH,EACbO,EAAOjM,EAAM8L,EACbI,EAAOL,EAAMJ,EACbU,EAAOnM,EAAM0L,EACbU,EAAOjM,EAAMsL,EACbY,EAAOxM,EAAMiM,EACbQ,EAAOT,EAAML,EACbe,EAAO1M,EAAM6L,EACbc,EAAOrM,EAAMqL,EACbiB,EAAQ5M,EAAM4L,EACdiB,EAAQ1M,EAAMwL,EACdmB,EAAQ1M,EAAM2L,EACdgB,EAAQjB,EAAMzL,EACd2M,EAAQ/M,EAAM8L,EACdkB,EAAQnB,EAAM5L,EACdgN,EAAQjN,EAAMI,EACd8M,EAAQ/M,EAAMF,EACdkN,EAAQtN,EAAMiM,EACdsB,EAAQvB,EAAM/L,EACduN,EAAQxN,EAAMO,EACdkN,EAAQnN,EAAML,EACdyN,EAAQ1N,EAAMI,EACduN,EAAQxN,EAAMF,EACd2N,EAAMxB,EAAOhM,EAAMmM,EAAOhM,EAAMiM,EAAOP,GACxCI,EAAOjM,EAAMkM,EAAO/L,EAAMkM,EAAOR,GAChClF,EAAMsF,EAAOpM,EAAMyM,EAAOnM,EAAMsM,EAAOZ,GACxCG,EAAOnM,EAAM0M,EAAOpM,EAAMqM,EAAOX,GAChCjF,EAAMsF,EAAOrM,EAAM0M,EAAOvM,EAAM0M,EAAQb,GACzCM,EAAOtM,EAAMyM,EAAOtM,EAAM2M,EAAQd,GACjC4B,EAAMpB,EAAOxM,EAAM2M,EAAOxM,EAAM2M,EAAQxM,GACzCiM,EAAOvM,EAAM4M,EAAOzM,EAAM0M,EAAQvM,GACjChM,EAAI,GAAKyL,EAAM4N,EAAKzN,EAAM4G,EAAKzG,EAAM0G,EAAKgF,EAAM6B,GA6BtD,OA5BA1O,EAAI,GAAK5K,EAAIqZ,EACbzO,EAAI,GAAK5K,EAAIwS,EACb5H,EAAI,GAAK5K,EAAIyS,EACb7H,EAAI,GAAK5K,EAAIsZ,EACb1O,EAAI,GAAK5K,GAAM8X,EAAOlM,EAAMmM,EAAOhM,EAAMmM,EAAOT,GAC3CI,EAAOjM,EAAMoM,EAAOjM,EAAMkM,EAAOR,IACtC7M,EAAI,GAAK5K,GAAM6X,EAAOpM,EAAM2M,EAAOrM,EAAMsM,EAAOZ,GAC3CK,EAAOrM,EAAM0M,EAAOpM,EAAMuM,EAAOb,IACtC7M,EAAI,GAAK5K,GAAMgY,EAAOvM,EAAM0M,EAAOvM,EAAM4M,EAAQf,GAC5CM,EAAOtM,EAAM2M,EAAOxM,EAAM2M,EAAQd,IACvC7M,EAAI,GAAK5K,GAAMiY,EAAOxM,EAAM6M,EAAO1M,EAAM2M,EAAQxM,GAC5CmM,EAAOzM,EAAM4M,EAAOzM,EAAM4M,EAAQzM,IACvCnB,EAAI,GAAK5K,GAAMyY,EAAQlB,EAAMqB,EAAQpB,EAAMqB,EAAQjB,GAC9Cc,EAAQnB,EAAMoB,EAAQnB,EAAMsB,EAAQlB,IACzChN,EAAI,GAAK5K,GAAM0Y,EAAQpB,EAAMyB,EAAQvB,EAAM0B,EAAQtB,GAC9Ca,EAAQnB,EAAM0B,EAAQxB,EAAMyB,EAAQrB,IACzChN,EAAI,IAAM5K,GAAM2Y,EAAQrB,EAAM0B,EAAQzB,EAAM4B,EAAQvB,GAC/CgB,EAAQtB,EAAMyB,EAAQxB,EAAM6B,EAAQxB,IACzChN,EAAI,IAAM5K,GAAM8Y,EAAQxB,EAAM2B,EAAQ1B,EAAM6B,EAAQ5B,GAC/CqB,EAAQvB,EAAM4B,EAAQ3B,EAAM4B,EAAQ3B,IACzC5M,EAAI,IAAM5K,GAAM2Y,EAAQ1M,EAAM6M,EAAQnB,EAAMe,EAAQ5M,GAC/C+M,EAAQlB,EAAMc,EAAQ3M,EAAM8M,EAAQ3M,IACzCrB,EAAI,IAAM5K,GAAMiZ,EAAQtB,EAAMc,EAAQ9M,EAAMqN,EAAQ/M,GAC/C8M,EAAQ9M,EAAMiN,EAAQvB,EAAMe,EAAQ/M,IACzCf,EAAI,IAAM5K,GAAM+Y,EAAQjN,EAAMsN,EAAQzB,EAAMiB,EAAQjN,GAC/CwN,EAAQxB,EAAMgB,EAAQhN,EAAMqN,EAAQlN,IACzClB,EAAI,IAAM5K,GAAMmZ,EAAQlN,EAAM4M,EAAQlN,EAAMuN,EAAQpN,GAC/CmN,EAAQnN,EAAMsN,EAAQnN,EAAM6M,EAAQnN,IAClCf,CACX,CAmDA,MAAM2O,GAAWlC,GAQjB,SAASmC,GAAWhN,EAAGvM,EAAG2K,GACtBA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAMxK,EAAMD,EAAE,GACRE,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRiN,EAAMjN,EAAE,GACRI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRkN,EAAMlN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,IACRmN,EAAMnN,EAAE,IACRoN,EAAMpN,EAAE,IACRqN,EAAMrN,EAAE,IACRsN,EAAMtN,EAAE,IACRuN,EAAMvN,EAAE,IACRU,EAAMjN,EAAE,GACRiM,EAAMjM,EAAE,GACRkN,EAAMlN,EAAE,GACR+Z,EAAM/Z,EAAE,GACRmN,EAAMnN,EAAE,GACRkM,EAAMlM,EAAE,GACRoN,EAAMpN,EAAE,GACRga,EAAMha,EAAE,GACRqN,EAAMrN,EAAE,GACRmM,EAAMnM,EAAE,GACRsN,EAAMtN,EAAE,IACRia,EAAMja,EAAE,IACRka,EAAMla,EAAE,IACRma,EAAMna,EAAE,IACRoa,EAAMpa,EAAE,IACRqa,EAAMra,EAAE,IAiBd,OAhBA2K,EAAI,GAAK6B,EAAMS,EAAMN,EAAMV,EAAMa,EAAMI,EAAMyM,EAAMI,EACnDpP,EAAI,GAAK8B,EAAMQ,EAAML,EAAMX,EAAMc,EAAMG,EAAM0M,EAAMG,EACnDpP,EAAI,GAAK+B,EAAMO,EAAMJ,EAAMZ,EAAMe,EAAME,EAAM2M,EAAME,EACnDpP,EAAI,GAAK6O,EAAMvM,EAAMwM,EAAMxN,EAAMyN,EAAMxM,EAAM4M,EAAMC,EACnDpP,EAAI,GAAK6B,EAAMW,EAAMR,EAAMT,EAAMY,EAAMM,EAAMuM,EAAMK,EACnDrP,EAAI,GAAK8B,EAAMU,EAAMP,EAAMV,EAAMa,EAAMK,EAAMwM,EAAMI,EACnDrP,EAAI,GAAK+B,EAAMS,EAAMN,EAAMX,EAAMc,EAAMI,EAAMyM,EAAMG,EACnDrP,EAAI,GAAK6O,EAAMrM,EAAMsM,EAAMvN,EAAMwN,EAAMtM,EAAM0M,EAAME,EACnDrP,EAAI,GAAK6B,EAAMa,EAAMV,EAAMR,EAAMW,EAAMQ,EAAMqM,EAAMM,EACnDtP,EAAI,GAAK8B,EAAMY,EAAMT,EAAMT,EAAMY,EAAMO,EAAMsM,EAAMK,EACnDtP,EAAI,IAAM+B,EAAMW,EAAMR,EAAMV,EAAMa,EAAMM,EAAMuM,EAAMI,EACpDtP,EAAI,IAAM6O,EAAMnM,EAAMoM,EAAMtN,EAAMuN,EAAMpM,EAAMwM,EAAMG,EACpDtP,EAAI,IAAM6B,EAAM0N,EAAMvN,EAAMwN,EAAMrN,EAAMsN,EAAMT,EAAMU,EACpD1P,EAAI,IAAM8B,EAAMyN,EAAMtN,EAAMuN,EAAMpN,EAAMqN,EAAMR,EAAMS,EACpD1P,EAAI,IAAM+B,EAAMwN,EAAMrN,EAAMsN,EAAMnN,EAAMoN,EAAMP,EAAMQ,EACpD1P,EAAI,IAAM6O,EAAMU,EAAMT,EAAMU,EAAMT,EAAMU,EAAMN,EAAMO,EAC7C1P,CACX,CAQA,MAAM2P,GAAQf,GAmOd,IAAIgB,GACAC,GACAC,GAyZJ,SAASC,GAAahK,EAAMQ,EAAgBvG,GACxCA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,IAAIrP,EAAI+I,EAAK,GACT9I,EAAI8I,EAAK,GACT7I,EAAI6I,EAAK,GACb,MAAM1P,EAAIE,KAAKsF,KAAKmB,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,GACxCF,GAAK3G,EACL4G,GAAK5G,EACL6G,GAAK7G,EACL,MAAM+N,EAAKpH,EAAIA,EACTsH,EAAKrH,EAAIA,EACTwH,EAAKvH,EAAIA,EACTsJ,EAAIjQ,KAAKkQ,IAAIF,GACbG,EAAInQ,KAAKoQ,IAAIJ,GACbyJ,EAAiB,EAAIxJ,EAiB3B,OAhBAxG,EAAI,GAAKoE,GAAM,EAAIA,GAAMoC,EACzBxG,EAAI,GAAKhD,EAAIC,EAAI+S,EAAiB9S,EAAIwJ,EACtC1G,EAAI,GAAKhD,EAAIE,EAAI8S,EAAiB/S,EAAIyJ,EACtC1G,EAAI,GAAK,EACTA,EAAI,GAAKhD,EAAIC,EAAI+S,EAAiB9S,EAAIwJ,EACtC1G,EAAI,GAAKsE,GAAM,EAAIA,GAAMkC,EACzBxG,EAAI,GAAK/C,EAAIC,EAAI8S,EAAiBhT,EAAI0J,EACtC1G,EAAI,GAAK,EACTA,EAAI,GAAKhD,EAAIE,EAAI8S,EAAiB/S,EAAIyJ,EACtC1G,EAAI,GAAK/C,EAAIC,EAAI8S,EAAiBhT,EAAI0J,EACtC1G,EAAI,IAAMyE,GAAM,EAAIA,GAAM+B,EAC1BxG,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,CACX,CAWA,MAAMsG,GAAWyJ,GAWjB,SAASE,GAAWxP,EAAGsF,EAAMQ,EAAgBvG,GACzCA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,IAAIrP,EAAI+I,EAAK,GACT9I,EAAI8I,EAAK,GACT7I,EAAI6I,EAAK,GACb,MAAM1P,EAAIE,KAAKsF,KAAKmB,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,GACxCF,GAAK3G,EACL4G,GAAK5G,EACL6G,GAAK7G,EACL,MAAM+N,EAAKpH,EAAIA,EACTsH,EAAKrH,EAAIA,EACTwH,EAAKvH,EAAIA,EACTsJ,EAAIjQ,KAAKkQ,IAAIF,GACbG,EAAInQ,KAAKoQ,IAAIJ,GACbyJ,EAAiB,EAAIxJ,EACrB0J,EAAM9L,GAAM,EAAIA,GAAMoC,EACtB2J,EAAMnT,EAAIC,EAAI+S,EAAiB9S,EAAIwJ,EACnC0J,EAAMpT,EAAIE,EAAI8S,EAAiB/S,EAAIyJ,EACnC2J,EAAMrT,EAAIC,EAAI+S,EAAiB9S,EAAIwJ,EACnC4J,EAAMhM,GAAM,EAAIA,GAAMkC,EACtB+J,EAAMtT,EAAIC,EAAI8S,EAAiBhT,EAAI0J,EACnC8J,EAAMxT,EAAIE,EAAI8S,EAAiB/S,EAAIyJ,EACnC+J,EAAMxT,EAAIC,EAAI8S,EAAiBhT,EAAI0J,EACnCgK,EAAMjM,GAAM,EAAIA,GAAM+B,EACtB3F,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRiM,EAAMjM,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRkM,EAAMlM,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACRmM,EAAMnM,EAAE,IAmBd,OAlBAT,EAAI,GAAKkQ,EAAMrP,EAAMsP,EAAMnP,EAAMoP,EAAMjP,EACvCnB,EAAI,GAAKkQ,EAAMpP,EAAMqP,EAAMlP,EAAMmP,EAAMhP,EACvCpB,EAAI,GAAKkQ,EAAMnP,EAAMoP,EAAMjP,EAAMkP,EAAM/O,EACvCrB,EAAI,GAAKkQ,EAAMxD,EAAMyD,EAAMxD,EAAMyD,EAAMxD,EACvC5M,EAAI,GAAKqQ,EAAMxP,EAAMyP,EAAMtP,EAAMuP,EAAMpP,EACvCnB,EAAI,GAAKqQ,EAAMvP,EAAMwP,EAAMrP,EAAMsP,EAAMnP,EACvCpB,EAAI,GAAKqQ,EAAMtP,EAAMuP,EAAMpP,EAAMqP,EAAMlP,EACvCrB,EAAI,GAAKqQ,EAAM3D,EAAM4D,EAAM3D,EAAM4D,EAAM3D,EACvC5M,EAAI,GAAKwQ,EAAM3P,EAAM4P,EAAMzP,EAAM0P,EAAMvP,EACvCnB,EAAI,GAAKwQ,EAAM1P,EAAM2P,EAAMxP,EAAMyP,EAAMtP,EACvCpB,EAAI,IAAMwQ,EAAMzP,EAAM0P,EAAMvP,EAAMwP,EAAMrP,EACxCrB,EAAI,IAAMwQ,EAAM9D,EAAM+D,EAAM9D,EAAM+D,EAAM9D,EACpCnM,IAAMT,IACNA,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,KAETT,CACX,CAWA,MAAM4G,GAASqJ,GAyHf,IAAIU,GAAwBrb,OAAOwN,OAAO,CACtCtN,UAAW,KACXuN,eAr9CJ,SAA0BC,GACtB,MAAMC,EAAUoJ,GAEhB,OADAA,GAAUrJ,EACHC,CACX,EAk9CI9M,OAx6CJ,SAAkB+M,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIkN,EAAIC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAC/E,MAAMlR,EAAM,IAAIqM,GAAQ,IAiDxB,YAhDWpM,IAAPiD,IACAlD,EAAI,GAAKkD,OACEjD,IAAPkD,IACAnD,EAAI,GAAKmD,OACElD,IAAPmD,IACApD,EAAI,GAAKoD,OACEnD,IAAPoD,IACArD,EAAI,GAAKqD,OACEpD,IAAPqD,IACAtD,EAAI,GAAKsD,OACErD,IAAPsD,IACAvD,EAAI,GAAKuD,OACEtD,IAAPuD,IACAxD,EAAI,GAAKwD,OACEvD,IAAPwD,IACAzD,EAAI,GAAKyD,OACExD,IAAPyD,IACA1D,EAAI,GAAK0D,OACEzD,IAAP2Q,IACA5Q,EAAI,GAAK4Q,OACG3Q,IAAR4Q,IACA7Q,EAAI,IAAM6Q,OACE5Q,IAAR6Q,IACA9Q,EAAI,IAAM8Q,OACE7Q,IAAR8Q,IACA/Q,EAAI,IAAM+Q,OACE9Q,IAAR+Q,IACAhR,EAAI,IAAMgR,OACE/Q,IAARgR,IACAjR,EAAI,IAAMiR,OACEhR,IAARiR,IACAlR,EAAI,IAAMkR,kBAiBnElR,CACX,EAs3CI2D,IA91CJ,SAAeT,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIkN,EAAIC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKlR,GAkBjF,OAjBAA,EAAMA,GAAO,IAAIqM,GAAQ,KACrB,GAAKnJ,EACTlD,EAAI,GAAKmD,EACTnD,EAAI,GAAKoD,EACTpD,EAAI,GAAKqD,EACTrD,EAAI,GAAKsD,EACTtD,EAAI,GAAKuD,EACTvD,EAAI,GAAKwD,EACTxD,EAAI,GAAKyD,EACTzD,EAAI,GAAK0D,EACT1D,EAAI,GAAK4Q,EACT5Q,EAAI,IAAM6Q,EACV7Q,EAAI,IAAM8Q,EACV9Q,EAAI,IAAM+Q,EACV/Q,EAAI,IAAMgR,EACVhR,EAAI,IAAMiR,EACVjR,EAAI,IAAMkR,EACHlR,CACX,EA40CImR,SAr0CJ,SAAkBC,EAAIpR,GAkBlB,OAjBAA,EAAMA,GAAO,IAAIqM,GAAQ,KACrB,GAAK+E,EAAG,GACZpR,EAAI,GAAKoR,EAAG,GACZpR,EAAI,GAAKoR,EAAG,GACZpR,EAAI,GAAK,EACTA,EAAI,GAAKoR,EAAG,GACZpR,EAAI,GAAKoR,EAAG,GACZpR,EAAI,GAAKoR,EAAG,GACZpR,EAAI,GAAK,EACTA,EAAI,GAAKoR,EAAG,GACZpR,EAAI,GAAKoR,EAAG,GACZpR,EAAI,IAAMoR,EAAG,IACbpR,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,CACX,EAmzCI8D,SA5yCJ,SAAkBC,EAAG/D,GACjBA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAMrP,EAAI+G,EAAE,GACN9G,EAAI8G,EAAE,GACN7G,EAAI6G,EAAE,GACNC,EAAID,EAAE,GACNE,EAAKjH,EAAIA,EACTkH,EAAKjH,EAAIA,EACTkH,EAAKjH,EAAIA,EACTkH,EAAKpH,EAAIiH,EACTI,EAAKpH,EAAIgH,EACTK,EAAKrH,EAAIiH,EACTK,EAAKrH,EAAI+G,EACTO,EAAKtH,EAAIgH,EACTO,EAAKvH,EAAIiH,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAiBf,OAhBAnE,EAAI,GAAK,EAAIsE,EAAKG,EAClBzE,EAAI,GAAKqE,EAAKO,EACd5E,EAAI,GAAKuE,EAAKI,EACd3E,EAAI,GAAK,EACTA,EAAI,GAAKqE,EAAKO,EACd5E,EAAI,GAAK,EAAIoE,EAAKK,EAClBzE,EAAI,GAAKwE,EAAKE,EACd1E,EAAI,GAAK,EACTA,EAAI,GAAKuE,EAAKI,EACd3E,EAAI,GAAKwE,EAAKE,EACd1E,EAAI,IAAM,EAAIoE,EAAKE,EACnBtE,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,CACX,EA0wCI6E,OAnwCJ,SAAkBpE,EAAGT,GAkBjB,OAjBAA,EAAMA,GAAO,IAAIqM,GAAQ,KACrB,IAAM5L,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,IAAMS,EAAE,GACZT,EAAI,KAAOS,EAAE,IACbT,EAAI,KAAOS,EAAE,IACbT,EAAI,KAAOS,EAAE,IACbT,EAAI,KAAOS,EAAE,IACbT,EAAI,KAAOS,EAAE,IACbT,EAAI,KAAOS,EAAE,IACNT,CACX,EAivCI8E,KAAMwH,GACNvH,MAAOwH,GACPvH,oBAzsCJ,SAA+BpD,EAAGvM,GAC9B,OAAOkB,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GAC3BtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,GAAKvM,EAAE,IAAMwK,GACxBtJ,KAAK0O,IAAIrD,EAAE,IAAMvM,EAAE,KAAOwK,GAC1BtJ,KAAK0O,IAAIrD,EAAE,IAAMvM,EAAE,KAAOwK,GAC1BtJ,KAAK0O,IAAIrD,EAAE,IAAMvM,EAAE,KAAOwK,GAC1BtJ,KAAK0O,IAAIrD,EAAE,IAAMvM,EAAE,KAAOwK,GAC1BtJ,KAAK0O,IAAIrD,EAAE,IAAMvM,EAAE,KAAOwK,GAC1BtJ,KAAK0O,IAAIrD,EAAE,IAAMvM,EAAE,KAAOwK,CAClC,EAyrCIqF,OAlrCJ,SAAkBtD,EAAGvM,GACjB,OAAOuM,EAAE,KAAOvM,EAAE,IACduM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,KAAOvM,EAAE,IACXuM,EAAE,MAAQvM,EAAE,KACZuM,EAAE,MAAQvM,EAAE,KACZuM,EAAE,MAAQvM,EAAE,KACZuM,EAAE,MAAQvM,EAAE,KACZuM,EAAE,MAAQvM,EAAE,KACZuM,EAAE,MAAQvM,EAAE,GACpB,EAkqCI8P,SAAUqH,GACVpH,UAloCJ,SAAmB3E,EAAGT,GAElB,IADAA,EAAMA,GAAO,IAAIqM,GAAQ,OACb5L,EAAG,CACX,IAAI4E,EAmBJ,OAlBAA,EAAI5E,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAK4E,EACPA,EAAI5E,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAK4E,EACPA,EAAI5E,EAAE,GACNA,EAAE,GAAKA,EAAE,IACTA,EAAE,IAAM4E,EACRA,EAAI5E,EAAE,GACNA,EAAE,GAAKA,EAAE,GACTA,EAAE,GAAK4E,EACPA,EAAI5E,EAAE,GACNA,EAAE,GAAKA,EAAE,IACTA,EAAE,IAAM4E,EACRA,EAAI5E,EAAE,IACNA,EAAE,IAAMA,EAAE,IACVA,EAAE,IAAM4E,EACDrF,CACX,CACA,MAAMa,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRiM,EAAMjM,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRkM,EAAMlM,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACRmM,EAAMnM,EAAE,IACRoM,EAAMpM,EAAE,IACRqM,EAAMrM,EAAE,IACRsM,EAAMtM,EAAE,IACRuM,EAAMvM,EAAE,IAiBd,OAhBAT,EAAI,GAAKa,EACTb,EAAI,GAAKgB,EACThB,EAAI,GAAKmB,EACTnB,EAAI,GAAK6M,EACT7M,EAAI,GAAKc,EACTd,EAAI,GAAKiB,EACTjB,EAAI,GAAKoB,EACTpB,EAAI,GAAK8M,EACT9M,EAAI,GAAKe,EACTf,EAAI,GAAKkB,EACTlB,EAAI,IAAMqB,EACVrB,EAAI,IAAM+M,EACV/M,EAAI,IAAM0M,EACV1M,EAAI,IAAM2M,EACV3M,EAAI,IAAM4M,EACV5M,EAAI,IAAMgN,EACHhN,CACX,EA0kCIsF,QAASmH,GACTlH,YA9+BJ,SAAqB9E,GACjB,MAAMI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRiM,EAAMjM,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRkM,EAAMlM,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACRmM,EAAMnM,EAAE,IACRoM,EAAMpM,EAAE,IACRqM,EAAMrM,EAAE,IACRsM,EAAMtM,EAAE,IACRuM,EAAMvM,EAAE,IACRwM,EAAO5L,EAAM2L,EACbE,EAAOH,EAAMH,EACbO,EAAOjM,EAAM8L,EACbI,EAAOL,EAAMJ,EACbU,EAAOnM,EAAM0L,EACbU,EAAOjM,EAAMsL,EACbY,EAAOxM,EAAMiM,EACbQ,EAAOT,EAAML,EACbe,EAAO1M,EAAM6L,EACbc,EAAOrM,EAAMqL,EACbiB,EAAQ5M,EAAM4L,EACdiB,EAAQ1M,EAAMwL,EASpB,OAAO7L,GARKoM,EAAOhM,EAAMmM,EAAOhM,EAAMiM,EAAOP,GACxCI,EAAOjM,EAAMkM,EAAO/L,EAAMkM,EAAOR,IAOpB9L,GANNkM,EAAOpM,EAAMyM,EAAOnM,EAAMsM,EAAOZ,GACxCG,EAAOnM,EAAM0M,EAAOpM,EAAMqM,EAAOX,IAKT3L,GAJjBgM,EAAOrM,EAAM0M,EAAOvM,EAAM0M,EAAQb,GACzCM,EAAOtM,EAAMyM,EAAOtM,EAAM2M,EAAQd,IAGCD,GAF5BS,EAAOxM,EAAM2M,EAAOxM,EAAM2M,EAAQxM,GACzCiM,EAAOvM,EAAM4M,EAAOzM,EAAM0M,EAAQvM,GAE3C,EAy8BIoE,OAAQmJ,GACRlJ,SAAUmJ,GACVlJ,IAAKiK,GACLhK,eAz3BJ,SAAwB/D,EAAGgE,EAAG5F,GAoB1B,OAlBI4B,KADJ5B,EAAMA,GAAOwM,QAETxM,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,GAAK4B,EAAE,GACX5B,EAAI,IAAM4B,EAAE,IACZ5B,EAAI,IAAM4B,EAAE,KAEhB5B,EAAI,IAAM4F,EAAE,GACZ5F,EAAI,IAAM4F,EAAE,GACZ5F,EAAI,IAAM4F,EAAE,GACZ5F,EAAI,IAAM,EACHA,CACX,EAq2BI6F,eA71BJ,SAAwBpF,EAAGT,GAKvB,OAJAA,EAAMA,GAAOkH,KACT,GAAKzG,EAAE,IACXT,EAAI,GAAKS,EAAE,IACXT,EAAI,GAAKS,EAAE,IACJT,CACX,EAw1BI8F,QAj1BJ,SAAiBrF,EAAGsF,EAAM/F,GAEtB,MAAMgG,EAAa,EAAPD,EAIZ,OALA/F,EAAMA,GAAOkH,KAET,GAAKzG,EAAEuF,EAAM,GACjBhG,EAAI,GAAKS,EAAEuF,EAAM,GACjBhG,EAAI,GAAKS,EAAEuF,EAAM,GACVhG,CACX,EA20BIiG,QAl0BJ,SAAiBrE,EAAGgE,EAAGG,EAAM/F,GACrBA,IAAQ4B,IACR5B,EAAMsM,GAAO1K,EAAG5B,IAEpB,MAAMgG,EAAa,EAAPD,EAIZ,OAHA/F,EAAIgG,EAAM,GAAKJ,EAAE,GACjB5F,EAAIgG,EAAM,GAAKJ,EAAE,GACjB5F,EAAIgG,EAAM,GAAKJ,EAAE,GACV5F,CACX,EA0zBIkG,WApzBJ,SAAoBzF,EAAGT,GACnBA,EAAMA,GAAOkH,IACb,MAAM9C,EAAK3D,EAAE,GACP0F,EAAK1F,EAAE,GACP0L,EAAK1L,EAAE,GACP4D,EAAK5D,EAAE,GACP6D,EAAK7D,EAAE,GACP2L,EAAK3L,EAAE,GACP8D,EAAK9D,EAAE,GACP+D,EAAK/D,EAAE,GACPgE,EAAKhE,EAAE,IAIb,OAHAT,EAAI,GAAKzJ,KAAKsF,KAAKuI,EAAKA,EAAK+B,EAAKA,EAAKgG,EAAKA,GAC5CnM,EAAI,GAAKzJ,KAAKsF,KAAKwI,EAAKA,EAAKC,EAAKA,EAAK8H,EAAKA,GAC5CpM,EAAI,GAAKzJ,KAAKsF,KAAK0I,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACrCzE,CACX,EAsyBIqR,YA5wBJ,SAAqBC,EAAuBC,EAAQC,EAAOC,EAAMzR,GAC7DA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAMqF,EAAInb,KAAKob,IAAc,GAAVpb,KAAK8U,GAAW,GAAMiG,GAezC,GAdAtR,EAAI,GAAK0R,EAAIH,EACbvR,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK0R,EACT1R,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACNyR,IAASG,IACT5R,EAAI,KAAO,EACXA,EAAI,KAAOwR,MAEV,CACD,MAAMK,EAAW,GAAKL,EAAQC,GAC9BzR,EAAI,IAAMyR,EAAOI,EACjB7R,EAAI,IAAMyR,EAAOD,EAAQK,CAC7B,CACA,OAAO7R,CACX,EAkvBI8R,MAluBJ,SAAeC,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,EAAKpS,GAkBhD,OAjBAA,EAAMA,GAAO,IAAIqM,GAAQ,KACrB,GAAK,GAAK2F,EAAQD,GACtB/R,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAAKkS,EAAMD,GACpBjS,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,GAAKmS,EAAOC,GACtBpS,EAAI,IAAM,EACVA,EAAI,KAAOgS,EAAQD,IAASA,EAAOC,GACnChS,EAAI,KAAOkS,EAAMD,IAAWA,EAASC,GACrClS,EAAI,IAAMmS,GAAQA,EAAOC,GACzBpS,EAAI,IAAM,EACHA,CACX,EAgtBIqS,QA7rBJ,SAAiBN,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,EAAKpS,GAElD,MAAMoI,EAAM4J,EAAQD,EACd1J,EAAM6J,EAAMD,EACZ3J,EAAM6J,EAAOC,EAiBnB,OApBApS,EAAMA,GAAO,IAAIqM,GAAQ,KAIrB,GAAK,EAAI8F,EAAO/J,EACpBpI,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EAAImS,EAAO9J,EACpBrI,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM+R,EAAOC,GAAS5J,EAC1BpI,EAAI,IAAMkS,EAAMD,GAAU5J,EAC1BrI,EAAI,IAAMoS,EAAM9J,EAChBtI,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAMmS,EAAOC,EAAM9J,EACvBtI,EAAI,IAAM,EACHA,CACX,EAwqBIsS,IAtpBJ,SAAarT,EAAUsT,EAAQC,EAAIxS,GAwB/B,OAvBAA,EAAMA,GAAO,IAAIqM,GAAQ,IACzBuD,GAAQA,IAAS1I,IACjB2I,GAAQA,IAAS3I,IACjB4I,GAAQA,IAAS5I,IACjBwB,EAAYtB,EAAWmL,EAAQtT,EAAU6Q,IAAQA,IACjDpH,EAAYf,EAAM6K,EAAI1C,GAAOF,IAAQA,IACrClH,EAAYf,EAAMmI,GAAOF,GAAOC,IAAQA,IACxC7P,EAAI,GAAK4P,GAAM,GACf5P,EAAI,GAAK4P,GAAM,GACf5P,EAAI,GAAK4P,GAAM,GACf5P,EAAI,GAAK,EACTA,EAAI,GAAK6P,GAAM,GACf7P,EAAI,GAAK6P,GAAM,GACf7P,EAAI,GAAK6P,GAAM,GACf7P,EAAI,GAAK,EACTA,EAAI,GAAK8P,GAAM,GACf9P,EAAI,GAAK8P,GAAM,GACf9P,EAAI,IAAM8P,GAAM,GAChB9P,EAAI,IAAM,EACVA,EAAI,IAAMf,EAAS,GACnBe,EAAI,IAAMf,EAAS,GACnBe,EAAI,IAAMf,EAAS,GACnBe,EAAI,IAAM,EACHA,CACX,EA8nBIyS,UA/mBJ,SAAmBC,EAAKH,EAAQC,EAAIxS,GAwBhC,OAvBAA,EAAMA,GAAO,IAAIqM,GAAQ,IACzBuD,GAAQA,IAAS1I,IACjB2I,GAAQA,IAAS3I,IACjB4I,GAAQA,IAAS5I,IACjBwB,EAAYtB,EAAWsL,EAAKH,EAAQzC,IAAQA,IAC5CpH,EAAYf,EAAM6K,EAAI1C,GAAOF,IAAQA,IACrClH,EAAYf,EAAMmI,GAAOF,GAAOC,IAAQA,IACxC7P,EAAI,GAAK4P,GAAM,GACf5P,EAAI,GAAK4P,GAAM,GACf5P,EAAI,GAAK4P,GAAM,GACf5P,EAAI,GAAK,EACTA,EAAI,GAAK6P,GAAM,GACf7P,EAAI,GAAK6P,GAAM,GACf7P,EAAI,GAAK6P,GAAM,GACf7P,EAAI,GAAK,EACTA,EAAI,GAAK8P,GAAM,GACf9P,EAAI,GAAK8P,GAAM,GACf9P,EAAI,IAAM8P,GAAM,GAChB9P,EAAI,IAAM,EACVA,EAAI,IAAM0S,EAAI,GACd1S,EAAI,IAAM0S,EAAI,GACd1S,EAAI,IAAM0S,EAAI,GACd1S,EAAI,IAAM,EACHA,CACX,EAulBI2S,OA1kBJ,SAAgBD,EAAKH,EAAQC,EAAIxS,GAwB7B,OAvBAA,EAAMA,GAAO,IAAIqM,GAAQ,IACzBuD,GAAQA,IAAS1I,IACjB2I,GAAQA,IAAS3I,IACjB4I,GAAQA,IAAS5I,IACjBwB,EAAYtB,EAAWsL,EAAKH,EAAQzC,IAAQA,IAC5CpH,EAAYf,EAAM6K,EAAI1C,GAAOF,IAAQA,IACrClH,EAAYf,EAAMmI,GAAOF,GAAOC,IAAQA,IACxC7P,EAAI,GAAK4P,GAAM,GACf5P,EAAI,GAAK6P,GAAM,GACf7P,EAAI,GAAK8P,GAAM,GACf9P,EAAI,GAAK,EACTA,EAAI,GAAK4P,GAAM,GACf5P,EAAI,GAAK6P,GAAM,GACf7P,EAAI,GAAK8P,GAAM,GACf9P,EAAI,GAAK,EACTA,EAAI,GAAK4P,GAAM,GACf5P,EAAI,GAAK6P,GAAM,GACf7P,EAAI,IAAM8P,GAAM,GAChB9P,EAAI,IAAM,EACVA,EAAI,MAAQ4P,GAAM,GAAK8C,EAAI,GAAK9C,GAAM,GAAK8C,EAAI,GAAK9C,GAAM,GAAK8C,EAAI,IACnE1S,EAAI,MAAQ6P,GAAM,GAAK6C,EAAI,GAAK7C,GAAM,GAAK6C,EAAI,GAAK7C,GAAM,GAAK6C,EAAI,IACnE1S,EAAI,MAAQ8P,GAAM,GAAK4C,EAAI,GAAK5C,GAAM,GAAK4C,EAAI,GAAK5C,GAAM,GAAK4C,EAAI,IACnE1S,EAAI,IAAM,EACHA,CACX,EAkjBIoG,YA1iBJ,SAAqBR,EAAG5F,GAkBpB,OAjBAA,EAAMA,GAAO,IAAIqM,GAAQ,KACrB,GAAK,EACTrM,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM4F,EAAE,GACZ5F,EAAI,IAAM4F,EAAE,GACZ5F,EAAI,IAAM4F,EAAE,GACZ5F,EAAI,IAAM,EACHA,CACX,EAwhBIqG,UA/gBJ,SAAmB5F,EAAGmF,EAAG5F,GACrBA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAMnJ,EAAK0C,EAAE,GACPzC,EAAKyC,EAAE,GACPxC,EAAKwC,EAAE,GACP/E,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRiM,EAAMjM,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRkM,EAAMlM,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACRmM,EAAMnM,EAAE,IACRoM,EAAMpM,EAAE,IACRqM,EAAMrM,EAAE,IACRsM,EAAMtM,EAAE,IACRuM,EAAMvM,EAAE,IAmBd,OAlBIA,IAAMT,IACNA,EAAI,GAAKa,EACTb,EAAI,GAAKc,EACTd,EAAI,GAAKe,EACTf,EAAI,GAAK0M,EACT1M,EAAI,GAAKgB,EACThB,EAAI,GAAKiB,EACTjB,EAAI,GAAKkB,EACTlB,EAAI,GAAK2M,EACT3M,EAAI,GAAKmB,EACTnB,EAAI,GAAKoB,EACTpB,EAAI,IAAMqB,EACVrB,EAAI,IAAM4M,GAEd5M,EAAI,IAAMa,EAAMqC,EAAKlC,EAAMmC,EAAKhC,EAAMiC,EAAKyJ,EAC3C7M,EAAI,IAAMc,EAAMoC,EAAKjC,EAAMkC,EAAK/B,EAAMgC,EAAK0J,EAC3C9M,EAAI,IAAMe,EAAMmC,EAAKhC,EAAMiC,EAAK9B,EAAM+B,EAAK2J,EAC3C/M,EAAI,IAAM0M,EAAMxJ,EAAKyJ,EAAMxJ,EAAKyJ,EAAMxJ,EAAK4J,EACpChN,CACX,EAweI4S,UAjeJ,SAAmBrM,EAAgBvG,GAC/BA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAM7F,EAAIjQ,KAAKkQ,IAAIF,GACbG,EAAInQ,KAAKoQ,IAAIJ,GAiBnB,OAhBAvG,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKwG,EACTxG,EAAI,GAAK0G,EACT1G,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM0G,EACV1G,EAAI,IAAMwG,EACVxG,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,CACX,EA6cI6S,QApcJ,SAAmBpS,EAAG8F,EAAgBvG,GAClCA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAMrL,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRkM,EAAMlM,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACRmM,EAAMnM,EAAE,IACR+F,EAAIjQ,KAAKkQ,IAAIF,GACbG,EAAInQ,KAAKoQ,IAAIJ,GAmBnB,OAlBAvG,EAAI,GAAKwG,EAAIxF,EAAM0F,EAAIvF,EACvBnB,EAAI,GAAKwG,EAAIvF,EAAMyF,EAAItF,EACvBpB,EAAI,GAAKwG,EAAItF,EAAMwF,EAAIrF,EACvBrB,EAAI,GAAKwG,EAAImG,EAAMjG,EAAIkG,EACvB5M,EAAI,GAAKwG,EAAIrF,EAAMuF,EAAI1F,EACvBhB,EAAI,GAAKwG,EAAIpF,EAAMsF,EAAIzF,EACvBjB,EAAI,IAAMwG,EAAInF,EAAMqF,EAAIxF,EACxBlB,EAAI,IAAMwG,EAAIoG,EAAMlG,EAAIiG,EACpBlM,IAAMT,IACNA,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,KAETT,CACX,EAsaI8S,UA/ZJ,SAAmBvM,EAAgBvG,GAC/BA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAM7F,EAAIjQ,KAAKkQ,IAAIF,GACbG,EAAInQ,KAAKoQ,IAAIJ,GAiBnB,OAhBAvG,EAAI,GAAKwG,EACTxG,EAAI,GAAK,EACTA,EAAI,IAAM0G,EACV1G,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK0G,EACT1G,EAAI,GAAK,EACTA,EAAI,IAAMwG,EACVxG,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,CACX,EA2YI+S,QAlYJ,SAAmBtS,EAAG8F,EAAgBvG,GAClCA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAMxL,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRiM,EAAMjM,EAAE,GACRU,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,IACRmM,EAAMnM,EAAE,IACR+F,EAAIjQ,KAAKkQ,IAAIF,GACbG,EAAInQ,KAAKoQ,IAAIJ,GAmBnB,OAlBAvG,EAAI,GAAKwG,EAAI3F,EAAM6F,EAAIvF,EACvBnB,EAAI,GAAKwG,EAAI1F,EAAM4F,EAAItF,EACvBpB,EAAI,GAAKwG,EAAIzF,EAAM2F,EAAIrF,EACvBrB,EAAI,GAAKwG,EAAIkG,EAAMhG,EAAIkG,EACvB5M,EAAI,GAAKwG,EAAIrF,EAAMuF,EAAI7F,EACvBb,EAAI,GAAKwG,EAAIpF,EAAMsF,EAAI5F,EACvBd,EAAI,IAAMwG,EAAInF,EAAMqF,EAAI3F,EACxBf,EAAI,IAAMwG,EAAIoG,EAAMlG,EAAIgG,EACpBjM,IAAMT,IACNA,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,KAETT,CACX,EAoWIgT,UA7VJ,SAAmBzM,EAAgBvG,GAC/BA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAM7F,EAAIjQ,KAAKkQ,IAAIF,GACbG,EAAInQ,KAAKoQ,IAAIJ,GAiBnB,OAhBAvG,EAAI,GAAKwG,EACTxG,EAAI,GAAK0G,EACT1G,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM0G,EACV1G,EAAI,GAAKwG,EACTxG,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,CACX,EAyUIiT,QAhUJ,SAAmBxS,EAAG8F,EAAgBvG,GAClCA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAMxL,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRiM,EAAMjM,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRkM,EAAMlM,EAAE,GACR+F,EAAIjQ,KAAKkQ,IAAIF,GACbG,EAAInQ,KAAKoQ,IAAIJ,GAmBnB,OAlBAvG,EAAI,GAAKwG,EAAI3F,EAAM6F,EAAI1F,EACvBhB,EAAI,GAAKwG,EAAI1F,EAAM4F,EAAIzF,EACvBjB,EAAI,GAAKwG,EAAIzF,EAAM2F,EAAIxF,EACvBlB,EAAI,GAAKwG,EAAIkG,EAAMhG,EAAIiG,EACvB3M,EAAI,GAAKwG,EAAIxF,EAAM0F,EAAI7F,EACvBb,EAAI,GAAKwG,EAAIvF,EAAMyF,EAAI5F,EACvBd,EAAI,GAAKwG,EAAItF,EAAMwF,EAAI3F,EACvBf,EAAI,GAAKwG,EAAImG,EAAMjG,EAAIgG,EACnBjM,IAAMT,IACNA,EAAI,GAAKS,EAAE,GACXT,EAAI,GAAKS,EAAE,GACXT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,KAETT,CACX,EAkSI+P,aAAcA,GACdzJ,SAAUA,GACV2J,WAAYA,GACZrJ,OAAQA,GACRC,QAzJJ,SAAiBjB,EAAG5F,GAkBhB,OAjBAA,EAAMA,GAAO,IAAIqM,GAAQ,KACrB,GAAKzG,EAAE,GACX5F,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK4F,EAAE,GACX5F,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM4F,EAAE,GACZ5F,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,CACX,EAuII8G,MA5HJ,SAAiBrG,EAAGmF,EAAG5F,GACnBA,EAAMA,GAAO,IAAIqM,GAAQ,IACzB,MAAMnJ,EAAK0C,EAAE,GACPzC,EAAKyC,EAAE,GACPxC,EAAKwC,EAAE,GAmBb,OAlBA5F,EAAI,GAAKkD,EAAKzC,EAAE,GAChBT,EAAI,GAAKkD,EAAKzC,EAAE,GAChBT,EAAI,GAAKkD,EAAKzC,EAAE,GAChBT,EAAI,GAAKkD,EAAKzC,EAAE,GAChBT,EAAI,GAAKmD,EAAK1C,EAAE,GAChBT,EAAI,GAAKmD,EAAK1C,EAAE,GAChBT,EAAI,GAAKmD,EAAK1C,EAAE,GAChBT,EAAI,GAAKmD,EAAK1C,EAAE,GAChBT,EAAI,GAAKoD,EAAK3C,EAAE,GAChBT,EAAI,GAAKoD,EAAK3C,EAAE,GAChBT,EAAI,IAAMoD,EAAK3C,EAAE,IACjBT,EAAI,IAAMoD,EAAK3C,EAAE,IACbA,IAAMT,IACNA,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,KAETT,CACX,EAqGI+G,eA9FJ,SAAwBL,EAAG1G,GAkBvB,OAjBAA,EAAMA,GAAO,IAAIqM,GAAQ,KACrB,GAAK3F,EACT1G,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK0G,EACT1G,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM0G,EACV1G,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,CACX,EA4EIgH,aApEJ,SAAsBvG,EAAGiG,EAAG1G,GAoBxB,OAnBAA,EAAMA,GAAO,IAAIqM,GAAQ,KACrB,GAAK3F,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,GAAK0G,EAAIjG,EAAE,GACfT,EAAI,IAAM0G,EAAIjG,EAAE,IAChBT,EAAI,IAAM0G,EAAIjG,EAAE,IACZA,IAAMT,IACNA,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,IACZT,EAAI,IAAMS,EAAE,KAETT,CACX,IA6FezB,aAmyBDA,aCtpJd,IAAI2U,GAAwB,WACxB,SAASA,EAAOC,EAAQC,EAAOC,EAAYhC,EAAaiC,EAAQC,EAAQC,GACpEvd,KAAKkd,OAASA,EACdld,KAAKmd,MAAQA,EACbnd,KAAKod,WAAaA,EAClBpd,KAAKob,YAAcA,EACnBpb,KAAKqd,OAASA,EACdrd,KAAKsd,OAASA,EACdtd,KAAKud,cAAgBA,CACzB,CAuCA,OAtCAN,EAAOO,QAAU,WACb,OAAO,IAAIP,EAAO,IAAK,IAAK,GAAKP,OAAO,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,IAAK,GAAKtB,YAAY9a,KAAK8U,GAAK,EAAG,EAAG,GAAK,KAAM,IAAK,IAAK,EACrI,EAEA6H,EAAOvd,UAAU+d,KAAO,WACpB,IAAIC,EAAY1d,KAAK0d,YACrB,OAAO,SAAU/N,GACb,OAAO,GAAK8E,IAAIiJ,EAAW/N,EAC/B,CACJ,EAEAsN,EAAOvd,UAAUie,YAAc,WAC3B,IAAIC,EAAoB,GAAKvO,QAAQrP,KAAKod,YAC1C,OAAO,GAAKxN,eAAegO,EAC/B,EACAX,EAAOvd,UAAUme,cAAgB,WAC7B,IAlCArT,EAkCIsT,EAAW,GAAKhP,MAAM9O,KAAKob,aAE/B,OADA0C,EAAW,GAAKrO,IAAIqO,GAAsB,GAAI,EAAG,EAAG,GAnCpDtT,EAAI,GAAKtK,UACX,GAkC4C,EAjC9CsK,EAAE,IAiC+C,EAhCjDA,EAAE,IAgCmD,EA/BrDA,EAAE,IA+BsD,EA9BjDA,IA+BI,GAAKgF,SAASsO,EAAU9d,KAAKod,WACxC,EAEAH,EAAOvd,UAAU0Q,UAAY,SAAUrJ,EAAGC,EAAGC,GACzC,IAAI8W,EAAU,GAAK1O,QAAQrP,KAAKod,YAChC,GAAKhN,UAAU2N,EAAS,CAAChX,EAAGC,EAAGC,GAAI8W,GACnC,GAAK1O,QAAQ0O,EAAS/d,KAAKod,WAC/B,EAEAH,EAAOvd,UAAUiR,OAAS,SAAU5J,EAAGC,EAAGC,GACtC,IAAI8W,EAAU,GAAK1O,QAAQrP,KAAKod,YAChC,GAAKR,QAAQmB,EAAS/W,EAAG+W,GACzB,GAAKjB,QAAQiB,EAAShX,EAAGgX,GACzB,GAAKf,QAAQe,EAAS9W,EAAG8W,GACzB,GAAK1O,QAAQ0O,EAAS/d,KAAKod,WAC/B,EAEAH,EAAOvd,UAAUge,UAAY,WACzB,OAAO,GAAK7N,QAAQ,GAAKV,UAAUnP,KAAKod,YAAa,EACzD,EACOH,CACX,CAjD2B,GAoDvBe,GAAmC,WACnC,SAASA,EAAkBC,EAAQC,GAC/Ble,KAAKme,MAAO,EACZne,KAAKoe,KAAO,EACZpe,KAAKqe,KAAO,EACZre,KAAKse,IAAM,EACXte,KAAKue,IAAM,EACXve,KAAKwe,IAAM,EACXxe,KAAKye,IAAM,EACXze,KAAK0e,IAAM,EACX1e,KAAK2e,IAAM,EACX3e,KAAK4e,OAAQ,EACb5e,KAAKie,OAASA,EACdje,KAAKke,OAASA,EACdle,KAAK6e,OAASA,OACd7e,KAAK8e,iBACT,CA0EA,OAzEAd,EAAkBR,QAAU,SAAUU,GAClC,OAAO,IAAIF,EAAkBf,GAAOO,UAAWU,EACnD,EACAF,EAAkBte,UAAUof,gBAAkB,WAC1C,IAAIne,EAAQX,KACZA,KAAKke,OAAOa,iBAAiB,aAAa,SAAUtc,GAChD9B,EAAMwd,MAAO,EACbxd,EAAMyd,KAAO3b,EAAEuc,MACfre,EAAM0d,KAAO5b,EAAEwc,MACfte,EAAMue,WACNzc,EAAE0c,gBACN,IAAG,GACHnf,KAAKke,OAAOa,iBAAiB,WAAW,SAAUtc,GAC9C9B,EAAMwd,MAAO,CACjB,IAAG,GACHne,KAAKke,OAAOa,iBAAiB,aAAa,SAAUtc,GAChD,IAAK9B,EAAMwd,KACP,OAAO,EACXxd,EAAM2d,IAA+B,GAAxB7b,EAAEuc,MAAQre,EAAMyd,MAAY9d,KAAK8U,GAAKzU,EAAMud,OAAOf,MAChExc,EAAM4d,IAA+B,GAAxB9b,EAAEwc,MAAQte,EAAM0d,MAAY/d,KAAK8U,GAAKzU,EAAMud,OAAOhB,OAChEvc,EAAMyd,KAAO3b,EAAEuc,MACfre,EAAM0d,KAAO5b,EAAEwc,MACfte,EAAMue,WACNzc,EAAE0c,gBACN,IAAG,GACHnf,KAAKke,OAAOa,iBAAiB,SAAS,SAAUtc,GAC5C9B,EAAMge,IAAiB,GAAXlc,EAAE2c,OACdze,EAAMue,WACNzc,EAAE0c,gBACN,IAAG,GACHN,OAAOE,iBAAiB,WAAW,SAAUtc,GACpC,OAAOoB,SAASpB,EAAEmB,OAGT,MAAVnB,EAAEmB,IACFjD,EAAM+d,KAAO,GAEE,MAAVjc,EAAEmB,IACPjD,EAAM+d,IAAM,GAEG,MAAVjc,EAAEmB,IACPjD,EAAM8d,KAAO,GAEE,MAAVhc,EAAEmB,MACPjD,EAAM8d,IAAM,IAGhB9d,EAAMue,WACNzc,EAAE0c,iBACN,IAAG,EACP,EACAnB,EAAkBte,UAAU2f,aAAe,SAAUC,GACjDtf,KAAKie,OAASqB,EACdtf,KAAKkf,UACT,EACAlB,EAAkBte,UAAUwf,SAAW,WACnClf,KAAK4e,OAAQ,CACjB,EACAZ,EAAkBte,UAAU6f,SAAW,WACnCvf,KAAK4e,OAAQ,CACjB,EACAZ,EAAkBte,UAAU8f,QAAU,WAClC,OAAOxf,KAAK4e,KAChB,EACAZ,EAAkBte,UAAU+f,UAAY,WAOpC,OANIzf,KAAKwf,YACLxf,KAAKie,OAAO7N,UAAUpQ,KAAKye,IAAKze,KAAK0e,IAAK1e,KAAK2e,KAC/C3e,KAAKie,OAAOtN,OAAO3Q,KAAKse,IAAKte,KAAKue,IAAKve,KAAKwe,KAC5Cxe,KAAKye,IAAMze,KAAK0e,IAAM1e,KAAK2e,IAAM3e,KAAKse,IAAMte,KAAKue,IAAMve,KAAKwe,IAAM,EAClExe,KAAKuf,YAEFvf,KAAKie,MAChB,EACOD,CACX,CA3FsC,GA6FtC,SAAS0B,GAAUC,EAAOC,GACtB,OAAO,EAAItf,KAAKuf,KAAKD,GAAU,EAAID,GACvC,CAoBA,IC7LIG,GAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUlf,GAAS,IAAMmf,EAAKL,EAAUM,KAAKpf,GAAS,CAAE,MAAOqB,GAAK4d,EAAO5d,EAAI,CAAE,CAC1F,SAASge,EAASrf,GAAS,IAAMmf,EAAKL,EAAiB,MAAE9e,GAAS,CAAE,MAAOqB,GAAK4d,EAAO5d,EAAI,CAAE,CAC7F,SAAS8d,EAAKG,GAJlB,IAAetf,EAIasf,EAAOC,KAAOP,EAAQM,EAAOtf,QAJ1CA,EAIyDsf,EAAOtf,MAJhDA,aAAiB6e,EAAI7e,EAAQ,IAAI6e,GAAE,SAAUG,GAAWA,EAAQhf,EAAQ,KAIjBwf,KAAKN,EAAWG,EAAW,CAC7GF,GAAML,EAAYA,EAAU/c,MAAM4c,EAASC,GAAc,KAAKQ,OAClE,GACJ,EACIK,GAA4C,SAAUd,EAASe,GAC/D,IAAsGrF,EAAGzU,EAAGoI,EAAG2R,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAP9R,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,EAAI,EAAG+R,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEP,KAAMa,EAAK,GAAI,MAASA,EAAK,GAAI,OAAUA,EAAK,IAAwB,mBAAXC,SAA0BP,EAAEO,OAAOC,UAAY,WAAa,OAAOvhB,IAAM,GAAI+gB,EACvJ,SAASM,EAAKjhB,GAAK,OAAO,SAAUuP,GAAK,OACzC,SAAc6R,GACV,GAAI/F,EAAG,MAAM,IAAI5b,UAAU,mCAC3B,KAAOkhB,IAAMA,EAAI,EAAGS,EAAG,KAAOR,EAAI,IAAKA,OACnC,GAAIvF,EAAI,EAAGzU,IAAMoI,EAAY,EAARoS,EAAG,GAASxa,EAAU,OAAIwa,EAAG,GAAKxa,EAAS,SAAOoI,EAAIpI,EAAU,SAAMoI,EAAExP,KAAKoH,GAAI,GAAKA,EAAEwZ,SAAWpR,EAAIA,EAAExP,KAAKoH,EAAGwa,EAAG,KAAKb,KAAM,OAAOvR,EAE3J,OADIpI,EAAI,EAAGoI,IAAGoS,EAAK,CAAS,EAARA,EAAG,GAAQpS,EAAEhO,QACzBogB,EAAG,IACP,KAAK,EAAG,KAAK,EAAGpS,EAAIoS,EAAI,MACxB,KAAK,EAAc,OAAXR,EAAEC,QAAgB,CAAE7f,MAAOogB,EAAG,GAAIb,MAAM,GAChD,KAAK,EAAGK,EAAEC,QAASja,EAAIwa,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKR,EAAEI,IAAIK,MAAOT,EAAEG,KAAKM,MAAO,SACxC,QACI,MAAkBrS,GAAZA,EAAI4R,EAAEG,MAAY5e,OAAS,GAAK6M,EAAEA,EAAE7M,OAAS,KAAkB,IAAVif,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAER,EAAI,EAAG,QAAU,CAC3G,GAAc,IAAVQ,EAAG,MAAcpS,GAAMoS,EAAG,GAAKpS,EAAE,IAAMoS,EAAG,GAAKpS,EAAE,IAAM,CAAE4R,EAAEC,MAAQO,EAAG,GAAI,KAAO,CACrF,GAAc,IAAVA,EAAG,IAAYR,EAAEC,MAAQ7R,EAAE,GAAI,CAAE4R,EAAEC,MAAQ7R,EAAE,GAAIA,EAAIoS,EAAI,KAAO,CACpE,GAAIpS,GAAK4R,EAAEC,MAAQ7R,EAAE,GAAI,CAAE4R,EAAEC,MAAQ7R,EAAE,GAAI4R,EAAEI,IAAIxe,KAAK4e,GAAK,KAAO,CAC9DpS,EAAE,IAAI4R,EAAEI,IAAIK,MAChBT,EAAEG,KAAKM,MAAO,SAEtBD,EAAKV,EAAKlhB,KAAKmgB,EAASiB,EAC5B,CAAE,MAAOve,GAAK+e,EAAK,CAAC,EAAG/e,GAAIuE,EAAI,CAAG,CAAE,QAAUyU,EAAIrM,EAAI,CAAG,CACzD,GAAY,EAARoS,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEpgB,MAAOogB,EAAG,GAAKA,EAAG,QAAK,EAAQb,MAAM,EAC9E,CAtBgDJ,CAAK,CAACngB,EAAGuP,GAAK,CAAG,CAuBrE,EAGI+R,GAAgB,IAAI1e,EAAO,CAC3B,CAAC,aAAc,IAAIsB,EAAOrC,IAC1B,CAAC,aAAc,IAAIqC,EAAOrC,IAC1B,CAAC,iBAAkB,IAAIa,EAAKb,IAC5B,CAAC,cAAeA,GAChB,CAAC,cAAeA,GAChB,CAAC,SAAUA,GACX,CAAC,SAAUA,GACX,CAAC,gBAAiBA,KAEtB,SAAS0f,GAAoBnX,GACzB,MAAO,CACH,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IACrB,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IACrB,CAACA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAAKA,EAAE,KACtB,CAACA,EAAE,IAAKA,EAAE,IAAKA,EAAE,IAAKA,EAAE,KAEhC,CACA,ICxBIoX,GDwBAC,GAA0B,WAC1B,SAASA,EAAS3D,EAAQ4D,EAAmBC,EAAWC,EAASC,EAAQC,GACrE,IAAIvhB,EAAQX,KACZA,KAAKmiB,gBAAkB,KACvBniB,KAAKke,OAASA,EACdle,KAAK8hB,kBAAoBA,EACzB9hB,KAAKgiB,QAAUA,EACfhiB,KAAKiiB,OAASA,EACdjiB,KAAKoiB,WAAaF,EAClB,IAAIG,EAAqB,cACzBriB,KAAKoiB,WAAWE,UAAU,CACtBL,OAAQA,EACRM,OAAQF,EACRG,UAAW,kBAEfxiB,KAAKyiB,gBAAkBR,EAAOS,aAAa,CACvC3hB,KAAMghB,EAAU5b,oBAAoBpF,KACpC4hB,MAAOC,eAAeC,QACtBC,kBAAkB,IAEtB,IAAItb,WAAWxH,KAAKyiB,gBAAgBM,kBAAkBrV,IAAI,IAAIlG,WAAWua,EAAU1b,kBACnFrG,KAAKyiB,gBAAgBO,QAErBhjB,KAAKijB,cAAgBhB,EAAOS,aAAa,CACrC3hB,KAAM2gB,GAAc3gB,KACpB4hB,MAAOC,eAAeM,QAAUN,eAAeO,WAEnD,IAAIC,EEzFL,SAAuBlF,EAAQmF,EAAUnd,GAC5C,IAAIod,EAAgB,CAChB,EAHS,gmBAIT,EALS,wsCAMT,EAPS,gsEAQXD,GAEF,MADiB,kFAAkF/hB,OAAO4c,EAAOhB,OAAQ,4BAA4B5b,OAAO4c,EAAOf,MAAO,yBAAyB7b,OAAO+hB,EAAU,2BAA2B/hB,OAAO4E,EAAW,+nBAA+nB5E,OAAOgiB,EAAe,u8IAE15B,CFiFyBC,CAAcrF,EAAQ6D,EAAUpc,yBAA0Boc,EAAU7b,WACjFsd,EAAevB,EAAOwB,mBAAmB,CAAEC,KAAMN,IACrDpjB,KAAK2jB,SAAW1B,EAAO2B,qBAAqB,CACxCC,OAAQ,OACRC,OAAQ,CACJC,OAAQP,EACRQ,WAAY,aAEhBC,SAAU,CACNF,OAAQP,EACRQ,WAAY,UACZE,QAAS,CACL,CACI3B,OAAQF,EAIR8B,MAAO,CACHC,MAAO,CACHC,UAAW,sBACXC,UAAW,MACXC,UAAW,OAEfC,MAAO,CACHH,UAAW,sBACXC,UAAW,MACXC,UAAW,WAM/BE,UAAW,CACPC,SAAU,gBACVC,sBAAkB3a,EAClB4a,cAAU5a,KAIlBhK,KAAK6kB,eAAiB9C,EAAU3b,eAGhCpG,KAAK8kB,UAAYtlB,MAAMulB,KAAKvlB,MAAMQ,KAAK6kB,eAAetiB,QAAQmB,QAE9DshB,uBAAsB,WAAc,OAAOrkB,EAAMskB,SAAW,GAChE,CA8IA,OA5IApD,EAASqD,KAAO,SAAUhH,EAAQ6D,EAAWD,GACzC,OAAOhC,GAAU9f,UAAM,OAAQ,GAAQ,WACnC,IAAIgiB,EAASmD,EAAYlD,EAAQG,EACjC,OAAOvB,GAAY7gB,MAAM,SAAU0C,GAC/B,OAAQA,EAAGue,OACP,KAAK,EACD,OAAK/C,EAGAkH,UAAUC,IAGR,CAAC,EAAaD,UAAUC,IAAIC,kBAFxB,CAAC,EAAcnF,QAAQE,OAAO,kEAH9B,CAAC,EAAcF,QAAQE,OAAO,sBAM7C,KAAK,EAED,OADA2B,EAAUtf,EAAGwe,SAIbiE,EAAapD,EAAU1b,gBAAgB8e,WAChC,CAAC,EAAanD,EAAQuD,cAAc,CACnCC,eAAgB,CACZC,4BAA6B,IAAMN,EACnCO,cAAe,IAAMP,OANtB,CAAC,EAAchF,QAAQE,OAAO,wEAS7C,KAAK,EAGD,OAFA4B,EAASvf,EAAGwe,QACZkB,EAAalE,EAAOyH,WAAW,WAIxB,CAAC,EAAc,IAAI9D,EAAS3D,EAAQ4D,EAAmBC,EAAWC,EAASC,EAAQG,IAF/E,CAAC,EAAcjC,QAAQE,OAAO,8BAIrD,GACJ,GACJ,EAEAwB,EAASniB,UAAUkmB,QAAU,WACzB,OAAO9F,GAAU9f,UAAM,OAAQ,GAAQ,WACnC,IAAIW,EAAQX,KACZ,OAAO6gB,GAAY7gB,MAAM,SAAU0C,GAC/B,MAAO,CAAC,EAAc,IAAIyd,SAAQ,SAAUC,EAASC,GAC7C1f,EAAMwhB,gBAAkB/B,CAC5B,IACR,GACJ,GACJ,EACAyB,EAASniB,UAAUmmB,KAAO,SAAUC,GAChC,IAAIC,EAAiB/lB,KAAKiiB,OAAO+D,uBAE7BC,EAAuB,CACvBC,iBAAkB,CAAC,CACX7kB,KAHMrB,KAAKoiB,WAAW+D,oBAAoBC,aAI1CC,WAAY,CAAEC,EAAG,EAAGvF,EAAG,EAAG3hB,EAAG,EAAGuM,EAAG,GACnC4a,QAAS,QACTC,OAAQ,WAGhBC,EAAcV,EAAeW,gBAAgBT,GACjDQ,EAAYE,YAAY3mB,KAAK2jB,UAC7B8C,EAAYG,aAAa,EAAG5mB,KAAKiiB,OAAO4E,gBAAgB,CACpDhD,OAAQ7jB,KAAK2jB,SAASmD,mBAAmB,GACzCC,QAAS,CAAC,CACFC,QAAS,EACTC,SAAU,CACNC,OAAQlnB,KAAKijB,oBAI7BwD,EAAYG,aAAa,EAAG5mB,KAAKiiB,OAAO4E,gBAAgB,CACpDhD,OAAQ7jB,KAAK2jB,SAASmD,mBAAmB,GACzCC,QAAS,CAAC,CACFC,QAAS,EACTC,SAAU,CACNC,OAAQlnB,KAAKyiB,sBAK7B,IAAK,IAAIjgB,EAAI,EAAGA,EAAIxC,KAAK8kB,UAAUviB,OAAQC,IAAK,CAC5C,IAAI2kB,EAASnnB,KAAK8kB,UAAUtiB,GAC5BikB,EAAYZ,KAAK,EAAG,EAAG,EAAIsB,EAAQ,EACvC,CACAV,EAAYW,MACZpnB,KAAKiiB,OAAOoF,MAAMC,OAAO,CAACvB,EAAewB,WACZ,OAAzBvnB,KAAKmiB,gBACL6C,sBAAsBc,IAGtB9lB,KAAKijB,cAAc2C,UACnB5lB,KAAKyiB,gBAAgBmD,UACrB5lB,KAAKiiB,OAAO2D,UACZ5lB,KAAKgiB,QAAU,KACfhiB,KAAKiiB,OAAS,KACdjiB,KAAKoiB,WAAa,KAClBpiB,KAAK2jB,SAAW,KAChB3jB,KAAKmiB,kBAEb,EACAN,EAASniB,UAAUulB,QAAU,WACzB,IAAItkB,EAAQX,KACZ,GAAKA,KAAK8hB,kBAAkBtC,UAA5B,CAIA,IAAIvB,EAASje,KAAK8hB,kBAAkBrC,YAChCzW,EAAWiV,EAAON,cAClB6J,EAAc,GAAMxnB,KAAKke,OAAOf,MAAQc,EAAOZ,OAC/CoK,EAAc,GAAMznB,KAAKke,OAAOhB,OAASe,EAAOX,OAChDoK,EAAuB,IAAIphB,YAAYtG,KAAKijB,cAAcliB,MAC1D4mB,EAAW,CACXvK,WAAYuE,GAAoB1D,EAAOb,YACvCwK,WAAYjG,GAAoB1D,EAAOJ,iBACvCgK,eAAgBroB,MAAMulB,KAAK/b,GAC3Bwe,YAAaA,EACbC,YAAaA,EACbpK,OAAQY,EAAOZ,OACfC,OAAQW,EAAOX,OACfC,cAAeU,EAAOV,eAE1BmE,GAAcxgB,KAAK,EAAGymB,EAAU,IAAInhB,SAASkhB,IAC7C1nB,KAAKiiB,OAAOoF,MAAMS,YAAY9nB,KAAKijB,cAAe,EAAGyE,EAAsB,EAAGA,EAAqBvC,YAGnG,IAFA,IAAI4C,EAAkB9J,EAAOR,OACzBuK,EAAoB,GACfxlB,EAAI,EAAGA,EAAIxC,KAAK6kB,eAAetiB,OAAQC,IAAK,CACjD,IAAIylB,EAAQjoB,KAAK8kB,UAAUtiB,GAEvB0lB,EAAQH,EADK/nB,KAAK6kB,eAAeoD,IAErCD,EAAkBplB,KAAK,CAACslB,EAAOD,GACnC,CACAjoB,KAAK8kB,UAAYkD,EAAkBG,MAAK,SAAUzlB,EAAIqB,GAClD,IAAIqkB,EAAK1lB,EAAG,GACR2lB,GADiB3lB,EAAG,GACfqB,EAAG,IACZ,OADqBA,EAAG,GAChBqkB,EAAKC,CACjB,IAAGjlB,KAAI,SAAUV,GAEb,OADQA,EAAG,GAAQA,EAAG,EAE1B,IACA1C,KAAK6lB,MAAK,WAAc,OAAOllB,EAAMskB,SAAW,GAlChD,MAFID,uBAAsB,WAAc,OAAOrkB,EAAMskB,SAAW,GAqCpE,EACOpD,CACX,CAvN6B,GC1BzB3D,GAASoK,SAASC,eAAe,iBACjCzG,GAAoB9D,GAAkBR,QAAQU,IA0C/BoK,SAASC,eAAe,aAC9BxJ,iBAAiB,UAzC9B,SAAyByJ,GACrB,IAAIC,EAAOD,EAAMlM,OAAOoM,MAAM,GA+B1BD,GJzED,SAA+BA,GAClC,OAAO,IAAItI,SAAQ,SAAUC,EAASC,GAClC,IAAIsI,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAUL,GACjBA,EAAMlM,QAAWkM,EAAMlM,OAAOoE,OAIA,iBAAxB8H,EAAMlM,OAAOoE,OAIxBN,EAAQoI,EAAMlM,OAAOoE,QAHjBL,EAAO,2CAJPA,EAAO,sBAQf,EACAsI,EAAOG,QAAU,SAAUN,GAClBA,EAAMlM,OAIX+D,EAAOmI,EAAMlM,OAAOyM,OAHhB1I,EAAO,sBAIf,EACAsI,EAAOK,kBAAkBP,EAC7B,GACJ,CImDQQ,CAAsBR,GACjB7H,MAhCT,SAAoB3b,GAChB,OA7C8C8a,EA6C7B/f,KA7CsCggB,OA6ChC,EA7C+CE,EA6C/B,WACnC,IAAI6B,EAAWmH,EAAUC,EACzB,OAtCoC,SAAUpJ,EAASe,GAC/D,IAAsGrF,EAAGzU,EAAGoI,EAAG2R,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAP9R,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,EAAI,EAAG+R,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEP,KAAMa,EAAK,GAAI,MAASA,EAAK,GAAI,OAAUA,EAAK,IAAwB,mBAAXC,SAA0BP,EAAEO,OAAOC,UAAY,WAAa,OAAOvhB,IAAM,GAAI+gB,EACvJ,SAASM,EAAKjhB,GAAK,OAAO,SAAUuP,GAAK,OACzC,SAAc6R,GACV,GAAI/F,EAAG,MAAM,IAAI5b,UAAU,mCAC3B,KAAOkhB,IAAMA,EAAI,EAAGS,EAAG,KAAOR,EAAI,IAAKA,OACnC,GAAIvF,EAAI,EAAGzU,IAAMoI,EAAY,EAARoS,EAAG,GAASxa,EAAU,OAAIwa,EAAG,GAAKxa,EAAS,SAAOoI,EAAIpI,EAAU,SAAMoI,EAAExP,KAAKoH,GAAI,GAAKA,EAAEwZ,SAAWpR,EAAIA,EAAExP,KAAKoH,EAAGwa,EAAG,KAAKb,KAAM,OAAOvR,EAE3J,OADIpI,EAAI,EAAGoI,IAAGoS,EAAK,CAAS,EAARA,EAAG,GAAQpS,EAAEhO,QACzBogB,EAAG,IACP,KAAK,EAAG,KAAK,EAAGpS,EAAIoS,EAAI,MACxB,KAAK,EAAc,OAAXR,EAAEC,QAAgB,CAAE7f,MAAOogB,EAAG,GAAIb,MAAM,GAChD,KAAK,EAAGK,EAAEC,QAASja,EAAIwa,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKR,EAAEI,IAAIK,MAAOT,EAAEG,KAAKM,MAAO,SACxC,QACI,MAAkBrS,GAAZA,EAAI4R,EAAEG,MAAY5e,OAAS,GAAK6M,EAAEA,EAAE7M,OAAS,KAAkB,IAAVif,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAER,EAAI,EAAG,QAAU,CAC3G,GAAc,IAAVQ,EAAG,MAAcpS,GAAMoS,EAAG,GAAKpS,EAAE,IAAMoS,EAAG,GAAKpS,EAAE,IAAM,CAAE4R,EAAEC,MAAQO,EAAG,GAAI,KAAO,CACrF,GAAc,IAAVA,EAAG,IAAYR,EAAEC,MAAQ7R,EAAE,GAAI,CAAE4R,EAAEC,MAAQ7R,EAAE,GAAIA,EAAIoS,EAAI,KAAO,CACpE,GAAIpS,GAAK4R,EAAEC,MAAQ7R,EAAE,GAAI,CAAE4R,EAAEC,MAAQ7R,EAAE,GAAI4R,EAAEI,IAAIxe,KAAK4e,GAAK,KAAO,CAC9DpS,EAAE,IAAI4R,EAAEI,IAAIK,MAChBT,EAAEG,KAAKM,MAAO,SAEtBD,EAAKV,EAAKlhB,KAAKmgB,EAASiB,EAC5B,CAAE,MAAOve,GAAK+e,EAAK,CAAC,EAAG/e,GAAIuE,EAAI,CAAG,CAAE,QAAUyU,EAAIrM,EAAI,CAAG,CACzD,GAAY,EAARoS,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEpgB,MAAOogB,EAAG,GAAKA,EAAG,QAAK,EAAQb,MAAM,EAC9E,CAtBgDJ,CAAK,CAACngB,EAAGuP,GAAK,CAAG,CAuBrE,CAYmB,CAAY3P,MAAM,SAAU0C,GAC/B,OAAQA,EAAGue,OACP,KAAK,EACD,OAAKW,GACE,CAAC,EAAaA,GAAgBgE,WADR,CAAC,EAAa,GAE/C,KAAK,EACDljB,EAAGwe,OACHxe,EAAGue,MAAQ,EACf,KAAK,EACDc,EAAY,IAAI/c,EAAgBC,GAChCvC,EAAGue,MAAQ,EACf,KAAK,EAED,OADAve,EAAGye,KAAKve,KAAK,CAAC,EAAG,EAAG,CAAE,IACf,CAAC,EAAaif,GAASqD,KAAKhH,GAAQ6D,EAAWD,KAC1D,KAAK,EAGD,OAFAoH,EAAWxmB,EAAGwe,OACdU,GAAkBsH,EACX,CAAC,EAAa,GACzB,KAAK,EAGD,OAFAC,EAAUzmB,EAAGwe,OACbkI,MAAMD,GACC,CAAC,EAAa,GACzB,KAAK,EAAG,MAAO,CAAC,GAExB,GACJ,EAtEG,KAFgElJ,OA6CpC,KA3CjBA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUlf,GAAS,IAAMmf,EAAKL,EAAUM,KAAKpf,GAAS,CAAE,MAAOqB,GAAK4d,EAAO5d,EAAI,CAAE,CAC1F,SAASge,EAASrf,GAAS,IAAMmf,EAAKL,EAAiB,MAAE9e,GAAS,CAAE,MAAOqB,GAAK4d,EAAO5d,EAAI,CAAE,CAC7F,SAAS8d,EAAKG,GAJlB,IAAetf,EAIasf,EAAOC,KAAOP,EAAQM,EAAOtf,QAJ1CA,EAIyDsf,EAAOtf,MAJhDA,aAAiB6e,EAAI7e,EAAQ,IAAI6e,GAAE,SAAUG,GAAWA,EAAQhf,EAAQ,KAIjBwf,KAAKN,EAAWG,EAAW,CAC7GF,GAAML,EAAYA,EAAU/c,MAAM4c,EAASC,GAAc,KAAKQ,OAClE,IAPwC,IAAUT,EAASC,EAAYC,EAAGC,CAyE1E,IAISmJ,OAAM,SAAUN,GACjBK,MAAML,EACV,GAER,IAKA,IFiHI,SAA0BO,EAAWC,EAAarL,EAAQsL,GACtD,IAAI7oB,EAAQX,KACZA,KAAKypB,cAAgB,EACrBzpB,KAAK0pB,sBAAwB,SAAUlB,GACnC,IAAI9lB,EACA+lB,EAAwC,QAAhC/lB,EAAK/B,EAAM2oB,UAAUZ,aAA0B,IAAPhmB,OAAgB,EAASA,EAAG,GAChF,GAAI+lB,EAAM,CACN,IAAIE,EAAS,IAAIC,WACjBD,EAAOE,OAASloB,EAAMgpB,eACtBhB,EAAOiB,WAAWnB,EACtB,CACJ,EACAzoB,KAAK2pB,eAAiB,SAAUnB,GAC5B,GAAKA,EAAMlM,OAAX,CAEA,IAAIuN,EAAWrB,EAAMlM,OAAOoE,OACxBoJ,EAAWC,KAAKC,MAAMH,GAC1BlpB,EAAM8oB,cAAgB,EACtB9oB,EAAM4oB,YAAYU,UAAY,GAC9BH,EAASI,SAAQ,SAAUC,GACvBxpB,EAAM8oB,gBACN,IAjCQW,EAAWC,EAASC,EARlBC,EAAGnb,EACrBob,EACAC,EACAC,EApLqBC,EAAaC,EAAMC,EAGxC5O,EACAD,EACAD,EACAD,EACAmE,EAqLA6K,EA8BYC,EAAWzC,SAAS0C,cAAc,MAClC/M,GAlCImM,EAkCoBD,EAlCTE,EAkCqB1pB,EAAMud,OAAOf,MAlCzBmN,EAkCgC3pB,EAAMud,OAAOhB,OA3N5DyN,EA4LkB,GA5LLC,EA0L3BlL,GAAU0K,EAAUa,GAAIb,EAAUjN,OA1LD0N,EA2LjCnL,GAAU0K,EAAUc,GAAId,EAAUlN,QAxLzCjB,EAFc3b,KAAKob,IAAImP,EAAO,GAEVF,EACpB3O,GAAUC,EACVF,EAHczb,KAAKob,IAAIkP,EAAO,GAGRD,EACtB7O,GAAQC,GACRkE,EAAI,GAAK/f,UAEX,GAAK,IAAiB6b,EAAQD,GAChCmE,EAAE,GAAK,IAAiBhE,EAAMD,GAC9BiE,EAAE,IAAMlE,EAAQD,IAASC,EAAQD,GACjCmE,EAAE,IAAMhE,EAAMD,IAAWC,EAAMD,GAC/BiE,EAAE,IAAMkL,IAAgB,KACxBlL,EAAE,KAAM,GAAkB,KAC1BA,EAAE,IAPW,EAQbA,EAAE,IAAM,EA4KJ6K,EA3KG,GAAK3b,UAAU8Q,GAgKAsK,EAYd,EAAKrqB,OAAOiD,MAAM,EAAMinB,EAAU/Z,SAAS+a,QAZ1Bhc,EAajBgb,EAAUphB,SAZdwhB,EAAKD,EACLE,EAAa,GAAKvP,SAASsP,GAC3BE,EAAS,GAAKnW,UAAUnF,GAAI,GAChC,GAAKgB,UAAUqa,EAAYC,EAAQD,GAW5B,IAAIxN,GAAOqN,EAASD,EAVpBI,EAUyCK,EAAkBV,EAAUa,GAAIb,EAAUc,GAAI5qB,KAAK4C,IAAImnB,EAAUD,EAAUjN,MAAOmN,EAAUF,EAAUlN,UA4B1I6N,EAASM,YAAclB,EAAWmB,SAClCP,EAAShM,iBAAiB,QAASpe,EAAM4qB,sBAAsBtN,IAC/Dtd,EAAM4oB,YAAYiC,YAAYT,EAClC,GAZU,CAad,EACA/qB,KAAKurB,sBAAwB,SAAUtN,GACnC,OAAO,WACHtd,EAAM6oB,kBAAkBvL,EAC5B,CACJ,EACAje,KAAKspB,UAAYA,EACjBtpB,KAAKupB,YAAcA,EACnBvpB,KAAKke,OAASA,EACdle,KAAKwpB,kBAAoBA,EACzBxpB,KAAKspB,UAAUvK,iBAAiB,SAAU/e,KAAK0pB,sBACnD,CEvJJ,CAFsBpB,SAASC,eAAe,gBAC7BD,SAASC,eAAe,cACSrK,GAAQ4D,GAAkBzC,aAAaoM,KAAK3J,I","sources":["webpack://my-webpack-project/./src/packing.ts","webpack://my-webpack-project/./src/ply.ts","webpack://my-webpack-project/./node_modules/wgpu-matrix/dist/2.x/wgpu-matrix.module.js","webpack://my-webpack-project/./src/camera.ts","webpack://my-webpack-project/./src/renderer.ts","webpack://my-webpack-project/./src/index.ts","webpack://my-webpack-project/./src/shaders.ts"],"sourcesContent":["// This file contains the code for packing and unpacking data into webGPU buffers.\n// WebGPU buffers have rules about datatype layouts, padding etc, so it's much easier\n// to define a code which automatically generates the correct packing methods.\n// It is weakly typed and relies on runtime check, a proper solution would be with\n// extensive generics, but that's outside my comfort zone.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nfunction roundUp(n, multiple) {\n    return Math.ceil(n / multiple) * multiple;\n}\nvar PackingError = /** @class */ (function (_super) {\n    __extends(PackingError, _super);\n    function PackingError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = 'PackingError';\n        return _this;\n    }\n    return PackingError;\n}(Error));\nvar PackingType = /** @class */ (function () {\n    function PackingType(size, alignment) {\n        this.size = size;\n        this.alignment = alignment;\n    }\n    return PackingType;\n}());\nexport { PackingType };\nvar i32Type = /** @class */ (function (_super) {\n    __extends(i32Type, _super);\n    function i32Type() {\n        return _super.call(this, 4, 4) || this;\n    }\n    i32Type.prototype.pack = function (offset, value, view) {\n        if (typeof value !== 'number') {\n            throw new PackingError(\"Expected number, got \".concat(value));\n        }\n        view.setInt32(offset, value, true);\n        return offset + this.size;\n    };\n    i32Type.prototype.unpack = function (offset, view) {\n        var content = view.getInt32(offset, true);\n        return [offset + this.size, content];\n    };\n    return i32Type;\n}(PackingType));\nvar u32Type = /** @class */ (function (_super) {\n    __extends(u32Type, _super);\n    function u32Type() {\n        return _super.call(this, 4, 4) || this;\n    }\n    u32Type.prototype.pack = function (offset, value, view) {\n        if (typeof value !== 'number') {\n            throw new PackingError(\"Expected number, got \".concat(value));\n        }\n        view.setUint32(offset, value, true);\n        return offset + this.size;\n    };\n    u32Type.prototype.unpack = function (offset, view) {\n        var content = view.getUint32(offset, true);\n        return [offset + this.size, content];\n    };\n    return u32Type;\n}(PackingType));\nvar f32Type = /** @class */ (function (_super) {\n    __extends(f32Type, _super);\n    function f32Type() {\n        return _super.call(this, 4, 4) || this;\n    }\n    f32Type.prototype.pack = function (offset, value, view) {\n        if (typeof value !== 'number') {\n            throw new PackingError(\"Expected number, got \".concat(value));\n        }\n        view.setFloat32(offset, value, true);\n        return offset + this.size;\n    };\n    f32Type.prototype.unpack = function (offset, view) {\n        var content = view.getFloat32(offset, true);\n        return [offset + this.size, content];\n    };\n    return f32Type;\n}(PackingType));\nexport var i32 = new i32Type();\nexport var u32 = new u32Type();\nexport var f32 = new f32Type();\nvar VectorType = /** @class */ (function (_super) {\n    __extends(VectorType, _super);\n    function VectorType(baseType, nValues, alignment) {\n        var _this = _super.call(this, baseType.size * nValues, alignment) || this;\n        _this.baseType = baseType;\n        _this.nValues = nValues;\n        return _this;\n    }\n    VectorType.prototype.pack = function (offset, values, view) {\n        if (!Array.isArray(values)) {\n            throw new PackingError(\"Expected array, got \".concat(values));\n        }\n        if (values.length !== this.nValues) {\n            throw new PackingError(\"Expected \".concat(this.nValues, \" values, got \").concat(values.length));\n        }\n        while (offset % this.alignment !== 0) {\n            offset++;\n        }\n        for (var i = 0; i < values.length; i++) {\n            try {\n                offset = this.baseType.pack(offset, values[i], view);\n            }\n            catch (e) {\n                if (e instanceof PackingError) {\n                    throw new PackingError(\"Error packing value \".concat(i, \": \").concat(e.message));\n                }\n                else {\n                    throw e;\n                }\n            }\n            ;\n        }\n        return offset;\n    };\n    VectorType.prototype.unpack = function (offset, view) {\n        var values = [];\n        while (offset % this.alignment !== 0) {\n            offset++;\n        }\n        for (var i = 0; i < this.nValues; i++) {\n            var _a = this.baseType.unpack(offset, view), newOffset = _a[0], value = _a[1];\n            offset = newOffset;\n            values.push(value);\n        }\n        return [offset, values];\n    };\n    return VectorType;\n}(PackingType));\nvar vec2 = /** @class */ (function (_super) {\n    __extends(vec2, _super);\n    function vec2(baseType) {\n        return _super.call(this, baseType, 2, 8) || this;\n    }\n    return vec2;\n}(VectorType));\nexport { vec2 };\nvar vec3 = /** @class */ (function (_super) {\n    __extends(vec3, _super);\n    function vec3(baseType) {\n        return _super.call(this, baseType, 3, 16) || this;\n    }\n    return vec3;\n}(VectorType));\nexport { vec3 };\nvar vec4 = /** @class */ (function (_super) {\n    __extends(vec4, _super);\n    function vec4(baseType) {\n        return _super.call(this, baseType, 4, 16) || this;\n    }\n    return vec4;\n}(VectorType));\nexport { vec4 };\nvar Struct = /** @class */ (function (_super) {\n    __extends(Struct, _super);\n    function Struct(members) {\n        var _this = this;\n        var alignment = Math.max.apply(Math, members.map(function (_a) {\n            var _name = _a[0], type = _a[1];\n            return type.alignment;\n        }));\n        var offset = 0;\n        for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {\n            var _a = members_1[_i], _ = _a[0], type = _a[1];\n            while (offset % type.alignment !== 0) {\n                offset++;\n            }\n            offset += type.size;\n        }\n        // SizeOf(S) = roundUp(AlignOf(S), justPastLastMember)\n        // where justPastLastMember = OffsetOfMember(S,N) + SizeOfMember(S,N)\n        var size = roundUp(offset, alignment);\n        _this = _super.call(this, size, alignment) || this;\n        _this.members = members;\n        return _this;\n    }\n    Struct.prototype.pack = function (offset, values, view) {\n        var expectedKeys = this.members.map(function (_a) {\n            var name = _a[0], _type = _a[1];\n            return name;\n        });\n        var actualKeys = Object.keys(values);\n        if (expectedKeys.length !== actualKeys.length) {\n            throw new PackingError(\"Expected values for \".concat(expectedKeys, \", got \").concat(actualKeys));\n        }\n        if (!expectedKeys.every(function (key) { return actualKeys.includes(key); })) {\n            throw new PackingError(\"Expected values for \".concat(expectedKeys, \", got \").concat(actualKeys));\n        }\n        var startingOffset = offset;\n        while (offset % this.alignment !== 0) {\n            offset++;\n        }\n        for (var _i = 0, _a = this.members; _i < _a.length; _i++) {\n            var _b = _a[_i], name_1 = _b[0], type = _b[1];\n            var value = values[name_1];\n            try {\n                offset = type.pack(offset, value, view);\n            }\n            catch (e) {\n                // error packing the thing inside\n                if (e instanceof PackingError) {\n                    throw new PackingError(\"Error packing value \".concat(name_1, \": \").concat(e.message));\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        offset += this.size - (offset - startingOffset);\n        return offset;\n    };\n    Struct.prototype.unpack = function (offset, view) {\n        var values = {};\n        var startingOffset = offset;\n        while (offset % this.alignment !== 0) {\n            offset++;\n        }\n        for (var _i = 0, _a = this.members; _i < _a.length; _i++) {\n            var _b = _a[_i], name_2 = _b[0], type = _b[1];\n            var _c = type.unpack(offset, view), newOffset = _c[0], value = _c[1];\n            offset = newOffset;\n            values[name_2] = value;\n        }\n        offset += this.size - (offset - startingOffset);\n        return [offset, values];\n    };\n    return Struct;\n}(PackingType));\nexport { Struct };\nvar StaticArray = /** @class */ (function (_super) {\n    __extends(StaticArray, _super);\n    function StaticArray(type, nElements) {\n        var _this = this;\n        var alignment = type.alignment;\n        var size = nElements * roundUp(type.size, type.alignment);\n        _this = _super.call(this, size, alignment) || this;\n        _this.type = type;\n        _this.nElements = nElements;\n        _this.stride = roundUp(type.size, type.alignment);\n        return _this;\n    }\n    StaticArray.prototype.pack = function (offset, values, view) {\n        if (!Array.isArray(values)) {\n            throw new PackingError(\"Expected array, got \".concat(values));\n        }\n        if (values.length !== this.nElements) {\n            throw new PackingError(\"Expected \".concat(this.nElements, \" values, got \").concat(values.length));\n        }\n        while (offset % this.alignment !== 0) {\n            offset++;\n        }\n        for (var i = 0; i < values.length; i++) {\n            try {\n                offset = this.type.pack(offset, values[i], view);\n            }\n            catch (e) {\n                if (e instanceof PackingError) {\n                    throw new PackingError(\"Error packing value \".concat(i, \": \").concat(e.message));\n                }\n                else {\n                    throw e;\n                }\n            }\n            offset += this.stride - this.type.size;\n        }\n        return offset;\n    };\n    StaticArray.prototype.unpack = function (offset, view) {\n        var values = [];\n        while (offset % this.alignment !== 0) {\n            offset++;\n        }\n        for (var i = 0; i < this.nElements; i++) {\n            var _a = this.type.unpack(offset, view), newOffset = _a[0], value = _a[1];\n            offset = newOffset;\n            values.push(value);\n            offset += this.stride - this.type.size;\n        }\n        return [offset, values];\n    };\n    return StaticArray;\n}(PackingType));\nexport { StaticArray };\nvar MatrixType = /** @class */ (function (_super) {\n    __extends(MatrixType, _super);\n    function MatrixType(baseType, nRows, nColumns) {\n        var _this = this;\n        var vecType;\n        if (nRows === 2) {\n            vecType = new vec2(baseType);\n        }\n        else if (nRows === 3) {\n            vecType = new vec3(baseType);\n        }\n        else if (nRows === 4) {\n            vecType = new vec4(baseType);\n        }\n        else {\n            throw new Error(\"Invalid number of rows: \".concat(nRows));\n        }\n        var arrayType = new StaticArray(vecType, nColumns);\n        _this = _super.call(this, arrayType.size, vecType.alignment) || this;\n        _this.baseType = baseType;\n        _this.nRows = nRows;\n        _this.nColumns = nColumns;\n        return _this;\n    }\n    MatrixType.prototype.pack = function (offset, values, view) {\n        if (!Array.isArray(values)) {\n            throw new PackingError(\"Expected array, got \".concat(values));\n        }\n        if (values.length !== this.nColumns) {\n            throw new PackingError(\"Expected \".concat(this.nColumns, \" columns, got \").concat(values.length));\n        }\n        while (offset % this.alignment !== 0) {\n            offset++;\n        }\n        var startOffset = offset;\n        for (var i = 0; i < values.length; i++) {\n            if (!Array.isArray(values[i])) {\n                throw new PackingError(\"Expected array, got \".concat(values[i]));\n            }\n            for (var j = 0; j < values[i].length; j++) {\n                try {\n                    offset = this.baseType.pack(offset, values[i][j], view);\n                }\n                catch (e) {\n                    if (e instanceof PackingError) {\n                        throw new PackingError(\"Error packing value \".concat(i, \",\").concat(j, \": \").concat(e.message));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        offset = startOffset + this.size;\n        return offset;\n    };\n    MatrixType.prototype.unpack = function (offset, view) {\n        while (offset % this.alignment !== 0) {\n            offset++;\n        }\n        var startOffset = offset;\n        var outerValues = [];\n        for (var i = 0; i < this.nColumns; i++) {\n            var innerValues = [];\n            for (var j = 0; j < this.nRows; j++) {\n                var _a = this.baseType.unpack(offset, view), newOffset = _a[0], value = _a[1];\n                offset = newOffset;\n                innerValues.push(value);\n            }\n            outerValues.push(innerValues);\n        }\n        offset += this.size - (offset - startOffset);\n        return [offset, outerValues];\n    };\n    return MatrixType;\n}(PackingType));\nvar mat4x4 = /** @class */ (function (_super) {\n    __extends(mat4x4, _super);\n    function mat4x4(baseType) {\n        return _super.call(this, baseType, 4, 4) || this;\n    }\n    return mat4x4;\n}(MatrixType));\nexport { mat4x4 };\n","import { StaticArray, Struct, vec3, vec4, f32 } from \"./packing\";\nexport function loadFileAsArrayBuffer(file) {\n    return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onload = function (event) {\n            if (!event.target || !event.target.result) {\n                reject('Failed to load file');\n                return;\n            }\n            if (typeof event.target.result === 'string') {\n                reject('Got a text file instead of a binary one');\n                return;\n            }\n            resolve(event.target.result);\n        };\n        reader.onerror = function (event) {\n            if (!event.target) {\n                reject('Failed to load file');\n                return;\n            }\n            reject(event.target.error);\n        };\n        reader.readAsArrayBuffer(file);\n    });\n}\nvar PackedGaussians = /** @class */ (function () {\n    function PackedGaussians(arrayBuffer) {\n        // decode the header\n        var _a = PackedGaussians.decodeHeader(arrayBuffer), vertexCount = _a[0], propertyTypes = _a[1], vertexData = _a[2];\n        this.numGaussians = vertexCount;\n        // figure out the SH degree from the number of coefficients\n        var nRestCoeffs = 0;\n        for (var propertyName in propertyTypes) {\n            if (propertyName.startsWith('f_rest_')) {\n                nRestCoeffs += 1;\n            }\n        }\n        var nCoeffsPerColor = nRestCoeffs / 3;\n        this.sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n        console.log('Detected degree', this.sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n        // figure out the order in which spherical harmonics should be read\n        var shFeatureOrder = [];\n        for (var rgb = 0; rgb < 3; ++rgb) {\n            shFeatureOrder.push(\"f_dc_\".concat(rgb));\n        }\n        for (var i = 0; i < nCoeffsPerColor; ++i) {\n            for (var rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(\"f_rest_\".concat(rgb * nCoeffsPerColor + i));\n            }\n        }\n        // define the layout of a single point\n        this.gaussianLayout = new Struct([\n            ['position', new vec3(f32)],\n            ['logScale', new vec3(f32)],\n            ['rotQuat', new vec4(f32)],\n            ['opacityLogit', f32],\n            ['shCoeffs', new StaticArray(new vec3(f32), this.nShCoeffs)],\n        ]);\n        // define the layout of the entire point cloud\n        this.gaussianArrayLayout = new StaticArray(this.gaussianLayout, vertexCount);\n        // pack the points\n        this.positionsArray = [];\n        this.gaussiansBuffer = new ArrayBuffer(this.gaussianArrayLayout.size);\n        var gaussianWriteView = new DataView(this.gaussiansBuffer);\n        var readOffset = 0;\n        var gaussianWriteOffset = 0;\n        for (var i = 0; i < vertexCount; i++) {\n            var _b = this.readRawVertex(readOffset, vertexData, propertyTypes), newReadOffset = _b[0], rawVertex = _b[1];\n            readOffset = newReadOffset;\n            gaussianWriteOffset = this.gaussianLayout.pack(gaussianWriteOffset, this.arrangeVertex(rawVertex, shFeatureOrder), gaussianWriteView);\n            this.positionsArray.push([rawVertex.x, rawVertex.y, rawVertex.z]);\n        }\n    }\n    PackedGaussians.decodeHeader = function (plyArrayBuffer) {\n        var decoder = new TextDecoder();\n        var headerOffset = 0;\n        var headerText = '';\n        while (true) {\n            var headerChunk = new Uint8Array(plyArrayBuffer, headerOffset, 50);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += 50;\n            if (headerText.includes('end_header')) {\n                break;\n            }\n        }\n        var headerLines = headerText.split('\\n');\n        var vertexCount = 0;\n        var propertyTypes = {};\n        for (var i = 0; i < headerLines.length; i++) {\n            var line = headerLines[i].trim();\n            if (line.startsWith('element vertex')) {\n                var vertexCountMatch = line.match(/\\d+/);\n                if (vertexCountMatch) {\n                    vertexCount = parseInt(vertexCountMatch[0]);\n                }\n            }\n            else if (line.startsWith('property')) {\n                var propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    var propertyType = propertyMatch[2];\n                    var propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            }\n            else if (line === 'end_header') {\n                break;\n            }\n        }\n        var vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\n        var vertexData = new DataView(plyArrayBuffer, vertexByteOffset);\n        return [\n            vertexCount,\n            propertyTypes,\n            vertexData,\n        ];\n    };\n    PackedGaussians.prototype.readRawVertex = function (offset, vertexData, propertyTypes) {\n        var rawVertex = {};\n        for (var property in propertyTypes) {\n            var propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset, true);\n                offset += Float32Array.BYTES_PER_ELEMENT;\n            }\n            else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset) / 255.0;\n                offset += Uint8Array.BYTES_PER_ELEMENT;\n            }\n        }\n        return [offset, rawVertex];\n    };\n    Object.defineProperty(PackedGaussians.prototype, \"nShCoeffs\", {\n        get: function () {\n            if (this.sphericalHarmonicsDegree === 0) {\n                return 1;\n            }\n            else if (this.sphericalHarmonicsDegree === 1) {\n                return 4;\n            }\n            else if (this.sphericalHarmonicsDegree === 2) {\n                return 9;\n            }\n            else if (this.sphericalHarmonicsDegree === 3) {\n                return 16;\n            }\n            else {\n                throw new Error(\"Unsupported SH degree: \".concat(this.sphericalHarmonicsDegree));\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    PackedGaussians.prototype.arrangeVertex = function (rawVertex, shFeatureOrder) {\n        var shCoeffs = [];\n        for (var i = 0; i < this.nShCoeffs; ++i) {\n            var coeff = [];\n            for (var j = 0; j < 3; ++j) {\n                var coeffName = shFeatureOrder[i * 3 + j];\n                coeff.push(rawVertex[coeffName]);\n            }\n            shCoeffs.push(coeff);\n        }\n        var arrangedVertex = {\n            position: [rawVertex.x, rawVertex.y, rawVertex.z],\n            logScale: [rawVertex.scale_0, rawVertex.scale_1, rawVertex.scale_2],\n            rotQuat: [rawVertex.rot_0, rawVertex.rot_1, rawVertex.rot_2, rawVertex.rot_3],\n            opacityLogit: rawVertex.opacity,\n            shCoeffs: shCoeffs,\n        };\n        return arrangedVertex;\n    };\n    return PackedGaussians;\n}());\nexport { PackedGaussians };\n","/* wgpu-matrix@2.5.0, license MIT */\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nlet EPSILON = 0.000001;\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nfunction setEpsilon(v) {\n    const old = EPSILON;\n    EPSILON = v;\n    return old;\n}\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nfunction degToRad(degrees) {\n    return degrees * Math.PI / 180;\n}\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nfunction radToDeg(radians) {\n    return radians * 180 / Math.PI;\n}\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nfunction lerp$4(a, b, t) {\n    return a + (b - a) * t;\n}\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nfunction inverseLerp(a, b, v) {\n    const d = b - a;\n    return (Math.abs(b - a) < EPSILON)\n        ? a\n        : (v - a) / d;\n}\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nfunction euclideanModulo(n, m) {\n    return ((n % m) + m) % m;\n}\n\nvar utils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    get EPSILON () { return EPSILON; },\n    setEpsilon: setEpsilon,\n    degToRad: degToRad,\n    radToDeg: radToDeg,\n    lerp: lerp$4,\n    inverseLerp: inverseLerp,\n    euclideanModulo: euclideanModulo\n});\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n *\n * Vec2 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec2. In other words you can do this\n *\n *     const v = vec2.cross(v1, v2);  // Creates a new Vec2 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec2.create();\n *     vec2.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec2.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nlet VecType$2 = Float32Array;\n/**\n * Sets the type this library creates for a Vec2\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Vec2\n */\nfunction setDefaultType$6(ctor) {\n    const oldType = VecType$2;\n    VecType$2 = ctor;\n    return oldType;\n}\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values.\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Vec2's specified type\n * it would be faster to use\n *\n * ```\n * const v = vec2.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Vec2Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `vec2.create` is usually used\n * to create a Vec2 to be filled out as in\n *\n * ```\n * const sum = vec2.create();\n * vec2.add(v1, v2, sum);\n * ```\n *\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nfunction create$5(x = 0, y = 0) {\n    const dst = new VecType$2(2);\n    if (x !== undefined) {\n        dst[0] = x;\n        if (y !== undefined) {\n            dst[1] = y;\n        }\n    }\n    return dst;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @returns the created vector\n */\nconst fromValues$3 = create$5;\n/**\n * Sets the values of a Vec2\n * Also see {@link vec2.create} and {@link vec2.copy}\n *\n * @param x first value\n * @param y second value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set$5(x, y, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = x;\n    dst[1] = y;\n    return dst;\n}\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil$2(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.ceil(v[0]);\n    dst[1] = Math.ceil(v[1]);\n    return dst;\n}\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor$2(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.floor(v[0]);\n    dst[1] = Math.floor(v[1]);\n    return dst;\n}\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round$2(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.round(v[0]);\n    dst[1] = Math.round(v[1]);\n    return dst;\n}\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp$2(v, min = 0, max = 1, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.min(max, Math.max(min, v[0]));\n    dst[1] = Math.min(max, Math.max(min, v[1]));\n    return dst;\n}\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add$3(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] + b[0];\n    dst[1] = a[1] + b[1];\n    return dst;\n}\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled$2(a, b, scale, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] + b[0] * scale;\n    dst[1] = a[1] + b[1] * scale;\n    return dst;\n}\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nfunction angle$2(a, b) {\n    const ax = a[0];\n    const ay = a[1];\n    const bx = a[0];\n    const by = a[1];\n    const mag1 = Math.sqrt(ax * ax + ay * ay);\n    const mag2 = Math.sqrt(bx * bx + by * by);\n    const mag = mag1 * mag2;\n    const cosine = mag && dot$3(a, b) / mag;\n    return Math.acos(cosine);\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract$3(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] - b[0];\n    dst[1] = a[1] - b[1];\n    return dst;\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub$3 = subtract$3;\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately$5(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON;\n}\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals$5(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp$3(a, b, t, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] + t * (b[0] - a[0]);\n    dst[1] = a[1] + t * (b[1] - a[1]);\n    return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV$2(a, b, t, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] + t[0] * (b[0] - a[0]);\n    dst[1] = a[1] + t[1] * (b[1] - a[1]);\n    return dst;\n}\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max$2(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.max(a[0], b[0]);\n    dst[1] = Math.max(a[1], b[1]);\n    return dst;\n}\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min$2(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = Math.min(a[0], b[0]);\n    dst[1] = Math.min(a[1], b[1]);\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar$3(v, k, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = v[0] * k;\n    dst[1] = v[1] * k;\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale$5 = mulScalar$3;\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar$3(v, k, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = v[0] / k;\n    dst[1] = v[1] / k;\n    return dst;\n}\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse$5(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = 1 / v[0];\n    dst[1] = 1 / v[1];\n    return dst;\n}\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert$4 = inverse$5;\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nfunction cross$1(a, b, dst) {\n    dst = dst || new VecType$2(3);\n    const z = a[0] * b[1] - a[1] * b[0];\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = z;\n    return dst;\n}\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot$3(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length$3(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    return Math.sqrt(v0 * v0 + v1 * v1);\n}\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len$3 = length$3;\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq$3(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    return v0 * v0 + v1 * v1;\n}\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq$3 = lengthSq$3;\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance$2(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    return Math.sqrt(dx * dx + dy * dy);\n}\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist$2 = distance$2;\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq$2(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    return dx * dx + dy * dy;\n}\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq$2 = distanceSq$2;\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize$3(v, dst) {\n    dst = dst || new VecType$2(2);\n    const v0 = v[0];\n    const v1 = v[1];\n    const len = Math.sqrt(v0 * v0 + v1 * v1);\n    if (len > 0.00001) {\n        dst[0] = v0 / len;\n        dst[1] = v1 / len;\n    }\n    else {\n        dst[0] = 0;\n        dst[1] = 0;\n    }\n    return dst;\n}\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate$4(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = -v[0];\n    dst[1] = -v[1];\n    return dst;\n}\n/**\n * Copies a vector. (same as {@link vec2.clone})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy$5(v, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = v[0];\n    dst[1] = v[1];\n    return dst;\n}\n/**\n * Clones a vector. (same as {@link vec2.copy})\n * Also see {@link vec2.create} and {@link vec2.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone$5 = copy$5;\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply$5(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] * b[0];\n    dst[1] = a[1] * b[1];\n    return dst;\n}\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul$5 = multiply$5;\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide$2(a, b, dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = a[0] / b[0];\n    dst[1] = a[1] / b[1];\n    return dst;\n}\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div$2 = divide$2;\n/**\n * Creates a random unit vector * scale\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nfunction random$1(scale = 1, dst) {\n    dst = dst || new VecType$2(2);\n    const angle = Math.random() * 2 * Math.PI;\n    dst[0] = Math.cos(angle) * scale;\n    dst[1] = Math.sin(angle) * scale;\n    return dst;\n}\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero$2(dst) {\n    dst = dst || new VecType$2(2);\n    dst[0] = 0;\n    dst[1] = 0;\n    return dst;\n}\n/**\n * transform Vec2 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4$2(v, m, dst) {\n    dst = dst || new VecType$2(2);\n    const x = v[0];\n    const y = v[1];\n    dst[0] = x * m[0] + y * m[4] + m[12];\n    dst[1] = x * m[1] + y * m[5] + m[13];\n    return dst;\n}\n/**\n * Transforms vec4 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional Vec2 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat3$1(v, m, dst) {\n    dst = dst || new VecType$2(2);\n    const x = v[0];\n    const y = v[1];\n    dst[0] = m[0] * x + m[4] * y + m[8];\n    dst[1] = m[1] * x + m[5] * y + m[9];\n    return dst;\n}\n\nvar vec2Impl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    create: create$5,\n    setDefaultType: setDefaultType$6,\n    fromValues: fromValues$3,\n    set: set$5,\n    ceil: ceil$2,\n    floor: floor$2,\n    round: round$2,\n    clamp: clamp$2,\n    add: add$3,\n    addScaled: addScaled$2,\n    angle: angle$2,\n    subtract: subtract$3,\n    sub: sub$3,\n    equalsApproximately: equalsApproximately$5,\n    equals: equals$5,\n    lerp: lerp$3,\n    lerpV: lerpV$2,\n    max: max$2,\n    min: min$2,\n    mulScalar: mulScalar$3,\n    scale: scale$5,\n    divScalar: divScalar$3,\n    inverse: inverse$5,\n    invert: invert$4,\n    cross: cross$1,\n    dot: dot$3,\n    length: length$3,\n    len: len$3,\n    lengthSq: lengthSq$3,\n    lenSq: lenSq$3,\n    distance: distance$2,\n    dist: dist$2,\n    distanceSq: distanceSq$2,\n    distSq: distSq$2,\n    normalize: normalize$3,\n    negate: negate$4,\n    copy: copy$5,\n    clone: clone$5,\n    multiply: multiply$5,\n    mul: mul$5,\n    divide: divide$2,\n    div: div$2,\n    random: random$1,\n    zero: zero$2,\n    transformMat4: transformMat4$2,\n    transformMat3: transformMat3$1\n});\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * 3x3 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat3.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat3.create();\n *     mat3.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat3.identity();\n *     const trans = mat3.translation([1, 2, 3]);\n *     mat3.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\nlet MatType$1 = Float32Array;\n// This mess is because with Mat3 we have 3 unused elements.\n// For Float32Array and Float64Array that's not an issue\n// but for Array it's troublesome\nconst ctorMap = new Map([\n    [Float32Array, () => new Float32Array(12)],\n    [Float64Array, () => new Float64Array(12)],\n    [Array, () => new Array(12).fill(0)],\n]);\nlet newMat3 = ctorMap.get(Float32Array);\n/**\n * Sets the type this library creates for a Mat3\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Mat3\n */\nfunction setDefaultType$5(ctor) {\n    const oldType = MatType$1;\n    MatType$1 = ctor;\n    newMat3 = ctorMap.get(ctor);\n    return oldType;\n}\n/**\n * Create a Mat3 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat3's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat3.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Mat3Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `mat3.create` is usually used\n * to create a Mat3 to be filled out as in\n *\n * ```\n * const m = mat3.create();\n * mat3.perspective(fov, aspect, near, far, m);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @returns matrix created from values.\n */\nfunction create$4(v0, v1, v2, v3, v4, v5, v6, v7, v8) {\n    const dst = newMat3();\n    // to make the array homogenous\n    dst[3] = 0;\n    dst[7] = 0;\n    dst[11] = 0;\n    if (v0 !== undefined) {\n        dst[0] = v0;\n        if (v1 !== undefined) {\n            dst[1] = v1;\n            if (v2 !== undefined) {\n                dst[2] = v2;\n                if (v3 !== undefined) {\n                    dst[4] = v3;\n                    if (v4 !== undefined) {\n                        dst[5] = v4;\n                        if (v5 !== undefined) {\n                            dst[6] = v5;\n                            if (v6 !== undefined) {\n                                dst[8] = v6;\n                                if (v7 !== undefined) {\n                                    dst[9] = v7;\n                                    if (v8 !== undefined) {\n                                        dst[10] = v8;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Sets the values of a Mat3\n * Also see {@link mat3.create} and {@link mat3.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 set from values.\n */\nfunction set$4(v0, v1, v2, v3, v4, v5, v6, v7, v8, dst) {\n    dst = dst || newMat3();\n    dst[0] = v0;\n    dst[1] = v1;\n    dst[2] = v2;\n    dst[3] = 0;\n    dst[4] = v3;\n    dst[5] = v4;\n    dst[6] = v5;\n    dst[7] = 0;\n    dst[8] = v6;\n    dst[9] = v7;\n    dst[10] = v8;\n    dst[11] = 0;\n    return dst;\n}\n/**\n * Creates a Mat3 from the upper left 3x3 part of a Mat4\n * @param m4 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from m4\n */\nfunction fromMat4(m4, dst) {\n    dst = dst || newMat3();\n    dst[0] = m4[0];\n    dst[1] = m4[1];\n    dst[2] = m4[2];\n    dst[3] = 0;\n    dst[4] = m4[4];\n    dst[5] = m4[5];\n    dst[6] = m4[6];\n    dst[7] = 0;\n    dst[8] = m4[8];\n    dst[9] = m4[9];\n    dst[10] = m4[10];\n    dst[11] = 0;\n    return dst;\n}\n/**\n * Creates a Mat3 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat3 made from q\n */\nfunction fromQuat$1(q, dst) {\n    dst = dst || newMat3();\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    dst[0] = 1 - yy - zz;\n    dst[1] = yx + wz;\n    dst[2] = zx - wy;\n    dst[3] = 0;\n    dst[4] = yx - wz;\n    dst[5] = 1 - xx - zz;\n    dst[6] = zy + wx;\n    dst[7] = 0;\n    dst[8] = zx + wy;\n    dst[9] = zy - wx;\n    dst[10] = 1 - xx - yy;\n    dst[11] = 0;\n    return dst;\n}\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nfunction negate$3(m, dst) {\n    dst = dst || newMat3();\n    dst[0] = -m[0];\n    dst[1] = -m[1];\n    dst[2] = -m[2];\n    dst[4] = -m[4];\n    dst[5] = -m[5];\n    dst[6] = -m[6];\n    dst[8] = -m[8];\n    dst[9] = -m[9];\n    dst[10] = -m[10];\n    return dst;\n}\n/**\n * Copies a matrix. (same as {@link mat3.clone})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nfunction copy$4(m, dst) {\n    dst = dst || newMat3();\n    dst[0] = m[0];\n    dst[1] = m[1];\n    dst[2] = m[2];\n    dst[4] = m[4];\n    dst[5] = m[5];\n    dst[6] = m[6];\n    dst[8] = m[8];\n    dst[9] = m[9];\n    dst[10] = m[10];\n    return dst;\n}\n/**\n * Copies a matrix (same as {@link mat3.copy})\n * Also see {@link mat3.create} and {@link mat3.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nconst clone$4 = copy$4;\n/**\n * Check if 2 matrices are approximately equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are approximately equal\n */\nfunction equalsApproximately$4(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON &&\n        Math.abs(a[2] - b[2]) < EPSILON &&\n        Math.abs(a[4] - b[4]) < EPSILON &&\n        Math.abs(a[5] - b[5]) < EPSILON &&\n        Math.abs(a[6] - b[6]) < EPSILON &&\n        Math.abs(a[8] - b[8]) < EPSILON &&\n        Math.abs(a[9] - b[9]) < EPSILON &&\n        Math.abs(a[10] - b[10]) < EPSILON;\n}\n/**\n * Check if 2 matrices are exactly equal\n * @param a Operand matrix.\n * @param b Operand matrix.\n * @returns true if matrices are exactly equal\n */\nfunction equals$4(a, b) {\n    return a[0] === b[0] &&\n        a[1] === b[1] &&\n        a[2] === b[2] &&\n        a[4] === b[4] &&\n        a[5] === b[5] &&\n        a[6] === b[6] &&\n        a[8] === b[8] &&\n        a[9] === b[9] &&\n        a[10] === b[10];\n}\n/**\n * Creates a 3-by-3 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 3-by-3 identity matrix.\n */\nfunction identity$2(dst) {\n    dst = dst || newMat3();\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nfunction transpose$1(m, dst) {\n    dst = dst || newMat3();\n    if (dst === m) {\n        let t;\n        // 0 1 2\n        // 4 5 6\n        // 8 9 10\n        t = m[1];\n        m[1] = m[4];\n        m[4] = t;\n        t = m[2];\n        m[2] = m[8];\n        m[8] = t;\n        t = m[6];\n        m[6] = m[9];\n        m[9] = t;\n        return dst;\n    }\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    dst[0] = m00;\n    dst[1] = m10;\n    dst[2] = m20;\n    dst[4] = m01;\n    dst[5] = m11;\n    dst[6] = m21;\n    dst[8] = m02;\n    dst[9] = m12;\n    dst[10] = m22;\n    return dst;\n}\n/**\n * Computes the inverse of a 3-by-3 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nfunction inverse$4(m, dst) {\n    dst = dst || newMat3();\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const b01 = m22 * m11 - m12 * m21;\n    const b11 = -m22 * m10 + m12 * m20;\n    const b21 = m21 * m10 - m11 * m20;\n    const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n    dst[0] = b01 * invDet;\n    dst[1] = (-m22 * m01 + m02 * m21) * invDet;\n    dst[2] = (m12 * m01 - m02 * m11) * invDet;\n    dst[4] = b11 * invDet;\n    dst[5] = (m22 * m00 - m02 * m20) * invDet;\n    dst[6] = (-m12 * m00 + m02 * m10) * invDet;\n    dst[8] = b21 * invDet;\n    dst[9] = (-m21 * m00 + m01 * m20) * invDet;\n    dst[10] = (m11 * m00 - m01 * m10) * invDet;\n    return dst;\n}\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nfunction determinant$1(m) {\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    return m00 * (m11 * m22 - m21 * m12) -\n        m10 * (m01 * m22 - m21 * m02) +\n        m20 * (m01 * m12 - m11 * m02);\n}\n/**\n * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nconst invert$3 = inverse$4;\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nfunction multiply$4(a, b, dst) {\n    dst = dst || newMat3();\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a10 = a[4 + 0];\n    const a11 = a[4 + 1];\n    const a12 = a[4 + 2];\n    const a20 = a[8 + 0];\n    const a21 = a[8 + 1];\n    const a22 = a[8 + 2];\n    const b00 = b[0];\n    const b01 = b[1];\n    const b02 = b[2];\n    const b10 = b[4 + 0];\n    const b11 = b[4 + 1];\n    const b12 = b[4 + 2];\n    const b20 = b[8 + 0];\n    const b21 = b[8 + 1];\n    const b22 = b[8 + 2];\n    dst[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    dst[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    dst[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    dst[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    dst[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    dst[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    dst[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    dst[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    dst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    return dst;\n}\n/**\n * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nconst mul$4 = multiply$4;\n/**\n * Sets the translation component of a 3-by-3 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nfunction setTranslation$1(a, v, dst) {\n    dst = dst || identity$2();\n    if (a !== dst) {\n        dst[0] = a[0];\n        dst[1] = a[1];\n        dst[2] = a[2];\n        dst[4] = a[4];\n        dst[5] = a[5];\n        dst[6] = a[6];\n    }\n    dst[8] = v[0];\n    dst[9] = v[1];\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Returns the translation component of a 3-by-3 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation$2(m, dst) {\n    dst = dst || create$5();\n    dst[0] = m[8];\n    dst[1] = m[9];\n    return dst;\n}\n/**\n * Returns an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y,\n * @returns The axis component of m.\n */\nfunction getAxis$2(m, axis, dst) {\n    dst = dst || create$5();\n    const off = axis * 4;\n    dst[0] = m[off + 0];\n    dst[1] = m[off + 1];\n    return dst;\n}\n/**\n * Sets an axis of a 3x3 matrix as a vector with 2 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nfunction setAxis$1(m, v, axis, dst) {\n    if (dst !== m) {\n        dst = copy$4(m, dst);\n    }\n    const off = axis * 4;\n    dst[off + 0] = v[0];\n    dst[off + 1] = v[1];\n    return dst;\n}\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction getScaling$2(m, dst) {\n    dst = dst || create$5();\n    const xx = m[0];\n    const xy = m[1];\n    const yx = m[4];\n    const yy = m[5];\n    dst[0] = Math.sqrt(xx * xx + xy * xy);\n    dst[1] = Math.sqrt(yx * yx + yy * yy);\n    return dst;\n}\n/**\n * Creates a 3-by-3 matrix which translates by the given vector v.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nfunction translation$1(v, dst) {\n    dst = dst || newMat3();\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[8] = v[0];\n    dst[9] = v[1];\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Translates the given 3-by-3 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nfunction translate$1(m, v, dst) {\n    dst = dst || newMat3();\n    const v0 = v[0];\n    const v1 = v[1];\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    if (m !== dst) {\n        dst[0] = m00;\n        dst[1] = m01;\n        dst[2] = m02;\n        dst[4] = m10;\n        dst[5] = m11;\n        dst[6] = m12;\n    }\n    dst[8] = m00 * v0 + m10 * v1 + m20;\n    dst[9] = m01 * v0 + m11 * v1 + m21;\n    dst[10] = m02 * v0 + m12 * v1 + m22;\n    return dst;\n}\n/**\n * Creates a 3-by-3 matrix which rotates  by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotation$1(angleInRadians, dst) {\n    dst = dst || newMat3();\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c;\n    dst[1] = s;\n    dst[2] = 0;\n    dst[4] = -s;\n    dst[5] = c;\n    dst[6] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Rotates the given 3-by-3 matrix  by the given angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotate$1(m, angleInRadians, dst) {\n    dst = dst || newMat3();\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c * m00 + s * m10;\n    dst[1] = c * m01 + s * m11;\n    dst[2] = c * m02 + s * m12;\n    dst[4] = c * m10 - s * m00;\n    dst[5] = c * m11 - s * m01;\n    dst[6] = c * m12 - s * m02;\n    if (m !== dst) {\n        dst[8] = m[8];\n        dst[9] = m[9];\n        dst[10] = m[10];\n    }\n    return dst;\n}\n/**\n * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     2 entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction scaling$1(v, dst) {\n    dst = dst || newMat3();\n    dst[0] = v[0];\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[4] = 0;\n    dst[5] = v[1];\n    dst[6] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of 2 entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction scale$4(m, v, dst) {\n    dst = dst || newMat3();\n    const v0 = v[0];\n    const v1 = v[1];\n    dst[0] = v0 * m[0 * 4 + 0];\n    dst[1] = v0 * m[0 * 4 + 1];\n    dst[2] = v0 * m[0 * 4 + 2];\n    dst[4] = v1 * m[1 * 4 + 0];\n    dst[5] = v1 * m[1 * 4 + 1];\n    dst[6] = v1 * m[1 * 4 + 2];\n    if (m !== dst) {\n        dst[8] = m[8];\n        dst[9] = m[9];\n        dst[10] = m[10];\n    }\n    return dst;\n}\n/**\n * Creates a 3-by-3 matrix which scales uniformly in each dimension\n * @param s - Amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction uniformScaling$1(s, dst) {\n    dst = dst || newMat3();\n    dst[0] = s;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[4] = 0;\n    dst[5] = s;\n    dst[6] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    return dst;\n}\n/**\n * Scales the given 3-by-3 matrix in each dimension by an amount\n * given.\n * @param m - The matrix to be modified.\n * @param s - Amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction uniformScale$1(m, s, dst) {\n    dst = dst || newMat3();\n    dst[0] = s * m[0 * 4 + 0];\n    dst[1] = s * m[0 * 4 + 1];\n    dst[2] = s * m[0 * 4 + 2];\n    dst[4] = s * m[1 * 4 + 0];\n    dst[5] = s * m[1 * 4 + 1];\n    dst[6] = s * m[1 * 4 + 2];\n    if (m !== dst) {\n        dst[8] = m[8];\n        dst[9] = m[9];\n        dst[10] = m[10];\n    }\n    return dst;\n}\n\nvar mat3Impl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    setDefaultType: setDefaultType$5,\n    create: create$4,\n    set: set$4,\n    fromMat4: fromMat4,\n    fromQuat: fromQuat$1,\n    negate: negate$3,\n    copy: copy$4,\n    clone: clone$4,\n    equalsApproximately: equalsApproximately$4,\n    equals: equals$4,\n    identity: identity$2,\n    transpose: transpose$1,\n    inverse: inverse$4,\n    determinant: determinant$1,\n    invert: invert$3,\n    multiply: multiply$4,\n    mul: mul$4,\n    setTranslation: setTranslation$1,\n    getTranslation: getTranslation$2,\n    getAxis: getAxis$2,\n    setAxis: setAxis$1,\n    getScaling: getScaling$2,\n    translation: translation$1,\n    translate: translate$1,\n    rotation: rotation$1,\n    rotate: rotate$1,\n    scaling: scaling$1,\n    scale: scale$4,\n    uniformScaling: uniformScaling$1,\n    uniformScale: uniformScale$1\n});\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n *\n * Vec3 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Vec3`. In other words you can do this\n *\n *     const v = vec3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec3.create();\n *     vec3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nlet VecType$1 = Float32Array;\n/**\n * Sets the type this library creates for a Vec3\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Vec3\n */\nfunction setDefaultType$4(ctor) {\n    const oldType = VecType$1;\n    VecType$1 = ctor;\n    return oldType;\n}\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nfunction create$3(x, y, z) {\n    const dst = new VecType$1(3);\n    if (x !== undefined) {\n        dst[0] = x;\n        if (y !== undefined) {\n            dst[1] = y;\n            if (z !== undefined) {\n                dst[2] = z;\n            }\n        }\n    }\n    return dst;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @returns the created vector\n */\nconst fromValues$2 = create$3;\n/**\n * Sets the values of a Vec3\n * Also see {@link vec3.create} and {@link vec3.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set$3(x, y, z, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = x;\n    dst[1] = y;\n    dst[2] = z;\n    return dst;\n}\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil$1(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.ceil(v[0]);\n    dst[1] = Math.ceil(v[1]);\n    dst[2] = Math.ceil(v[2]);\n    return dst;\n}\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor$1(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.floor(v[0]);\n    dst[1] = Math.floor(v[1]);\n    dst[2] = Math.floor(v[2]);\n    return dst;\n}\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round$1(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.round(v[0]);\n    dst[1] = Math.round(v[1]);\n    dst[2] = Math.round(v[2]);\n    return dst;\n}\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp$1(v, min = 0, max = 1, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.min(max, Math.max(min, v[0]));\n    dst[1] = Math.min(max, Math.max(min, v[1]));\n    dst[2] = Math.min(max, Math.max(min, v[2]));\n    return dst;\n}\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add$2(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] + b[0];\n    dst[1] = a[1] + b[1];\n    dst[2] = a[2] + b[2];\n    return dst;\n}\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled$1(a, b, scale, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] + b[0] * scale;\n    dst[1] = a[1] + b[1] * scale;\n    dst[2] = a[2] + b[2] * scale;\n    return dst;\n}\n/**\n * Returns the angle in radians between two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns The angle in radians between the 2 vectors.\n */\nfunction angle$1(a, b) {\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const bx = a[0];\n    const by = a[1];\n    const bz = a[2];\n    const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n    const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n    const mag = mag1 * mag2;\n    const cosine = mag && dot$2(a, b) / mag;\n    return Math.acos(cosine);\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract$2(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] - b[0];\n    dst[1] = a[1] - b[1];\n    dst[2] = a[2] - b[2];\n    return dst;\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub$2 = subtract$2;\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately$3(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON &&\n        Math.abs(a[2] - b[2]) < EPSILON;\n}\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals$3(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp$2(a, b, t, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] + t * (b[0] - a[0]);\n    dst[1] = a[1] + t * (b[1] - a[1]);\n    dst[2] = a[2] + t * (b[2] - a[2]);\n    return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV$1(a, b, t, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] + t[0] * (b[0] - a[0]);\n    dst[1] = a[1] + t[1] * (b[1] - a[1]);\n    dst[2] = a[2] + t[2] * (b[2] - a[2]);\n    return dst;\n}\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max$1(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.max(a[0], b[0]);\n    dst[1] = Math.max(a[1], b[1]);\n    dst[2] = Math.max(a[2], b[2]);\n    return dst;\n}\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min$1(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = Math.min(a[0], b[0]);\n    dst[1] = Math.min(a[1], b[1]);\n    dst[2] = Math.min(a[2], b[2]);\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar$2(v, k, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = v[0] * k;\n    dst[1] = v[1] * k;\n    dst[2] = v[2] * k;\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale$3 = mulScalar$2;\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar$2(v, k, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = v[0] / k;\n    dst[1] = v[1] / k;\n    dst[2] = v[2] / k;\n    return dst;\n}\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse$3(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = 1 / v[0];\n    dst[1] = 1 / v[1];\n    dst[2] = 1 / v[2];\n    return dst;\n}\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert$2 = inverse$3;\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of a cross b.\n */\nfunction cross(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    const t1 = a[2] * b[0] - a[0] * b[2];\n    const t2 = a[0] * b[1] - a[1] * b[0];\n    dst[0] = a[1] * b[2] - a[2] * b[1];\n    dst[1] = t1;\n    dst[2] = t2;\n    return dst;\n}\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot$2(a, b) {\n    return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length$2(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n}\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len$2 = length$2;\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq$2(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    return v0 * v0 + v1 * v1 + v2 * v2;\n}\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq$2 = lengthSq$2;\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance$1(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    const dz = a[2] - b[2];\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist$1 = distance$1;\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq$1(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    const dz = a[2] - b[2];\n    return dx * dx + dy * dy + dz * dz;\n}\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq$1 = distanceSq$1;\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize$2(v, dst) {\n    dst = dst || new VecType$1(3);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n    if (len > 0.00001) {\n        dst[0] = v0 / len;\n        dst[1] = v1 / len;\n        dst[2] = v2 / len;\n    }\n    else {\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = 0;\n    }\n    return dst;\n}\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate$2(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = -v[0];\n    dst[1] = -v[1];\n    dst[2] = -v[2];\n    return dst;\n}\n/**\n * Copies a vector. (same as {@link vec3.clone})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy$3(v, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = v[0];\n    dst[1] = v[1];\n    dst[2] = v[2];\n    return dst;\n}\n/**\n * Clones a vector. (same as {@link vec3.copy})\n * Also see {@link vec3.create} and {@link vec3.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone$3 = copy$3;\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply$3(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] * b[0];\n    dst[1] = a[1] * b[1];\n    dst[2] = a[2] * b[2];\n    return dst;\n}\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul$3 = multiply$3;\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide$1(a, b, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = a[0] / b[0];\n    dst[1] = a[1] / b[1];\n    dst[2] = a[2] / b[2];\n    return dst;\n}\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div$1 = divide$1;\n/**\n * Creates a random vector\n * @param scale - Default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The random vector.\n */\nfunction random(scale = 1, dst) {\n    dst = dst || new VecType$1(3);\n    const angle = Math.random() * 2 * Math.PI;\n    const z = Math.random() * 2 - 1;\n    const zScale = Math.sqrt(1 - z * z) * scale;\n    dst[0] = Math.cos(angle) * zScale;\n    dst[1] = Math.sin(angle) * zScale;\n    dst[2] = z * scale;\n    return dst;\n}\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero$1(dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    return dst;\n}\n/**\n * transform vec3 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4$1(v, m, dst) {\n    dst = dst || new VecType$1(3);\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n    dst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    dst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    dst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return dst;\n}\n/**\n * Transform vec4 by upper 3x3 matrix inside 4x4 matrix.\n * @param v - The direction.\n * @param m - The matrix.\n * @param dst - optional Vec3 to store result. If not passed a new one is created.\n * @returns The transformed vector.\n */\nfunction transformMat4Upper3x3(v, m, dst) {\n    dst = dst || new VecType$1(3);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n    dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n    dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n    return dst;\n}\n/**\n * Transforms vec3 by 3x3 matrix\n *\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat3(v, m, dst) {\n    dst = dst || new VecType$1(3);\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    dst[0] = x * m[0] + y * m[4] + z * m[8];\n    dst[1] = x * m[1] + y * m[5] + z * m[9];\n    dst[2] = x * m[2] + y * m[6] + z * m[10];\n    return dst;\n}\n/**\n * Transforms vec3 by Quaternion\n * @param v - the vector to transform\n * @param q - the quaternion to transform by\n * @param dst - optional vec3 to store result. If not passed a new one is created.\n * @returns the transformed\n */\nfunction transformQuat(v, q, dst) {\n    dst = dst || new VecType$1(3);\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const w2 = q[3] * 2;\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    const uvX = qy * z - qz * y;\n    const uvY = qz * x - qx * z;\n    const uvZ = qx * y - qy * x;\n    dst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n    dst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n    dst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n    return dst;\n}\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation$1(m, dst) {\n    dst = dst || new VecType$1(3);\n    dst[0] = m[12];\n    dst[1] = m[13];\n    dst[2] = m[14];\n    return dst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nfunction getAxis$1(m, axis, dst) {\n    dst = dst || new VecType$1(3);\n    const off = axis * 4;\n    dst[0] = m[off + 0];\n    dst[1] = m[off + 1];\n    dst[2] = m[off + 2];\n    return dst;\n}\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction getScaling$1(m, dst) {\n    dst = dst || new VecType$1(3);\n    const xx = m[0];\n    const xy = m[1];\n    const xz = m[2];\n    const yx = m[4];\n    const yy = m[5];\n    const yz = m[6];\n    const zx = m[8];\n    const zy = m[9];\n    const zz = m[10];\n    dst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n    dst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n    dst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n    return dst;\n}\n\nvar vec3Impl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    create: create$3,\n    setDefaultType: setDefaultType$4,\n    fromValues: fromValues$2,\n    set: set$3,\n    ceil: ceil$1,\n    floor: floor$1,\n    round: round$1,\n    clamp: clamp$1,\n    add: add$2,\n    addScaled: addScaled$1,\n    angle: angle$1,\n    subtract: subtract$2,\n    sub: sub$2,\n    equalsApproximately: equalsApproximately$3,\n    equals: equals$3,\n    lerp: lerp$2,\n    lerpV: lerpV$1,\n    max: max$1,\n    min: min$1,\n    mulScalar: mulScalar$2,\n    scale: scale$3,\n    divScalar: divScalar$2,\n    inverse: inverse$3,\n    invert: invert$2,\n    cross: cross,\n    dot: dot$2,\n    length: length$2,\n    len: len$2,\n    lengthSq: lengthSq$2,\n    lenSq: lenSq$2,\n    distance: distance$1,\n    dist: dist$1,\n    distanceSq: distanceSq$1,\n    distSq: distSq$1,\n    normalize: normalize$2,\n    negate: negate$2,\n    copy: copy$3,\n    clone: clone$3,\n    multiply: multiply$3,\n    mul: mul$3,\n    divide: divide$1,\n    div: div$1,\n    random: random,\n    zero: zero$1,\n    transformMat4: transformMat4$1,\n    transformMat4Upper3x3: transformMat4Upper3x3,\n    transformMat3: transformMat3,\n    transformQuat: transformQuat,\n    getTranslation: getTranslation$1,\n    getAxis: getAxis$1,\n    getScaling: getScaling$1\n});\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = mat4.create();\n *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = mat4.identity();\n *     const trans = mat4.translation([1, 2, 3]);\n *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n */\nlet MatType = Float32Array;\n/**\n * Sets the type this library creates for a Mat4\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Mat4\n */\nfunction setDefaultType$3(ctor) {\n    const oldType = MatType;\n    MatType = ctor;\n    return oldType;\n}\n/**\n * Create a Mat4 from values\n *\n * Note: Since passing in a raw JavaScript array\n * is valid in all circumstances, if you want to\n * force a JavaScript array into a Mat4's specified type\n * it would be faster to use\n *\n * ```\n * const m = mat4.clone(someJSArray);\n * ```\n *\n * Note: a consequence of the implementation is if your Mat4Type = `Array`\n * instead of `Float32Array` or `Float64Array` then any values you\n * don't pass in will be undefined. Usually this is not an issue since\n * (a) using `Array` is rare and (b) using `mat4.create` is usually used\n * to create a Mat4 to be filled out as in\n *\n * ```\n * const m = mat4.create();\n * mat4.perspective(fov, aspect, near, far, m);\n * ```\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @returns created from values.\n */\nfunction create$2(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n    const dst = new MatType(16);\n    if (v0 !== undefined) {\n        dst[0] = v0;\n        if (v1 !== undefined) {\n            dst[1] = v1;\n            if (v2 !== undefined) {\n                dst[2] = v2;\n                if (v3 !== undefined) {\n                    dst[3] = v3;\n                    if (v4 !== undefined) {\n                        dst[4] = v4;\n                        if (v5 !== undefined) {\n                            dst[5] = v5;\n                            if (v6 !== undefined) {\n                                dst[6] = v6;\n                                if (v7 !== undefined) {\n                                    dst[7] = v7;\n                                    if (v8 !== undefined) {\n                                        dst[8] = v8;\n                                        if (v9 !== undefined) {\n                                            dst[9] = v9;\n                                            if (v10 !== undefined) {\n                                                dst[10] = v10;\n                                                if (v11 !== undefined) {\n                                                    dst[11] = v11;\n                                                    if (v12 !== undefined) {\n                                                        dst[12] = v12;\n                                                        if (v13 !== undefined) {\n                                                            dst[13] = v13;\n                                                            if (v14 !== undefined) {\n                                                                dst[14] = v14;\n                                                                if (v15 !== undefined) {\n                                                                    dst[15] = v15;\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Sets the values of a Mat4\n * Also see {@link mat4.create} and {@link mat4.copy}\n *\n * @param v0 - value for element 0\n * @param v1 - value for element 1\n * @param v2 - value for element 2\n * @param v3 - value for element 3\n * @param v4 - value for element 4\n * @param v5 - value for element 5\n * @param v6 - value for element 6\n * @param v7 - value for element 7\n * @param v8 - value for element 8\n * @param v9 - value for element 9\n * @param v10 - value for element 10\n * @param v11 - value for element 11\n * @param v12 - value for element 12\n * @param v13 - value for element 13\n * @param v14 - value for element 14\n * @param v15 - value for element 15\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 created from values.\n */\nfunction set$2(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = v0;\n    dst[1] = v1;\n    dst[2] = v2;\n    dst[3] = v3;\n    dst[4] = v4;\n    dst[5] = v5;\n    dst[6] = v6;\n    dst[7] = v7;\n    dst[8] = v8;\n    dst[9] = v9;\n    dst[10] = v10;\n    dst[11] = v11;\n    dst[12] = v12;\n    dst[13] = v13;\n    dst[14] = v14;\n    dst[15] = v15;\n    return dst;\n}\n/**\n * Creates a Mat4 from a Mat3\n * @param m3 - source matrix\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from m3\n */\nfunction fromMat3(m3, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = m3[0];\n    dst[1] = m3[1];\n    dst[2] = m3[2];\n    dst[3] = 0;\n    dst[4] = m3[4];\n    dst[5] = m3[5];\n    dst[6] = m3[6];\n    dst[7] = 0;\n    dst[8] = m3[8];\n    dst[9] = m3[9];\n    dst[10] = m3[10];\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Creates a Mat4 rotation matrix from a quaternion\n * @param q - quaternion to create matrix from\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns Mat4 made from q\n */\nfunction fromQuat(q, dst) {\n    dst = dst || new MatType(16);\n    const x = q[0];\n    const y = q[1];\n    const z = q[2];\n    const w = q[3];\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const yx = y * x2;\n    const yy = y * y2;\n    const zx = z * x2;\n    const zy = z * y2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    dst[0] = 1 - yy - zz;\n    dst[1] = yx + wz;\n    dst[2] = zx - wy;\n    dst[3] = 0;\n    dst[4] = yx - wz;\n    dst[5] = 1 - xx - zz;\n    dst[6] = zy + wx;\n    dst[7] = 0;\n    dst[8] = zx + wy;\n    dst[9] = zy - wx;\n    dst[10] = 1 - xx - yy;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Negates a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns -m.\n */\nfunction negate$1(m, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = -m[0];\n    dst[1] = -m[1];\n    dst[2] = -m[2];\n    dst[3] = -m[3];\n    dst[4] = -m[4];\n    dst[5] = -m[5];\n    dst[6] = -m[6];\n    dst[7] = -m[7];\n    dst[8] = -m[8];\n    dst[9] = -m[9];\n    dst[10] = -m[10];\n    dst[11] = -m[11];\n    dst[12] = -m[12];\n    dst[13] = -m[13];\n    dst[14] = -m[14];\n    dst[15] = -m[15];\n    return dst;\n}\n/**\n * Copies a matrix. (same as {@link mat4.clone})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nfunction copy$2(m, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = m[0];\n    dst[1] = m[1];\n    dst[2] = m[2];\n    dst[3] = m[3];\n    dst[4] = m[4];\n    dst[5] = m[5];\n    dst[6] = m[6];\n    dst[7] = m[7];\n    dst[8] = m[8];\n    dst[9] = m[9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n    return dst;\n}\n/**\n * Copies a matrix (same as {@link mat4.copy})\n * Also see {@link mat4.create} and {@link mat4.set}\n * @param m - The matrix.\n * @param dst - The matrix. If not passed a new one is created.\n * @returns A copy of m.\n */\nconst clone$2 = copy$2;\n/**\n * Check if 2 matrices are approximately equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are approximately equal\n */\nfunction equalsApproximately$2(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON &&\n        Math.abs(a[2] - b[2]) < EPSILON &&\n        Math.abs(a[3] - b[3]) < EPSILON &&\n        Math.abs(a[4] - b[4]) < EPSILON &&\n        Math.abs(a[5] - b[5]) < EPSILON &&\n        Math.abs(a[6] - b[6]) < EPSILON &&\n        Math.abs(a[7] - b[7]) < EPSILON &&\n        Math.abs(a[8] - b[8]) < EPSILON &&\n        Math.abs(a[9] - b[9]) < EPSILON &&\n        Math.abs(a[10] - b[10]) < EPSILON &&\n        Math.abs(a[11] - b[11]) < EPSILON &&\n        Math.abs(a[12] - b[12]) < EPSILON &&\n        Math.abs(a[13] - b[13]) < EPSILON &&\n        Math.abs(a[14] - b[14]) < EPSILON &&\n        Math.abs(a[15] - b[15]) < EPSILON;\n}\n/**\n * Check if 2 matrices are exactly equal\n * @param a - Operand matrix.\n * @param b - Operand matrix.\n * @returns true if matrices are exactly equal\n */\nfunction equals$2(a, b) {\n    return a[0] === b[0] &&\n        a[1] === b[1] &&\n        a[2] === b[2] &&\n        a[3] === b[3] &&\n        a[4] === b[4] &&\n        a[5] === b[5] &&\n        a[6] === b[6] &&\n        a[7] === b[7] &&\n        a[8] === b[8] &&\n        a[9] === b[9] &&\n        a[10] === b[10] &&\n        a[11] === b[11] &&\n        a[12] === b[12] &&\n        a[13] === b[13] &&\n        a[14] === b[14] &&\n        a[15] === b[15];\n}\n/**\n * Creates a 4-by-4 identity matrix.\n *\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A 4-by-4 identity matrix.\n */\nfunction identity$1(dst) {\n    dst = dst || new MatType(16);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Takes the transpose of a matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The transpose of m.\n */\nfunction transpose(m, dst) {\n    dst = dst || new MatType(16);\n    if (dst === m) {\n        let t;\n        t = m[1];\n        m[1] = m[4];\n        m[4] = t;\n        t = m[2];\n        m[2] = m[8];\n        m[8] = t;\n        t = m[3];\n        m[3] = m[12];\n        m[12] = t;\n        t = m[6];\n        m[6] = m[9];\n        m[9] = t;\n        t = m[7];\n        m[7] = m[13];\n        m[13] = t;\n        t = m[11];\n        m[11] = m[14];\n        m[14] = t;\n        return dst;\n    }\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m03 = m[0 * 4 + 3];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m13 = m[1 * 4 + 3];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m23 = m[2 * 4 + 3];\n    const m30 = m[3 * 4 + 0];\n    const m31 = m[3 * 4 + 1];\n    const m32 = m[3 * 4 + 2];\n    const m33 = m[3 * 4 + 3];\n    dst[0] = m00;\n    dst[1] = m10;\n    dst[2] = m20;\n    dst[3] = m30;\n    dst[4] = m01;\n    dst[5] = m11;\n    dst[6] = m21;\n    dst[7] = m31;\n    dst[8] = m02;\n    dst[9] = m12;\n    dst[10] = m22;\n    dst[11] = m32;\n    dst[12] = m03;\n    dst[13] = m13;\n    dst[14] = m23;\n    dst[15] = m33;\n    return dst;\n}\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nfunction inverse$2(m, dst) {\n    dst = dst || new MatType(16);\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m03 = m[0 * 4 + 3];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m13 = m[1 * 4 + 3];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m23 = m[2 * 4 + 3];\n    const m30 = m[3 * 4 + 0];\n    const m31 = m[3 * 4 + 1];\n    const m32 = m[3 * 4 + 2];\n    const m33 = m[3 * 4 + 3];\n    const tmp0 = m22 * m33;\n    const tmp1 = m32 * m23;\n    const tmp2 = m12 * m33;\n    const tmp3 = m32 * m13;\n    const tmp4 = m12 * m23;\n    const tmp5 = m22 * m13;\n    const tmp6 = m02 * m33;\n    const tmp7 = m32 * m03;\n    const tmp8 = m02 * m23;\n    const tmp9 = m22 * m03;\n    const tmp10 = m02 * m13;\n    const tmp11 = m12 * m03;\n    const tmp12 = m20 * m31;\n    const tmp13 = m30 * m21;\n    const tmp14 = m10 * m31;\n    const tmp15 = m30 * m11;\n    const tmp16 = m10 * m21;\n    const tmp17 = m20 * m11;\n    const tmp18 = m00 * m31;\n    const tmp19 = m30 * m01;\n    const tmp20 = m00 * m21;\n    const tmp21 = m20 * m01;\n    const tmp22 = m00 * m11;\n    const tmp23 = m10 * m01;\n    const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n        (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n    const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n        (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n    const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n        (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n    const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n        (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n    const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n    dst[0] = d * t0;\n    dst[1] = d * t1;\n    dst[2] = d * t2;\n    dst[3] = d * t3;\n    dst[4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n        (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n    dst[5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n        (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n    dst[6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n        (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n    dst[7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n        (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n    dst[8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n        (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n    dst[9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n        (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n    dst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n        (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n    dst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n        (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n    dst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n        (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n    dst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n        (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n    dst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n        (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n    dst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n        (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n    return dst;\n}\n/**\n * Compute the determinant of a matrix\n * @param m - the matrix\n * @returns the determinant\n */\nfunction determinant(m) {\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m03 = m[0 * 4 + 3];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m13 = m[1 * 4 + 3];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m23 = m[2 * 4 + 3];\n    const m30 = m[3 * 4 + 0];\n    const m31 = m[3 * 4 + 1];\n    const m32 = m[3 * 4 + 2];\n    const m33 = m[3 * 4 + 3];\n    const tmp0 = m22 * m33;\n    const tmp1 = m32 * m23;\n    const tmp2 = m12 * m33;\n    const tmp3 = m32 * m13;\n    const tmp4 = m12 * m23;\n    const tmp5 = m22 * m13;\n    const tmp6 = m02 * m33;\n    const tmp7 = m32 * m03;\n    const tmp8 = m02 * m23;\n    const tmp9 = m22 * m03;\n    const tmp10 = m02 * m13;\n    const tmp11 = m12 * m03;\n    const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n        (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n    const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n        (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n    const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n        (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n    const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n        (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n    return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n}\n/**\n * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n * @param m - The matrix.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The inverse of m.\n */\nconst invert$1 = inverse$2;\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nfunction multiply$2(a, b, dst) {\n    dst = dst || new MatType(16);\n    const a00 = a[0];\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a10 = a[4 + 0];\n    const a11 = a[4 + 1];\n    const a12 = a[4 + 2];\n    const a13 = a[4 + 3];\n    const a20 = a[8 + 0];\n    const a21 = a[8 + 1];\n    const a22 = a[8 + 2];\n    const a23 = a[8 + 3];\n    const a30 = a[12 + 0];\n    const a31 = a[12 + 1];\n    const a32 = a[12 + 2];\n    const a33 = a[12 + 3];\n    const b00 = b[0];\n    const b01 = b[1];\n    const b02 = b[2];\n    const b03 = b[3];\n    const b10 = b[4 + 0];\n    const b11 = b[4 + 1];\n    const b12 = b[4 + 2];\n    const b13 = b[4 + 3];\n    const b20 = b[8 + 0];\n    const b21 = b[8 + 1];\n    const b22 = b[8 + 2];\n    const b23 = b[8 + 3];\n    const b30 = b[12 + 0];\n    const b31 = b[12 + 1];\n    const b32 = b[12 + 2];\n    const b33 = b[12 + 3];\n    dst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n    dst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n    dst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n    dst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n    dst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n    dst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n    dst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n    dst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n    dst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n    dst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n    dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n    dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n    dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n    dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n    dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n    dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n    return dst;\n}\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n * @param a - The matrix on the left.\n * @param b - The matrix on the right.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix product of a and b.\n */\nconst mul$2 = multiply$2;\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param a - The matrix.\n * @param v - The vector.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The matrix with translation set.\n */\nfunction setTranslation(a, v, dst) {\n    dst = dst || identity$1();\n    if (a !== dst) {\n        dst[0] = a[0];\n        dst[1] = a[1];\n        dst[2] = a[2];\n        dst[3] = a[3];\n        dst[4] = a[4];\n        dst[5] = a[5];\n        dst[6] = a[6];\n        dst[7] = a[7];\n        dst[8] = a[8];\n        dst[9] = a[9];\n        dst[10] = a[10];\n        dst[11] = a[11];\n    }\n    dst[12] = v[0];\n    dst[13] = v[1];\n    dst[14] = v[2];\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param m - The matrix.\n * @param dst - vector to hold result. If not passed a new one is created.\n * @returns The translation component of m.\n */\nfunction getTranslation(m, dst) {\n    dst = dst || create$3();\n    dst[0] = m[12];\n    dst[1] = m[13];\n    dst[2] = m[14];\n    return dst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param axis - The axis 0 = x, 1 = y, 2 = z;\n * @returns The axis component of m.\n */\nfunction getAxis(m, axis, dst) {\n    dst = dst || create$3();\n    const off = axis * 4;\n    dst[0] = m[off + 0];\n    dst[1] = m[off + 1];\n    dst[2] = m[off + 2];\n    return dst;\n}\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param m - The matrix.\n * @param v - the axis vector\n * @param axis - The axis  0 = x, 1 = y, 2 = z;\n * @param dst - The matrix to set. If not passed a new one is created.\n * @returns The matrix with axis set.\n */\nfunction setAxis(a, v, axis, dst) {\n    if (dst !== a) {\n        dst = copy$2(a, dst);\n    }\n    const off = axis * 4;\n    dst[off + 0] = v[0];\n    dst[off + 1] = v[1];\n    dst[off + 2] = v[2];\n    return dst;\n}\n/**\n * Returns the scaling component of the matrix\n * @param m - The Matrix\n * @param dst - The vector to set. If not passed a new one is created.\n */\nfunction getScaling(m, dst) {\n    dst = dst || create$3();\n    const xx = m[0];\n    const xy = m[1];\n    const xz = m[2];\n    const yx = m[4];\n    const yy = m[5];\n    const yz = m[6];\n    const zx = m[8];\n    const zy = m[9];\n    const zz = m[10];\n    dst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n    dst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n    dst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n    return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n *\n * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n * otherwise.\n *\n * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n * @param aspect - The aspect ratio width / height.\n * @param zNear - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param zFar - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The perspective matrix.\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n    dst = dst || new MatType(16);\n    const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n    dst[0] = f / aspect;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = f;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[11] = -1;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[15] = 0;\n    if (zFar === Infinity) {\n        dst[10] = -1;\n        dst[14] = -zNear;\n    }\n    else {\n        const rangeInv = 1 / (zNear - zFar);\n        dst[10] = zFar * rangeInv;\n        dst[14] = zFar * zNear * rangeInv;\n    }\n    return dst;\n}\n/**\n * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n * and 0 to +1 in z.\n * @param left - Left side of the near clipping plane viewport.\n * @param right - Right side of the near clipping plane viewport.\n * @param bottom - Bottom of the near clipping plane viewport.\n * @param top - Top of the near clipping plane viewport.\n * @param near - The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param far - The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The orthographic projection matrix.\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = 2 / (right - left);\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 2 / (top - bottom);\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1 / (near - far);\n    dst[11] = 0;\n    dst[12] = (right + left) / (left - right);\n    dst[13] = (top + bottom) / (bottom - top);\n    dst[14] = near / (near - far);\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param left - The x coordinate of the left plane of the box.\n * @param right - The x coordinate of the right plane of the box.\n * @param bottom - The y coordinate of the bottom plane of the box.\n * @param top - The y coordinate of the right plane of the box.\n * @param near - The negative z coordinate of the near plane of the box.\n * @param far - The negative z coordinate of the far plane of the box.\n * @param dst - Output matrix. If not passed a new one is created.\n * @returns The perspective projection matrix.\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n    dst = dst || new MatType(16);\n    const dx = (right - left);\n    const dy = (top - bottom);\n    const dz = (near - far);\n    dst[0] = 2 * near / dx;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 2 * near / dy;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = (left + right) / dx;\n    dst[9] = (top + bottom) / dy;\n    dst[10] = far / dz;\n    dst[11] = -1;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = near * far / dz;\n    dst[15] = 0;\n    return dst;\n}\nlet xAxis;\nlet yAxis;\nlet zAxis;\n/**\n * Computes a 4-by-4 aim transformation.\n *\n * This is a matrix which positions an object aiming down positive Z.\n * toward the target.\n *\n * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n *\n * @param position - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nfunction aim(position, target, up, dst) {\n    dst = dst || new MatType(16);\n    xAxis = xAxis || create$3();\n    yAxis = yAxis || create$3();\n    zAxis = zAxis || create$3();\n    normalize$2(subtract$2(target, position, zAxis), zAxis);\n    normalize$2(cross(up, zAxis, xAxis), xAxis);\n    normalize$2(cross(zAxis, xAxis, yAxis), yAxis);\n    dst[0] = xAxis[0];\n    dst[1] = xAxis[1];\n    dst[2] = xAxis[2];\n    dst[3] = 0;\n    dst[4] = yAxis[0];\n    dst[5] = yAxis[1];\n    dst[6] = yAxis[2];\n    dst[7] = 0;\n    dst[8] = zAxis[0];\n    dst[9] = zAxis[1];\n    dst[10] = zAxis[2];\n    dst[11] = 0;\n    dst[12] = position[0];\n    dst[13] = position[1];\n    dst[14] = position[2];\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Computes a 4-by-4 camera aim transformation.\n *\n * This is a matrix which positions an object aiming down negative Z.\n * toward the target.\n *\n * Note: this is the inverse of `lookAt`\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The aim matrix.\n */\nfunction cameraAim(eye, target, up, dst) {\n    dst = dst || new MatType(16);\n    xAxis = xAxis || create$3();\n    yAxis = yAxis || create$3();\n    zAxis = zAxis || create$3();\n    normalize$2(subtract$2(eye, target, zAxis), zAxis);\n    normalize$2(cross(up, zAxis, xAxis), xAxis);\n    normalize$2(cross(zAxis, xAxis, yAxis), yAxis);\n    dst[0] = xAxis[0];\n    dst[1] = xAxis[1];\n    dst[2] = xAxis[2];\n    dst[3] = 0;\n    dst[4] = yAxis[0];\n    dst[5] = yAxis[1];\n    dst[6] = yAxis[2];\n    dst[7] = 0;\n    dst[8] = zAxis[0];\n    dst[9] = zAxis[1];\n    dst[10] = zAxis[2];\n    dst[11] = 0;\n    dst[12] = eye[0];\n    dst[13] = eye[1];\n    dst[14] = eye[2];\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Computes a 4-by-4 view transformation.\n *\n * This is a view matrix which transforms all other objects\n * to be in the space of the view defined by the parameters.\n *\n * @param eye - The position of the object.\n * @param target - The position meant to be aimed at.\n * @param up - A vector pointing up.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The look-at matrix.\n */\nfunction lookAt(eye, target, up, dst) {\n    dst = dst || new MatType(16);\n    xAxis = xAxis || create$3();\n    yAxis = yAxis || create$3();\n    zAxis = zAxis || create$3();\n    normalize$2(subtract$2(eye, target, zAxis), zAxis);\n    normalize$2(cross(up, zAxis, xAxis), xAxis);\n    normalize$2(cross(zAxis, xAxis, yAxis), yAxis);\n    dst[0] = xAxis[0];\n    dst[1] = yAxis[0];\n    dst[2] = zAxis[0];\n    dst[3] = 0;\n    dst[4] = xAxis[1];\n    dst[5] = yAxis[1];\n    dst[6] = zAxis[1];\n    dst[7] = 0;\n    dst[8] = xAxis[2];\n    dst[9] = yAxis[2];\n    dst[10] = zAxis[2];\n    dst[11] = 0;\n    dst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n    dst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n    dst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translation matrix.\n */\nfunction translation(v, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = v[0];\n    dst[13] = v[1];\n    dst[14] = v[2];\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param m - The matrix.\n * @param v - The vector by\n *     which to translate.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The translated matrix.\n */\nfunction translate(m, v, dst) {\n    dst = dst || new MatType(16);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m03 = m[3];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m13 = m[1 * 4 + 3];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m23 = m[2 * 4 + 3];\n    const m30 = m[3 * 4 + 0];\n    const m31 = m[3 * 4 + 1];\n    const m32 = m[3 * 4 + 2];\n    const m33 = m[3 * 4 + 3];\n    if (m !== dst) {\n        dst[0] = m00;\n        dst[1] = m01;\n        dst[2] = m02;\n        dst[3] = m03;\n        dst[4] = m10;\n        dst[5] = m11;\n        dst[6] = m12;\n        dst[7] = m13;\n        dst[8] = m20;\n        dst[9] = m21;\n        dst[10] = m22;\n        dst[11] = m23;\n    }\n    dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n    dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n    dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n    dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationX(angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = c;\n    dst[6] = s;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = -s;\n    dst[10] = c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateX$1(m, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const m10 = m[4];\n    const m11 = m[5];\n    const m12 = m[6];\n    const m13 = m[7];\n    const m20 = m[8];\n    const m21 = m[9];\n    const m22 = m[10];\n    const m23 = m[11];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[4] = c * m10 + s * m20;\n    dst[5] = c * m11 + s * m21;\n    dst[6] = c * m12 + s * m22;\n    dst[7] = c * m13 + s * m23;\n    dst[8] = c * m20 - s * m10;\n    dst[9] = c * m21 - s * m11;\n    dst[10] = c * m22 - s * m12;\n    dst[11] = c * m23 - s * m13;\n    if (m !== dst) {\n        dst[0] = m[0];\n        dst[1] = m[1];\n        dst[2] = m[2];\n        dst[3] = m[3];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationY(angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c;\n    dst[1] = 0;\n    dst[2] = -s;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = s;\n    dst[9] = 0;\n    dst[10] = c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateY$1(m, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m03 = m[0 * 4 + 3];\n    const m20 = m[2 * 4 + 0];\n    const m21 = m[2 * 4 + 1];\n    const m22 = m[2 * 4 + 2];\n    const m23 = m[2 * 4 + 3];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c * m00 - s * m20;\n    dst[1] = c * m01 - s * m21;\n    dst[2] = c * m02 - s * m22;\n    dst[3] = c * m03 - s * m23;\n    dst[8] = c * m20 + s * m00;\n    dst[9] = c * m21 + s * m01;\n    dst[10] = c * m22 + s * m02;\n    dst[11] = c * m23 + s * m03;\n    if (m !== dst) {\n        dst[4] = m[4];\n        dst[5] = m[5];\n        dst[6] = m[6];\n        dst[7] = m[7];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotation matrix.\n */\nfunction rotationZ(angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c;\n    dst[1] = s;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = -s;\n    dst[5] = c;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param m - The matrix.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction rotateZ$1(m, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    const m00 = m[0 * 4 + 0];\n    const m01 = m[0 * 4 + 1];\n    const m02 = m[0 * 4 + 2];\n    const m03 = m[0 * 4 + 3];\n    const m10 = m[1 * 4 + 0];\n    const m11 = m[1 * 4 + 1];\n    const m12 = m[1 * 4 + 2];\n    const m13 = m[1 * 4 + 3];\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    dst[0] = c * m00 + s * m10;\n    dst[1] = c * m01 + s * m11;\n    dst[2] = c * m02 + s * m12;\n    dst[3] = c * m03 + s * m13;\n    dst[4] = c * m10 - s * m00;\n    dst[5] = c * m11 - s * m01;\n    dst[6] = c * m12 - s * m02;\n    dst[7] = c * m13 - s * m03;\n    if (m !== dst) {\n        dst[8] = m[8];\n        dst[9] = m[9];\n        dst[10] = m[10];\n        dst[11] = m[11];\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    const n = Math.sqrt(x * x + y * y + z * z);\n    x /= n;\n    y /= n;\n    z /= n;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    const oneMinusCosine = 1 - c;\n    dst[0] = xx + (1 - xx) * c;\n    dst[1] = x * y * oneMinusCosine + z * s;\n    dst[2] = x * z * oneMinusCosine - y * s;\n    dst[3] = 0;\n    dst[4] = x * y * oneMinusCosine - z * s;\n    dst[5] = yy + (1 - yy) * c;\n    dst[6] = y * z * oneMinusCosine + x * s;\n    dst[7] = 0;\n    dst[8] = x * z * oneMinusCosine + y * s;\n    dst[9] = y * z * oneMinusCosine - x * s;\n    dst[10] = zz + (1 - zz) * c;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle. (same as axisRotation)\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns A matrix which rotates angle radians\n *     around the axis.\n */\nconst rotation = axisRotation;\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n    dst = dst || new MatType(16);\n    let x = axis[0];\n    let y = axis[1];\n    let z = axis[2];\n    const n = Math.sqrt(x * x + y * y + z * z);\n    x /= n;\n    y /= n;\n    z /= n;\n    const xx = x * x;\n    const yy = y * y;\n    const zz = z * z;\n    const c = Math.cos(angleInRadians);\n    const s = Math.sin(angleInRadians);\n    const oneMinusCosine = 1 - c;\n    const r00 = xx + (1 - xx) * c;\n    const r01 = x * y * oneMinusCosine + z * s;\n    const r02 = x * z * oneMinusCosine - y * s;\n    const r10 = x * y * oneMinusCosine - z * s;\n    const r11 = yy + (1 - yy) * c;\n    const r12 = y * z * oneMinusCosine + x * s;\n    const r20 = x * z * oneMinusCosine + y * s;\n    const r21 = y * z * oneMinusCosine - x * s;\n    const r22 = zz + (1 - zz) * c;\n    const m00 = m[0];\n    const m01 = m[1];\n    const m02 = m[2];\n    const m03 = m[3];\n    const m10 = m[4];\n    const m11 = m[5];\n    const m12 = m[6];\n    const m13 = m[7];\n    const m20 = m[8];\n    const m21 = m[9];\n    const m22 = m[10];\n    const m23 = m[11];\n    dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n    dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n    dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n    dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n    dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n    dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n    dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n    dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n    dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n    dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n    dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n    dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n    if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle. (same as rotate)\n * @param m - The matrix.\n * @param axis - The axis\n *     about which to rotate.\n * @param angleInRadians - The angle by which to rotate (in radians).\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The rotated matrix.\n */\nconst rotate = axisRotate;\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param v - A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction scaling(v, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = v[0];\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = v[1];\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = v[2];\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param m - The matrix to be modified.\n * @param v - A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction scale$2(m, v, dst) {\n    dst = dst || new MatType(16);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    dst[0] = v0 * m[0 * 4 + 0];\n    dst[1] = v0 * m[0 * 4 + 1];\n    dst[2] = v0 * m[0 * 4 + 2];\n    dst[3] = v0 * m[0 * 4 + 3];\n    dst[4] = v1 * m[1 * 4 + 0];\n    dst[5] = v1 * m[1 * 4 + 1];\n    dst[6] = v1 * m[1 * 4 + 2];\n    dst[7] = v1 * m[1 * 4 + 3];\n    dst[8] = v2 * m[2 * 4 + 0];\n    dst[9] = v2 * m[2 * 4 + 1];\n    dst[10] = v2 * m[2 * 4 + 2];\n    dst[11] = v2 * m[2 * 4 + 3];\n    if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n/**\n * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n * @param s - the amount to scale\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaling matrix.\n */\nfunction uniformScaling(s, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = s;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = s;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = s;\n    dst[11] = 0;\n    dst[12] = 0;\n    dst[13] = 0;\n    dst[14] = 0;\n    dst[15] = 1;\n    return dst;\n}\n/**\n * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n * @param m - The matrix to be modified.\n * @param s - The amount to scale.\n * @param dst - matrix to hold result. If not passed a new one is created.\n * @returns The scaled matrix.\n */\nfunction uniformScale(m, s, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = s * m[0 * 4 + 0];\n    dst[1] = s * m[0 * 4 + 1];\n    dst[2] = s * m[0 * 4 + 2];\n    dst[3] = s * m[0 * 4 + 3];\n    dst[4] = s * m[1 * 4 + 0];\n    dst[5] = s * m[1 * 4 + 1];\n    dst[6] = s * m[1 * 4 + 2];\n    dst[7] = s * m[1 * 4 + 3];\n    dst[8] = s * m[2 * 4 + 0];\n    dst[9] = s * m[2 * 4 + 1];\n    dst[10] = s * m[2 * 4 + 2];\n    dst[11] = s * m[2 * 4 + 3];\n    if (m !== dst) {\n        dst[12] = m[12];\n        dst[13] = m[13];\n        dst[14] = m[14];\n        dst[15] = m[15];\n    }\n    return dst;\n}\n\nvar mat4Impl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    setDefaultType: setDefaultType$3,\n    create: create$2,\n    set: set$2,\n    fromMat3: fromMat3,\n    fromQuat: fromQuat,\n    negate: negate$1,\n    copy: copy$2,\n    clone: clone$2,\n    equalsApproximately: equalsApproximately$2,\n    equals: equals$2,\n    identity: identity$1,\n    transpose: transpose,\n    inverse: inverse$2,\n    determinant: determinant,\n    invert: invert$1,\n    multiply: multiply$2,\n    mul: mul$2,\n    setTranslation: setTranslation,\n    getTranslation: getTranslation,\n    getAxis: getAxis,\n    setAxis: setAxis,\n    getScaling: getScaling,\n    perspective: perspective,\n    ortho: ortho,\n    frustum: frustum,\n    aim: aim,\n    cameraAim: cameraAim,\n    lookAt: lookAt,\n    translation: translation,\n    translate: translate,\n    rotationX: rotationX,\n    rotateX: rotateX$1,\n    rotationY: rotationY,\n    rotateY: rotateY$1,\n    rotationZ: rotationZ,\n    rotateZ: rotateZ$1,\n    axisRotation: axisRotation,\n    rotation: rotation,\n    axisRotate: axisRotate,\n    rotate: rotate,\n    scaling: scaling,\n    scale: scale$2,\n    uniformScaling: uniformScaling,\n    uniformScale: uniformScale\n});\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nlet QuatType = Float32Array;\n/**\n * Sets the type this library creates for a Quat4\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Quat4\n */\nfunction setDefaultType$2(ctor) {\n    const oldType = QuatType;\n    QuatType = ctor;\n    return oldType;\n}\n/**\n * Creates a quat4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nfunction create$1(x, y, z, w) {\n    const dst = new QuatType(4);\n    if (x !== undefined) {\n        dst[0] = x;\n        if (y !== undefined) {\n            dst[1] = y;\n            if (z !== undefined) {\n                dst[2] = z;\n                if (w !== undefined) {\n                    dst[3] = w;\n                }\n            }\n        }\n    }\n    return dst;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nconst fromValues$1 = create$1;\n/**\n * Sets the values of a Quat\n * Also see {@link quat.create} and {@link quat.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set$1(x, y, z, w, dst) {\n    dst = dst || new QuatType(4);\n    dst[0] = x;\n    dst[1] = y;\n    dst[2] = z;\n    dst[3] = w;\n    return dst;\n}\n/**\n * Sets a quaternion from the given angle and  axis,\n * then returns it.\n *\n * @param axis - the axis to rotate around\n * @param angleInRadians - the angle\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The quaternion that represents the given axis and angle\n **/\nfunction fromAxisAngle(axis, angleInRadians, dst) {\n    dst = dst || new QuatType(4);\n    const halfAngle = angleInRadians * 0.5;\n    const s = Math.sin(halfAngle);\n    dst[0] = s * axis[0];\n    dst[1] = s * axis[1];\n    dst[2] = s * axis[2];\n    dst[3] = Math.cos(halfAngle);\n    return dst;\n}\n/**\n * Gets the rotation axis and angle\n * @param q - quaternion to compute from\n * @param dst - Vec3 to hold result. If not passed in a new one is created.\n * @return angle and axis\n */\nfunction toAxisAngle(q, dst) {\n    dst = dst || create$3(4);\n    const angle = Math.acos(q[3]) * 2;\n    const s = Math.sin(angle * 0.5);\n    if (s > EPSILON) {\n        dst[0] = q[0] / s;\n        dst[1] = q[1] / s;\n        dst[2] = q[2] / s;\n    }\n    else {\n        dst[0] = 1;\n        dst[1] = 0;\n        dst[2] = 0;\n    }\n    return { angle, axis: dst };\n}\n/**\n * Returns the angle in degrees between two rotations a and b.\n * @param a - quaternion a\n * @param b - quaternion b\n * @return angle in radians between the two quaternions\n */\nfunction angle(a, b) {\n    const d = dot$1(a, b);\n    return Math.acos(2 * d * d - 1);\n}\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction multiply$1(a, b, dst) {\n    dst = dst || new QuatType(4);\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    const bx = b[0];\n    const by = b[1];\n    const bz = b[2];\n    const bw = b[3];\n    dst[0] = ax * bw + aw * bx + ay * bz - az * by;\n    dst[1] = ay * bw + aw * by + az * bx - ax * bz;\n    dst[2] = az * bw + aw * bz + ax * by - ay * bx;\n    dst[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return dst;\n}\n/**\n * Multiplies two quaternions\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nconst mul$1 = multiply$1;\n/**\n * Rotates the given quaternion around the X axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateX(q, angleInRadians, dst) {\n    dst = dst || new QuatType(4);\n    const halfAngle = angleInRadians * 0.5;\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n    const bx = Math.sin(halfAngle);\n    const bw = Math.cos(halfAngle);\n    dst[0] = qx * bw + qw * bx;\n    dst[1] = qy * bw + qz * bx;\n    dst[2] = qz * bw - qy * bx;\n    dst[3] = qw * bw - qx * bx;\n    return dst;\n}\n/**\n * Rotates the given quaternion around the Y axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateY(q, angleInRadians, dst) {\n    dst = dst || new QuatType(4);\n    const halfAngle = angleInRadians * 0.5;\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n    const by = Math.sin(halfAngle);\n    const bw = Math.cos(halfAngle);\n    dst[0] = qx * bw - qz * by;\n    dst[1] = qy * bw + qw * by;\n    dst[2] = qz * bw + qx * by;\n    dst[3] = qw * bw - qy * by;\n    return dst;\n}\n/**\n * Rotates the given quaternion around the Z axis by the given angle.\n * @param q - quaternion to rotate\n * @param angleInRadians - The angle by which to rotate\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction rotateZ(q, angleInRadians, dst) {\n    dst = dst || new QuatType(4);\n    const halfAngle = angleInRadians * 0.5;\n    const qx = q[0];\n    const qy = q[1];\n    const qz = q[2];\n    const qw = q[3];\n    const bz = Math.sin(halfAngle);\n    const bw = Math.cos(halfAngle);\n    dst[0] = qx * bw + qy * bz;\n    dst[1] = qy * bw - qx * bz;\n    dst[2] = qz * bw + qw * bz;\n    dst[3] = qw * bw - qz * bz;\n    return dst;\n}\n/**\n * Spherically linear interpolate between two quaternions\n *\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the result of a * b\n */\nfunction slerp(a, b, t, dst) {\n    dst = dst || new QuatType(4);\n    const ax = a[0];\n    const ay = a[1];\n    const az = a[2];\n    const aw = a[3];\n    let bx = b[0];\n    let by = b[1];\n    let bz = b[2];\n    let bw = b[3];\n    let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n    if (cosOmega < 0) {\n        cosOmega = -cosOmega;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    let scale0;\n    let scale1;\n    if (1.0 - cosOmega > EPSILON) {\n        const omega = Math.acos(cosOmega);\n        const sinOmega = Math.sin(omega);\n        scale0 = Math.sin((1 - t) * omega) / sinOmega;\n        scale1 = Math.sin(t * omega) / sinOmega;\n    }\n    else {\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    dst[0] = scale0 * ax + scale1 * bx;\n    dst[1] = scale0 * ay + scale1 * by;\n    dst[2] = scale0 * az + scale1 * bz;\n    dst[3] = scale0 * aw + scale1 * bw;\n    return dst;\n}\n/**\n * Compute the inverse of a quaternion\n *\n * @param q - quaternion to compute the inverse of\n * @returns A quaternion that is the result of a * b\n */\nfunction inverse$1(q, dst) {\n    dst = dst || new QuatType(4);\n    const a0 = q[0];\n    const a1 = q[1];\n    const a2 = q[2];\n    const a3 = q[3];\n    const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    const invDot = dot ? 1 / dot : 0;\n    dst[0] = -a0 * invDot;\n    dst[1] = -a1 * invDot;\n    dst[2] = -a2 * invDot;\n    dst[3] = a3 * invDot;\n    return dst;\n}\n/**\n * Compute the conjugate of a quaternion\n * For quaternions with a magnitude of 1 (a unit quaternion)\n * this returns the same as the inverse but is faster to calculate.\n *\n * @param q - quaternion to compute the conjugate of.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The conjugate of q\n */\nfunction conjugate(q, dst) {\n    dst = dst || new QuatType(4);\n    dst[0] = -q[0];\n    dst[1] = -q[1];\n    dst[2] = -q[2];\n    dst[3] = q[3];\n    return dst;\n}\n/**\n * Creates a quaternion from the given rotation matrix.\n *\n * The created quaternion is not normalized.\n *\n * @param m - rotation matrix\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nfunction fromMat(m, dst) {\n    dst = dst || new QuatType(4);\n    /*\n    0 1 2\n    3 4 5\n    6 7 8\n  \n    0 1 2\n    4 5 6\n    8 9 10\n     */\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    const trace = m[0] + m[5] + m[10];\n    if (trace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        const root = Math.sqrt(trace + 1); // 2w\n        dst[3] = 0.5 * root;\n        const invRoot = 0.5 / root; // 1/(4w)\n        dst[0] = (m[6] - m[9]) * invRoot;\n        dst[1] = (m[8] - m[2]) * invRoot;\n        dst[2] = (m[1] - m[4]) * invRoot;\n    }\n    else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[5] > m[0]) {\n            i = 1;\n        }\n        if (m[10] > m[i * 4 + i]) {\n            i = 2;\n        }\n        const j = (i + 1) % 3;\n        const k = (i + 2) % 3;\n        const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n        dst[i] = 0.5 * root;\n        const invRoot = 0.5 / root;\n        dst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n        dst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n        dst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n    }\n    return dst;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param xAngleInRadians - angle to rotate around X axis in radians.\n * @param yAngleInRadians - angle to rotate around Y axis in radians.\n * @param zAngleInRadians - angle to rotate around Z axis in radians.\n * @param order - order to apply euler angles\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n */\nfunction fromEuler(xAngleInRadians, yAngleInRadians, zAngleInRadians, order, dst) {\n    dst = dst || new QuatType(4);\n    const xHalfAngle = xAngleInRadians * 0.5;\n    const yHalfAngle = yAngleInRadians * 0.5;\n    const zHalfAngle = zAngleInRadians * 0.5;\n    const sx = Math.sin(xHalfAngle);\n    const cx = Math.cos(xHalfAngle);\n    const sy = Math.sin(yHalfAngle);\n    const cy = Math.cos(yHalfAngle);\n    const sz = Math.sin(zHalfAngle);\n    const cz = Math.cos(zHalfAngle);\n    switch (order) {\n        case 'xyz':\n            dst[0] = sx * cy * cz + cx * sy * sz;\n            dst[1] = cx * sy * cz - sx * cy * sz;\n            dst[2] = cx * cy * sz + sx * sy * cz;\n            dst[3] = cx * cy * cz - sx * sy * sz;\n            break;\n        case 'xzy':\n            dst[0] = sx * cy * cz - cx * sy * sz;\n            dst[1] = cx * sy * cz - sx * cy * sz;\n            dst[2] = cx * cy * sz + sx * sy * cz;\n            dst[3] = cx * cy * cz + sx * sy * sz;\n            break;\n        case 'yxz':\n            dst[0] = sx * cy * cz + cx * sy * sz;\n            dst[1] = cx * sy * cz - sx * cy * sz;\n            dst[2] = cx * cy * sz - sx * sy * cz;\n            dst[3] = cx * cy * cz + sx * sy * sz;\n            break;\n        case 'yzx':\n            dst[0] = sx * cy * cz + cx * sy * sz;\n            dst[1] = cx * sy * cz + sx * cy * sz;\n            dst[2] = cx * cy * sz - sx * sy * cz;\n            dst[3] = cx * cy * cz - sx * sy * sz;\n            break;\n        case 'zxy':\n            dst[0] = sx * cy * cz - cx * sy * sz;\n            dst[1] = cx * sy * cz + sx * cy * sz;\n            dst[2] = cx * cy * sz + sx * sy * cz;\n            dst[3] = cx * cy * cz - sx * sy * sz;\n            break;\n        case 'zyx':\n            dst[0] = sx * cy * cz - cx * sy * sz;\n            dst[1] = cx * sy * cz + sx * cy * sz;\n            dst[2] = cx * cy * sz - sx * sy * cz;\n            dst[3] = cx * cy * cz + sx * sy * sz;\n            break;\n        default:\n            throw new Error(`Unknown rotation order: ${order}`);\n    }\n    return dst;\n}\n/**\n * Copies a quaternion. (same as {@link quat.clone})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is a copy of q\n */\nfunction copy$1(q, dst) {\n    dst = dst || new QuatType(4);\n    dst[0] = q[0];\n    dst[1] = q[1];\n    dst[2] = q[2];\n    dst[3] = q[3];\n    return dst;\n}\n/**\n * Clones a quaternion. (same as {@link quat.copy})\n * Also see {@link quat.create} and {@link quat.set}\n * @param q - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A copy of q.\n */\nconst clone$1 = copy$1;\n/**\n * Adds two quaternions; assumes a and b have the same dimension.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the sum of a and b.\n */\nfunction add$1(a, b, dst) {\n    dst = dst || new QuatType(4);\n    dst[0] = a[0] + b[0];\n    dst[1] = a[1] + b[1];\n    dst[2] = a[2] + b[2];\n    dst[3] = a[3] + b[3];\n    return dst;\n}\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nfunction subtract$1(a, b, dst) {\n    dst = dst || new QuatType(4);\n    dst[0] = a[0] - b[0];\n    dst[1] = a[1] - b[1];\n    dst[2] = a[2] - b[2];\n    dst[3] = a[3] - b[3];\n    return dst;\n}\n/**\n * Subtracts two quaternions.\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns A quaternion that is the difference of a and b.\n */\nconst sub$1 = subtract$1;\n/**\n * Multiplies a quaternion by a scalar.\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nfunction mulScalar$1(v, k, dst) {\n    dst = dst || new QuatType(4);\n    dst[0] = v[0] * k;\n    dst[1] = v[1] * k;\n    dst[2] = v[2] * k;\n    dst[3] = v[3] * k;\n    return dst;\n}\n/**\n * Multiplies a quaternion by a scalar. (same as mulScalar)\n * @param v - The quaternion.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nconst scale$1 = mulScalar$1;\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The scaled quaternion.\n */\nfunction divScalar$1(v, k, dst) {\n    dst = dst || new QuatType(4);\n    dst[0] = v[0] / k;\n    dst[1] = v[1] / k;\n    dst[2] = v[2] / k;\n    dst[3] = v[3] / k;\n    return dst;\n}\n/**\n * Computes the dot product of two quaternions\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns dot product\n */\nfunction dot$1(a, b) {\n    return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n/**\n * Performs linear interpolation on two quaternions.\n * Given quaternions a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @param t - Interpolation coefficient.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp$1(a, b, t, dst) {\n    dst = dst || new QuatType(4);\n    dst[0] = a[0] + t * (b[0] - a[0]);\n    dst[1] = a[1] + t * (b[1] - a[1]);\n    dst[2] = a[2] + t * (b[2] - a[2]);\n    dst[3] = a[3] + t * (b[3] - a[3]);\n    return dst;\n}\n/**\n * Computes the length of quaternion\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nfunction length$1(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const v3 = v[3];\n    return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n/**\n * Computes the length of quaternion (same as length)\n * @param v - quaternion.\n * @returns length of quaternion.\n */\nconst len$1 = length$1;\n/**\n * Computes the square of the length of quaternion\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nfunction lengthSq$1(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const v3 = v[3];\n    return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n/**\n * Computes the square of the length of quaternion (same as lengthSq)\n * @param v - quaternion.\n * @returns square of the length of quaternion.\n */\nconst lenSq$1 = lengthSq$1;\n/**\n * Divides a quaternion by its Euclidean length and returns the quotient.\n * @param v - The quaternion.\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns The normalized quaternion.\n */\nfunction normalize$1(v, dst) {\n    dst = dst || new QuatType(4);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const v3 = v[3];\n    const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    if (len > 0.00001) {\n        dst[0] = v0 / len;\n        dst[1] = v1 / len;\n        dst[2] = v2 / len;\n        dst[3] = v3 / len;\n    }\n    else {\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n    }\n    return dst;\n}\n/**\n * Check if 2 quaternions are approximately equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are approximately equal\n */\nfunction equalsApproximately$1(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON &&\n        Math.abs(a[2] - b[2]) < EPSILON &&\n        Math.abs(a[3] - b[3]) < EPSILON;\n}\n/**\n * Check if 2 quaternions are exactly equal\n * @param a - Operand quaternion.\n * @param b - Operand quaternion.\n * @returns true if quaternions are exactly equal\n */\nfunction equals$1(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Creates an identity quaternion\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns an identity quaternion\n */\nfunction identity(dst) {\n    dst = dst || new QuatType(4);\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 1;\n    return dst;\n}\nlet tempVec3;\nlet xUnitVec3;\nlet yUnitVec3;\n/**\n * Computes a quaternion to represent the shortest rotation from one vector to another.\n *\n * @param aUnit - the start vector\n * @param bUnit - the end vector\n * @param dst - quaternion to hold result. If not passed in a new one is created.\n * @returns the result\n */\nfunction rotationTo(aUnit, bUnit, dst) {\n    dst = dst || new QuatType(4);\n    tempVec3 = tempVec3 || create$3();\n    xUnitVec3 = xUnitVec3 || create$3(1, 0, 0);\n    yUnitVec3 = yUnitVec3 || create$3(0, 1, 0);\n    const dot = dot$2(aUnit, bUnit);\n    if (dot < -0.999999) {\n        cross(xUnitVec3, aUnit, tempVec3);\n        if (len$2(tempVec3) < 0.000001) {\n            cross(yUnitVec3, aUnit, tempVec3);\n        }\n        normalize$2(tempVec3, tempVec3);\n        fromAxisAngle(tempVec3, Math.PI, dst);\n        return dst;\n    }\n    else if (dot > 0.999999) {\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 1;\n        return dst;\n    }\n    else {\n        cross(aUnit, bUnit, tempVec3);\n        dst[0] = tempVec3[0];\n        dst[1] = tempVec3[1];\n        dst[2] = tempVec3[2];\n        dst[3] = 1 + dot;\n        return normalize$1(dst, dst);\n    }\n}\nlet tempQuat1;\nlet tempQuat2;\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param a - the first quaternion\n * @param b - the second quaternion\n * @param c - the third quaternion\n * @param d - the fourth quaternion\n * @param t - Interpolation coefficient 0 to 1\n * @returns result\n */\nfunction sqlerp(a, b, c, d, t, dst) {\n    dst = dst || new QuatType(4);\n    tempQuat1 = tempQuat1 || new QuatType(4);\n    tempQuat2 = tempQuat2 || new QuatType(4);\n    slerp(a, d, t, tempQuat1);\n    slerp(b, c, t, tempQuat2);\n    slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), dst);\n    return dst;\n}\n\nvar quatImpl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    create: create$1,\n    setDefaultType: setDefaultType$2,\n    fromValues: fromValues$1,\n    set: set$1,\n    fromAxisAngle: fromAxisAngle,\n    toAxisAngle: toAxisAngle,\n    angle: angle,\n    multiply: multiply$1,\n    mul: mul$1,\n    rotateX: rotateX,\n    rotateY: rotateY,\n    rotateZ: rotateZ,\n    slerp: slerp,\n    inverse: inverse$1,\n    conjugate: conjugate,\n    fromMat: fromMat,\n    fromEuler: fromEuler,\n    copy: copy$1,\n    clone: clone$1,\n    add: add$1,\n    subtract: subtract$1,\n    sub: sub$1,\n    mulScalar: mulScalar$1,\n    scale: scale$1,\n    divScalar: divScalar$1,\n    dot: dot$1,\n    lerp: lerp$1,\n    length: length$1,\n    len: len$1,\n    lengthSq: lengthSq$1,\n    lenSq: lenSq$1,\n    normalize: normalize$1,\n    equalsApproximately: equalsApproximately$1,\n    equals: equals$1,\n    identity: identity,\n    rotationTo: rotationTo,\n    sqlerp: sqlerp\n});\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nlet VecType = Float32Array;\n/**\n * Sets the type this library creates for a Vec4\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n * @returns previous constructor for Vec4\n */\nfunction setDefaultType$1(ctor) {\n    const oldType = VecType;\n    VecType = ctor;\n    return oldType;\n}\n/**\n * Creates a vec4; may be called with x, y, z to set initial values.\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param w - Initial w value.\n * @returns the created vector\n */\nfunction create(x, y, z, w) {\n    const dst = new VecType(4);\n    if (x !== undefined) {\n        dst[0] = x;\n        if (y !== undefined) {\n            dst[1] = y;\n            if (z !== undefined) {\n                dst[2] = z;\n                if (w !== undefined) {\n                    dst[3] = w;\n                }\n            }\n        }\n    }\n    return dst;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n * @param x - Initial x value.\n * @param y - Initial y value.\n * @param z - Initial z value.\n * @param z - Initial w value.\n * @returns the created vector\n */\nconst fromValues = create;\n/**\n * Sets the values of a Vec4\n * Also see {@link vec4.create} and {@link vec4.copy}\n *\n * @param x first value\n * @param y second value\n * @param z third value\n * @param w fourth value\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector with its elements set.\n */\nfunction set(x, y, z, w, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = x;\n    dst[1] = y;\n    dst[2] = z;\n    dst[3] = w;\n    return dst;\n}\n/**\n * Applies Math.ceil to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the ceil of each element of v.\n */\nfunction ceil(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.ceil(v[0]);\n    dst[1] = Math.ceil(v[1]);\n    dst[2] = Math.ceil(v[2]);\n    dst[3] = Math.ceil(v[3]);\n    return dst;\n}\n/**\n * Applies Math.floor to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the floor of each element of v.\n */\nfunction floor(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.floor(v[0]);\n    dst[1] = Math.floor(v[1]);\n    dst[2] = Math.floor(v[2]);\n    dst[3] = Math.floor(v[3]);\n    return dst;\n}\n/**\n * Applies Math.round to each element of vector\n * @param v - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the round of each element of v.\n */\nfunction round(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.round(v[0]);\n    dst[1] = Math.round(v[1]);\n    dst[2] = Math.round(v[2]);\n    dst[3] = Math.round(v[3]);\n    return dst;\n}\n/**\n * Clamp each element of vector between min and max\n * @param v - Operand vector.\n * @param max - Min value, default 0\n * @param min - Max value, default 1\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that the clamped value of each element of v.\n */\nfunction clamp(v, min = 0, max = 1, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.min(max, Math.max(min, v[0]));\n    dst[1] = Math.min(max, Math.max(min, v[1]));\n    dst[2] = Math.min(max, Math.max(min, v[2]));\n    dst[3] = Math.min(max, Math.max(min, v[3]));\n    return dst;\n}\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a and b.\n */\nfunction add(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] + b[0];\n    dst[1] = a[1] + b[1];\n    dst[2] = a[2] + b[2];\n    dst[3] = a[3] + b[3];\n    return dst;\n}\n/**\n * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param scale - Amount to scale b\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the sum of a + b * scale.\n */\nfunction addScaled(a, b, scale, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] + b[0] * scale;\n    dst[1] = a[1] + b[1] * scale;\n    dst[2] = a[2] + b[2] * scale;\n    dst[3] = a[3] + b[3] * scale;\n    return dst;\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nfunction subtract(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] - b[0];\n    dst[1] = a[1] - b[1];\n    dst[2] = a[2] - b[2];\n    dst[3] = a[3] - b[3];\n    return dst;\n}\n/**\n * Subtracts two vectors.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A vector that is the difference of a and b.\n */\nconst sub = subtract;\n/**\n * Check if 2 vectors are approximately equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are approximately equal\n */\nfunction equalsApproximately(a, b) {\n    return Math.abs(a[0] - b[0]) < EPSILON &&\n        Math.abs(a[1] - b[1]) < EPSILON &&\n        Math.abs(a[2] - b[2]) < EPSILON &&\n        Math.abs(a[3] - b[3]) < EPSILON;\n}\n/**\n * Check if 2 vectors are exactly equal\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns true if vectors are exactly equal\n */\nfunction equals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficient.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The linear interpolated result.\n */\nfunction lerp(a, b, t, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] + t * (b[0] - a[0]);\n    dst[1] = a[1] + t * (b[1] - a[1]);\n    dst[2] = a[2] + t * (b[2] - a[2]);\n    dst[3] = a[3] + t * (b[3] - a[3]);\n    return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param t - Interpolation coefficients vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns the linear interpolated result.\n */\nfunction lerpV(a, b, t, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] + t[0] * (b[0] - a[0]);\n    dst[1] = a[1] + t[1] * (b[1] - a[1]);\n    dst[2] = a[2] + t[2] * (b[2] - a[2]);\n    dst[3] = a[3] + t[3] * (b[3] - a[3]);\n    return dst;\n}\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The max components vector.\n */\nfunction max(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.max(a[0], b[0]);\n    dst[1] = Math.max(a[1], b[1]);\n    dst[2] = Math.max(a[2], b[2]);\n    dst[3] = Math.max(a[3], b[3]);\n    return dst;\n}\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The min components vector.\n */\nfunction min(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = Math.min(a[0], b[0]);\n    dst[1] = Math.min(a[1], b[1]);\n    dst[2] = Math.min(a[2], b[2]);\n    dst[3] = Math.min(a[3], b[3]);\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction mulScalar(v, k, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = v[0] * k;\n    dst[1] = v[1] * k;\n    dst[2] = v[2] * k;\n    dst[3] = v[3] * k;\n    return dst;\n}\n/**\n * Multiplies a vector by a scalar. (same as mulScalar)\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nconst scale = mulScalar;\n/**\n * Divides a vector by a scalar.\n * @param v - The vector.\n * @param k - The scalar.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The scaled vector.\n */\nfunction divScalar(v, k, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = v[0] / k;\n    dst[1] = v[1] / k;\n    dst[2] = v[2] / k;\n    dst[3] = v[3] / k;\n    return dst;\n}\n/**\n * Inverse a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nfunction inverse(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = 1 / v[0];\n    dst[1] = 1 / v[1];\n    dst[2] = 1 / v[2];\n    dst[3] = 1 / v[3];\n    return dst;\n}\n/**\n * Invert a vector. (same as inverse)\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The inverted vector.\n */\nconst invert = inverse;\n/**\n * Computes the dot product of two vectors\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @returns dot product\n */\nfunction dot(a, b) {\n    return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n}\n/**\n * Computes the length of vector\n * @param v - vector.\n * @returns length of vector.\n */\nfunction length(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const v3 = v[3];\n    return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n}\n/**\n * Computes the length of vector (same as length)\n * @param v - vector.\n * @returns length of vector.\n */\nconst len = length;\n/**\n * Computes the square of the length of vector\n * @param v - vector.\n * @returns square of the length of vector.\n */\nfunction lengthSq(v) {\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const v3 = v[3];\n    return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n}\n/**\n * Computes the square of the length of vector (same as lengthSq)\n * @param v - vector.\n * @returns square of the length of vector.\n */\nconst lenSq = lengthSq;\n/**\n * Computes the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nfunction distance(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    const dz = a[2] - b[2];\n    const dw = a[3] - b[3];\n    return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n}\n/**\n * Computes the distance between 2 points (same as distance)\n * @param a - vector.\n * @param b - vector.\n * @returns distance between a and b\n */\nconst dist = distance;\n/**\n * Computes the square of the distance between 2 points\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nfunction distanceSq(a, b) {\n    const dx = a[0] - b[0];\n    const dy = a[1] - b[1];\n    const dz = a[2] - b[2];\n    const dw = a[3] - b[3];\n    return dx * dx + dy * dy + dz * dz + dw * dw;\n}\n/**\n * Computes the square of the distance between 2 points (same as distanceSq)\n * @param a - vector.\n * @param b - vector.\n * @returns square of the distance between a and b\n */\nconst distSq = distanceSq;\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The normalized vector.\n */\nfunction normalize(v, dst) {\n    dst = dst || new VecType(4);\n    const v0 = v[0];\n    const v1 = v[1];\n    const v2 = v[2];\n    const v3 = v[3];\n    const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    if (len > 0.00001) {\n        dst[0] = v0 / len;\n        dst[1] = v1 / len;\n        dst[2] = v2 / len;\n        dst[3] = v3 / len;\n    }\n    else {\n        dst[0] = 0;\n        dst[1] = 0;\n        dst[2] = 0;\n        dst[3] = 0;\n    }\n    return dst;\n}\n/**\n * Negates a vector.\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns -v.\n */\nfunction negate(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = -v[0];\n    dst[1] = -v[1];\n    dst[2] = -v[2];\n    dst[3] = -v[3];\n    return dst;\n}\n/**\n * Copies a vector. (same as {@link vec4.clone})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nfunction copy(v, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = v[0];\n    dst[1] = v[1];\n    dst[2] = v[2];\n    dst[3] = v[3];\n    return dst;\n}\n/**\n * Clones a vector. (same as {@link vec4.copy})\n * Also see {@link vec4.create} and {@link vec4.set}\n * @param v - The vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns A copy of v.\n */\nconst clone = copy;\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nfunction multiply(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] * b[0];\n    dst[1] = a[1] * b[1];\n    dst[2] = a[2] * b[2];\n    dst[3] = a[3] * b[3];\n    return dst;\n}\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as mul)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of products of entries of a and b.\n */\nconst mul = multiply;\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nfunction divide(a, b, dst) {\n    dst = dst || new VecType(4);\n    dst[0] = a[0] / b[0];\n    dst[1] = a[1] / b[1];\n    dst[2] = a[2] / b[2];\n    dst[3] = a[3] / b[3];\n    return dst;\n}\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length. (same as divide)\n * @param a - Operand vector.\n * @param b - Operand vector.\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The vector of quotients of entries of a and b.\n */\nconst div = divide;\n/**\n * Zero's a vector\n * @param dst - vector to hold result. If not passed in a new one is created.\n * @returns The zeroed vector.\n */\nfunction zero(dst) {\n    dst = dst || new VecType(4);\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    return dst;\n}\n/**\n * transform vec4 by 4x4 matrix\n * @param v - the vector\n * @param m - The matrix.\n * @param dst - optional vec4 to store result. If not passed a new one is created.\n * @returns the transformed vector\n */\nfunction transformMat4(v, m, dst) {\n    dst = dst || new VecType(4);\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    const w = v[3];\n    dst[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    dst[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    dst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    dst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return dst;\n}\n\nvar vec4Impl = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    create: create,\n    setDefaultType: setDefaultType$1,\n    fromValues: fromValues,\n    set: set,\n    ceil: ceil,\n    floor: floor,\n    round: round,\n    clamp: clamp,\n    add: add,\n    addScaled: addScaled,\n    subtract: subtract,\n    sub: sub,\n    equalsApproximately: equalsApproximately,\n    equals: equals,\n    lerp: lerp,\n    lerpV: lerpV,\n    max: max,\n    min: min,\n    mulScalar: mulScalar,\n    scale: scale,\n    divScalar: divScalar,\n    inverse: inverse,\n    invert: invert,\n    dot: dot,\n    length: length,\n    len: len,\n    lengthSq: lengthSq,\n    lenSq: lenSq,\n    distance: distance,\n    dist: dist,\n    distanceSq: distanceSq,\n    distSq: distSq,\n    normalize: normalize,\n    negate: negate,\n    copy: copy,\n    clone: clone,\n    multiply: multiply,\n    mul: mul,\n    divide: divide,\n    div: div,\n    zero: zero,\n    transformMat4: transformMat4\n});\n\n/**\n * Sets the type this library creates for all types\n *\n * example:\n *\n * ```\n * setDefaultType(Float64Array);\n * ```\n *\n * @param ctor - the constructor for the type. Either `Float32Array`, `Float64Array`, or `Array`\n */\nfunction setDefaultType(ctor) {\n    setDefaultType$5(ctor);\n    setDefaultType$3(ctor);\n    setDefaultType$2(ctor);\n    setDefaultType$6(ctor);\n    setDefaultType$4(ctor);\n    setDefaultType$1(ctor);\n}\n\nexport { mat3Impl as mat3, mat4Impl as mat4, quatImpl as quat, setDefaultType, utils, vec2Impl as vec2, vec3Impl as vec3, vec4Impl as vec4 };\n//# sourceMappingURL=wgpu-matrix.module.js.map\n","import { mat4, vec3, mat3 } from 'wgpu-matrix';\n// for some reason this needs to be a bit different than the one in wgpu-matrix\nfunction getProjectionMatrix(znear, zfar, fovX, fovY) {\n    var tanHalfFovY = Math.tan(fovY / 2);\n    var tanHalfFovX = Math.tan(fovX / 2);\n    var top = tanHalfFovY * znear;\n    var bottom = -top;\n    var right = tanHalfFovX * znear;\n    var left = -right;\n    var P = mat4.create();\n    var z_sign = 1.0;\n    P[0] = (2.0 * znear) / (right - left);\n    P[5] = (2.0 * znear) / (top - bottom);\n    P[8] = (right + left) / (right - left);\n    P[9] = (top + bottom) / (top - bottom);\n    P[10] = z_sign * zfar / (zfar - znear);\n    P[11] = -(zfar * znear) / (zfar - znear);\n    P[14] = z_sign;\n    P[15] = 0.0;\n    return mat4.transpose(P);\n}\n// useful for coordinate flips\nfunction diagonal4x4(x, y, z, w) {\n    var m = mat4.create();\n    m[0] = x;\n    m[5] = y;\n    m[10] = z;\n    m[15] = w;\n    return m;\n}\n// A camera as used by the renderer. Interactivity is handled by InteractiveCamera.\nvar Camera = /** @class */ (function () {\n    function Camera(height, width, viewMatrix, perspective, focalX, focalY, scaleModifier) {\n        this.height = height;\n        this.width = width;\n        this.viewMatrix = viewMatrix;\n        this.perspective = perspective;\n        this.focalX = focalX;\n        this.focalY = focalY;\n        this.scaleModifier = scaleModifier;\n    }\n    Camera.default = function () {\n        return new Camera(500, 500, mat4.lookAt([0, 0, 0], [0, 0, -1], [0, 1, 0]), mat4.perspective(Math.PI / 4, 1, 0.2, 100), 600, 600, 1);\n    };\n    // computes the depth of a point in camera space, for sorting\n    Camera.prototype.dotZ = function () {\n        var depthAxis = this.depthAxis();\n        return function (v) {\n            return vec3.dot(depthAxis, v);\n        };\n    };\n    // gets the camera position in world space, for evaluating the spherical harmonics\n    Camera.prototype.getPosition = function () {\n        var inverseViewMatrix = mat4.inverse(this.viewMatrix);\n        return mat4.getTranslation(inverseViewMatrix);\n    };\n    Camera.prototype.getProjMatrix = function () {\n        var flippedY = mat4.clone(this.perspective);\n        flippedY = mat4.mul(flippedY, diagonal4x4(1, -1, 1, 1));\n        return mat4.multiply(flippedY, this.viewMatrix);\n    };\n    // for camera interactions\n    Camera.prototype.translate = function (x, y, z) {\n        var viewInv = mat4.inverse(this.viewMatrix);\n        mat4.translate(viewInv, [x, y, z], viewInv);\n        mat4.inverse(viewInv, this.viewMatrix);\n    };\n    // for camera interactions\n    Camera.prototype.rotate = function (x, y, z) {\n        var viewInv = mat4.inverse(this.viewMatrix);\n        mat4.rotateX(viewInv, y, viewInv);\n        mat4.rotateY(viewInv, x, viewInv);\n        mat4.rotateZ(viewInv, z, viewInv);\n        mat4.inverse(viewInv, this.viewMatrix);\n    };\n    // the depth axis is the third column of the transposed view matrix\n    Camera.prototype.depthAxis = function () {\n        return mat4.getAxis(mat4.transpose(this.viewMatrix), 2);\n    };\n    return Camera;\n}());\nexport { Camera };\n// Adds interactivity to a camera. The camera is modified by the user's mouse and keyboard input.\nvar InteractiveCamera = /** @class */ (function () {\n    function InteractiveCamera(camera, canvas) {\n        this.drag = false;\n        this.oldX = 0;\n        this.oldY = 0;\n        this.dRX = 0;\n        this.dRY = 0;\n        this.dRZ = 0;\n        this.dTX = 0;\n        this.dTY = 0;\n        this.dTZ = 0;\n        this.dirty = true;\n        this.camera = camera;\n        this.canvas = canvas;\n        this.window = window;\n        this.createCallbacks();\n    }\n    InteractiveCamera.default = function (canvas) {\n        return new InteractiveCamera(Camera.default(), canvas);\n    };\n    InteractiveCamera.prototype.createCallbacks = function () {\n        var _this = this;\n        this.canvas.addEventListener('mousedown', function (e) {\n            _this.drag = true;\n            _this.oldX = e.pageX;\n            _this.oldY = e.pageY;\n            _this.setDirty();\n            e.preventDefault();\n        }, false);\n        this.canvas.addEventListener('mouseup', function (e) {\n            _this.drag = false;\n        }, false);\n        this.canvas.addEventListener('mousemove', function (e) {\n            if (!_this.drag)\n                return false;\n            _this.dRX = (e.pageX - _this.oldX) * 2 * Math.PI / _this.canvas.width;\n            _this.dRY = (e.pageY - _this.oldY) * 2 * Math.PI / _this.canvas.height;\n            _this.oldX = e.pageX;\n            _this.oldY = e.pageY;\n            _this.setDirty();\n            e.preventDefault();\n        }, false);\n        this.canvas.addEventListener('wheel', function (e) {\n            _this.dTZ = e.deltaY * 0.1;\n            _this.setDirty();\n            e.preventDefault();\n        }, false);\n        window.addEventListener('keydown', function (e) {\n            if (!'wsad'.includes(e.key)) {\n                return;\n            }\n            if (e.key === 'w') {\n                _this.dTY = -0.1;\n            }\n            else if (e.key === 's') {\n                _this.dTY = 0.1;\n            }\n            else if (e.key === 'a') {\n                _this.dTX = -0.1;\n            }\n            else if (e.key === 'd') {\n                _this.dTX = 0.1;\n            }\n            ;\n            _this.setDirty();\n            e.preventDefault();\n        }, false);\n    };\n    InteractiveCamera.prototype.setNewCamera = function (newCamera) {\n        this.camera = newCamera;\n        this.setDirty();\n    };\n    InteractiveCamera.prototype.setDirty = function () {\n        this.dirty = true;\n    };\n    InteractiveCamera.prototype.setClean = function () {\n        this.dirty = false;\n    };\n    InteractiveCamera.prototype.isDirty = function () {\n        return this.dirty;\n    };\n    InteractiveCamera.prototype.getCamera = function () {\n        if (this.isDirty()) {\n            this.camera.translate(this.dTX, this.dTY, this.dTZ);\n            this.camera.rotate(this.dRX, this.dRY, this.dRZ);\n            this.dTX = this.dTY = this.dTZ = this.dRX = this.dRY = this.dRZ = 0;\n            this.setClean();\n        }\n        return this.camera;\n    };\n    return InteractiveCamera;\n}());\nexport { InteractiveCamera };\nfunction focal2fov(focal, pixels) {\n    return 2 * Math.atan(pixels / (2 * focal));\n}\nfunction worldToCamFromRT(R, t) {\n    var R_ = R;\n    var camToWorld = mat4.fromMat3(R_);\n    var minusT = vec3.mulScalar(t, -1);\n    mat4.translate(camToWorld, minusT, camToWorld);\n    return camToWorld;\n}\n// converting camera coordinate systems is always black magic :(\nfunction cameraFromJSON(rawCamera, canvasW, canvasH) {\n    var fovX = focal2fov(rawCamera.fx, rawCamera.width);\n    var fovY = focal2fov(rawCamera.fy, rawCamera.height);\n    var projectionMatrix = getProjectionMatrix(0.2, 100, fovX, fovY);\n    var R = mat3.create.apply(mat3, rawCamera.rotation.flat());\n    var T = rawCamera.position;\n    var viewMatrix = worldToCamFromRT(R, T);\n    return new Camera(canvasH, canvasW, viewMatrix, projectionMatrix, rawCamera.fx, rawCamera.fy, Math.max(canvasW / rawCamera.width, canvasH / rawCamera.height));\n}\n// A UI component that parses a JSON file containing a list of cameras and displays them as a list,\n// allowing the user to choose from presets.\nvar CameraFileParser = /** @class */ (function () {\n    function CameraFileParser(fileInput, listElement, canvas, cameraSetCallback) {\n        var _this = this;\n        this.currentLineId = 0;\n        this.handleFileInputChange = function (event) {\n            var _a;\n            var file = (_a = _this.fileInput.files) === null || _a === void 0 ? void 0 : _a[0];\n            if (file) {\n                var reader = new FileReader();\n                reader.onload = _this.handleFileLoad;\n                reader.readAsText(file);\n            }\n        };\n        this.handleFileLoad = function (event) {\n            if (!event.target)\n                return;\n            var contents = event.target.result;\n            var jsonData = JSON.parse(contents);\n            _this.currentLineId = 0;\n            _this.listElement.innerHTML = '';\n            jsonData.forEach(function (cameraJSON) {\n                _this.currentLineId++;\n                var listItem = document.createElement('li');\n                var camera = cameraFromJSON(cameraJSON, _this.canvas.width, _this.canvas.height);\n                listItem.textContent = cameraJSON.img_name;\n                listItem.addEventListener('click', _this.createCallbackForLine(camera));\n                _this.listElement.appendChild(listItem);\n            });\n        };\n        this.createCallbackForLine = function (camera) {\n            return function () {\n                _this.cameraSetCallback(camera);\n            };\n        };\n        this.fileInput = fileInput;\n        this.listElement = listElement;\n        this.canvas = canvas;\n        this.cameraSetCallback = cameraSetCallback;\n        this.fileInput.addEventListener('change', this.handleFileInputChange);\n    }\n    return CameraFileParser;\n}());\nexport { CameraFileParser };\n","// This file contains the main rendering code. Unlike the official implementation,\n// instead of using compute shaders and iterating through (possibly) all gaussians,\n// we instead use a vertex shader to turn each gaussian into a quad facing the camera\n// and then use the fragment shader to paint the gaussian on the quad.\n// If we draw the quads in order of depth, with well chosen blending settings we can\n// get the same color accumulation rule as in the original paper.\n// This approach is faster than the original implementation on webGPU but still substantially\n// slow compared to the CUDA impl. The main bottleneck is the sorting of the quads by depth,\n// which is done on the CPU but could presumably be replaced by a compute shader sort.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { f32, Struct, vec3, mat4x4 } from './packing';\nimport { getShaderCode } from './shaders';\nvar uniformLayout = new Struct([\n    ['viewMatrix', new mat4x4(f32)],\n    ['projMatrix', new mat4x4(f32)],\n    ['cameraPosition', new vec3(f32)],\n    ['tanHalfFovX', f32],\n    ['tanHalfFovY', f32],\n    ['focalX', f32],\n    ['focalY', f32],\n    ['scaleModifier', f32],\n]);\nfunction mat4toArrayOfArrays(m) {\n    return [\n        [m[0], m[1], m[2], m[3]],\n        [m[4], m[5], m[6], m[7]],\n        [m[8], m[9], m[10], m[11]],\n        [m[12], m[13], m[14], m[15]],\n    ];\n}\nvar Renderer = /** @class */ (function () {\n    function Renderer(canvas, interactiveCamera, gaussians, adapter, device, contextGPU) {\n        var _this = this;\n        this.destroyCallback = null;\n        this.canvas = canvas;\n        this.interactiveCamera = interactiveCamera;\n        this.adapter = adapter;\n        this.device = device;\n        this.contextGpu = contextGPU;\n        var presentationFormat = \"rgba16float\";\n        this.contextGpu.configure({\n            device: device,\n            format: presentationFormat,\n            alphaMode: 'premultiplied',\n        });\n        this.pointDataBuffer = device.createBuffer({\n            size: gaussians.gaussianArrayLayout.size,\n            usage: GPUBufferUsage.STORAGE,\n            mappedAtCreation: true,\n        });\n        new Uint8Array(this.pointDataBuffer.getMappedRange()).set(new Uint8Array(gaussians.gaussiansBuffer));\n        this.pointDataBuffer.unmap();\n        // Create a GPU buffer for the uniform data.\n        this.uniformBuffer = device.createBuffer({\n            size: uniformLayout.size,\n            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n        });\n        var shaderCode = getShaderCode(canvas, gaussians.sphericalHarmonicsDegree, gaussians.nShCoeffs);\n        var shaderModule = device.createShaderModule({ code: shaderCode });\n        this.pipeline = device.createRenderPipeline({\n            layout: \"auto\",\n            vertex: {\n                module: shaderModule,\n                entryPoint: \"vs_points\",\n            },\n            fragment: {\n                module: shaderModule,\n                entryPoint: \"fs_main\",\n                targets: [\n                    {\n                        format: presentationFormat,\n                        // with one-minus-dst alpha we can set the src to src.alpha * src.color and\n                        // we get that color_new = src.color * src.alpha + dst.color * (1 - src.alpha)\n                        // which is the same as the accumulation rule in the paper\n                        blend: {\n                            color: {\n                                srcFactor: \"one-minus-dst-alpha\",\n                                dstFactor: \"one\",\n                                operation: \"add\",\n                            },\n                            alpha: {\n                                srcFactor: \"one-minus-dst-alpha\",\n                                dstFactor: \"one\",\n                                operation: \"add\",\n                            },\n                        }\n                    },\n                ],\n            },\n            primitive: {\n                topology: \"triangle-list\",\n                stripIndexFormat: undefined,\n                cullMode: undefined,\n            },\n        });\n        // point positions for sorting by depth\n        this.pointPositions = gaussians.positionsArray;\n        // sorting is faster on partially sorted lists so we keep the old indices around,\n        // initialized to the identity permutation \n        this.drawOrder = Array.from(Array(this.pointPositions.length).keys());\n        // start the animation loop\n        requestAnimationFrame(function () { return _this.animate(); });\n    }\n    // we need an async init function because we need to request certain async methods\n    Renderer.init = function (canvas, gaussians, interactiveCamera) {\n        return __awaiter(this, void 0, void 0, function () {\n            var adapter, byteLength, device, contextGpu;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!canvas) {\n                            return [2 /*return*/, Promise.reject(\"Canvas not found!\")];\n                        }\n                        if (!navigator.gpu) {\n                            return [2 /*return*/, Promise.reject(\"WebGPU not supported on this browser! (navigator.gpu is null)\")];\n                        }\n                        return [4 /*yield*/, navigator.gpu.requestAdapter()];\n                    case 1:\n                        adapter = _a.sent();\n                        if (!adapter) {\n                            return [2 /*return*/, Promise.reject(\"WebGPU is not supported on this browser! (WebGPU adapter not found)\")];\n                        }\n                        byteLength = gaussians.gaussiansBuffer.byteLength;\n                        return [4 /*yield*/, adapter.requestDevice({\n                                requiredLimits: {\n                                    maxStorageBufferBindingSize: 1.5 * byteLength,\n                                    maxBufferSize: 1.5 * byteLength,\n                                }\n                            })];\n                    case 2:\n                        device = _a.sent();\n                        contextGpu = canvas.getContext(\"webgpu\");\n                        if (!contextGpu) {\n                            return [2 /*return*/, Promise.reject(\"WebGPU context not found!\")];\n                        }\n                        return [2 /*return*/, new Renderer(canvas, interactiveCamera, gaussians, adapter, device, contextGpu)];\n                }\n            });\n        });\n    };\n    // destroy the renderer and return a promise that resolves when it's done (after the next frame)\n    Renderer.prototype.destroy = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        _this.destroyCallback = resolve;\n                    })];\n            });\n        });\n    };\n    Renderer.prototype.draw = function (nextFrameCallback) {\n        var commandEncoder = this.device.createCommandEncoder();\n        var textureView = this.contextGpu.getCurrentTexture().createView();\n        var renderPassDescriptor = {\n            colorAttachments: [{\n                    view: textureView,\n                    clearValue: { r: 0, g: 0, b: 0, a: 0 },\n                    storeOp: \"store\",\n                    loadOp: \"clear\",\n                }],\n        };\n        var passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n        passEncoder.setPipeline(this.pipeline);\n        passEncoder.setBindGroup(0, this.device.createBindGroup({\n            layout: this.pipeline.getBindGroupLayout(0),\n            entries: [{\n                    binding: 0,\n                    resource: {\n                        buffer: this.uniformBuffer,\n                    },\n                }],\n        }));\n        passEncoder.setBindGroup(1, this.device.createBindGroup({\n            layout: this.pipeline.getBindGroupLayout(1),\n            entries: [{\n                    binding: 1,\n                    resource: {\n                        buffer: this.pointDataBuffer,\n                    },\n                }],\n        }));\n        //passEncoder.draw(6 * gaussians.numPoints, 1, 0, 0);\n        for (var i = 0; i < this.drawOrder.length; i++) {\n            var quadId = this.drawOrder[i];\n            passEncoder.draw(6, 1, 6 * quadId, 0);\n        }\n        passEncoder.end();\n        this.device.queue.submit([commandEncoder.finish()]);\n        if (this.destroyCallback === null) {\n            requestAnimationFrame(nextFrameCallback);\n        }\n        else {\n            this.uniformBuffer.destroy();\n            this.pointDataBuffer.destroy();\n            this.device.destroy();\n            this.adapter = null;\n            this.device = null;\n            this.contextGpu = null;\n            this.pipeline = null;\n            this.destroyCallback();\n        }\n    };\n    Renderer.prototype.animate = function () {\n        var _this = this;\n        if (!this.interactiveCamera.isDirty()) {\n            requestAnimationFrame(function () { return _this.animate(); });\n            return;\n        }\n        var camera = this.interactiveCamera.getCamera();\n        var position = camera.getPosition();\n        var tanHalfFovX = 0.5 * this.canvas.width / camera.focalX;\n        var tanHalfFovY = 0.5 * this.canvas.height / camera.focalY;\n        var uniformsMatrixBuffer = new ArrayBuffer(this.uniformBuffer.size);\n        var uniforms = {\n            viewMatrix: mat4toArrayOfArrays(camera.viewMatrix),\n            projMatrix: mat4toArrayOfArrays(camera.getProjMatrix()),\n            cameraPosition: Array.from(position),\n            tanHalfFovX: tanHalfFovX,\n            tanHalfFovY: tanHalfFovY,\n            focalX: camera.focalX,\n            focalY: camera.focalY,\n            scaleModifier: camera.scaleModifier,\n        };\n        uniformLayout.pack(0, uniforms, new DataView(uniformsMatrixBuffer));\n        this.device.queue.writeBuffer(this.uniformBuffer, 0, uniformsMatrixBuffer, 0, uniformsMatrixBuffer.byteLength);\n        var depthProjection = camera.dotZ();\n        var depthsWithIndices = [];\n        for (var i = 0; i < this.pointPositions.length; i++) {\n            var index = this.drawOrder[i];\n            var position_1 = this.pointPositions[index];\n            var depth = depthProjection(position_1);\n            depthsWithIndices.push([depth, index]);\n        }\n        this.drawOrder = depthsWithIndices.sort(function (_a, _b) {\n            var d1 = _a[0], i1 = _a[1];\n            var d2 = _b[0], i2 = _b[1];\n            return (d1 - d2);\n        }).map(function (_a) {\n            var d = _a[0], i = _a[1];\n            return i;\n        });\n        this.draw(function () { return _this.animate(); });\n    };\n    return Renderer;\n}());\nexport { Renderer };\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { loadFileAsArrayBuffer, PackedGaussians } from './ply';\nimport { CameraFileParser, InteractiveCamera } from './camera';\nimport { Renderer } from './renderer';\nvar canvas = document.getElementById(\"canvas-webgpu\");\nvar interactiveCamera = InteractiveCamera.default(canvas);\nvar currentRenderer;\nfunction handlePlyChange(event) {\n    var file = event.target.files[0];\n    function onFileLoad(arrayBuffer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var gaussians, renderer, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!currentRenderer) return [3 /*break*/, 2];\n                        return [4 /*yield*/, currentRenderer.destroy()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        gaussians = new PackedGaussians(arrayBuffer);\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, Renderer.init(canvas, gaussians, interactiveCamera)];\n                    case 4:\n                        renderer = _a.sent();\n                        currentRenderer = renderer; // bind to the global scope\n                        return [3 /*break*/, 6];\n                    case 5:\n                        error_1 = _a.sent();\n                        alert(error_1);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    }\n    if (file) {\n        loadFileAsArrayBuffer(file)\n            .then(onFileLoad)\n            .catch(function (error) {\n            alert(error);\n        });\n    }\n}\nvar plyFileInput = document.getElementById('plyButton');\nplyFileInput.addEventListener('change', handlePlyChange);\nvar cameraFileInput = document.getElementById('cameraButton');\nvar cameraList = document.getElementById('cameraList');\nnew CameraFileParser(cameraFileInput, cameraList, canvas, interactiveCamera.setNewCamera.bind(interactiveCamera));\n","var shDeg3Code = \"\\n    // spherical harmonic coefficients\\n    const SH_C0 = 0.28209479177387814f;\\n    const SH_C1 = 0.4886025119029199f;\\n    const SH_C2 = array(\\n        1.0925484305920792f,\\n        -1.0925484305920792f,\\n        0.31539156525252005f,\\n        -1.0925484305920792f,\\n        0.5462742152960396f\\n    );\\n    const SH_C3 = array(\\n        -0.5900435899266435f,\\n        2.890611442640554f,\\n        -0.4570457994644658f,\\n        0.3731763325901154f,\\n        -0.4570457994644658f,\\n        1.445305721320277f,\\n        -0.5900435899266435f\\n    );\\n\\n    fn compute_color_from_sh(position: vec3<f32>, sh: array<vec3<f32>, 16>) -> vec3<f32> {\\n        let dir = normalize(position - uniforms.camera_position);\\n        var result = SH_C0 * sh[0];\\n\\n        // if deg > 0\\n        let x = dir.x;\\n        let y = dir.y;\\n        let z = dir.z;\\n\\n        result = result + SH_C1 * (-y * sh[1] + z * sh[2] - x * sh[3]);\\n\\n        let xx = x * x;\\n        let yy = y * y;\\n        let zz = z * z;\\n        let xy = x * y;\\n        let xz = x * z;\\n        let yz = y * z;\\n\\n        // if (sh_degree > 1) {\\n        result = result +\\n            SH_C2[0] * xy * sh[4] +\\n            SH_C2[1] * yz * sh[5] +\\n            SH_C2[2] * (2. * zz - xx - yy) * sh[6] +\\n            SH_C2[3] * xz * sh[7] +\\n            SH_C2[4] * (xx - yy) * sh[8];\\n        \\n        // We disable the 3rd degree for now because of a bug causing the entire render\\n        // to be black. This appears to be a webGPU issue. If uncomment SH_C3[0...3] it works,\\n        // if you uncomment SH_C3[4...6] it works, if you uncomment the whole and divide by 10\\n        // it's black.\\n\\n        // if (sh_degree > 2) {\\n        //result = result +\\n        //    SH_C3[0] * y * (3. * xx - yy) * sh[9] +\\n        //    SH_C3[1] * xy * z * sh[10] +\\n        //    SH_C3[2] * y * (4. * zz - xx - yy) * sh[11] +\\n        //    SH_C3[3] * z * (2. * zz - 3. * xx - 3. * yy) * sh[12] +\\n        //    SH_C3[4] * x * (4. * zz - xx - yy) * sh[13] +\\n        //    SH_C3[5] * z * (xx - yy) * sh[14] +\\n        //    SH_C3[6] * x * (xx - 3. * yy) * sh[15];\\n\\n        // unconditional\\n        result = result + 0.5;\\n\\n        return max(result, vec3<f32>(0.));\\n    }\\n\";\nvar shDeg2Code = \"\\n    // spherical harmonic coefficients\\n    const SH_C0 = 0.28209479177387814f;\\n    const SH_C1 = 0.4886025119029199f;\\n    const SH_C2 = array(\\n        1.0925484305920792f,\\n        -1.0925484305920792f,\\n        0.31539156525252005f,\\n        -1.0925484305920792f,\\n        0.5462742152960396f\\n    );\\n\\n    fn compute_color_from_sh(position: vec3<f32>, sh: array<vec3<f32>, 9>) -> vec3<f32> {\\n        let dir = normalize(position - uniforms.camera_position);\\n        var result = SH_C0 * sh[0];\\n\\n        // if deg > 0\\n        let x = dir.x;\\n        let y = dir.y;\\n        let z = dir.z;\\n\\n        result = result + SH_C1 * (-y * sh[1] + z * sh[2] - x * sh[3]);\\n\\n        let xx = x * x;\\n        let yy = y * y;\\n        let zz = z * z;\\n        let xy = x * y;\\n        let xz = x * z;\\n        let yz = y * z;\\n\\n        // if (sh_degree > 1) {\\n        result = result +\\n            SH_C2[0] * xy * sh[4] +\\n            SH_C2[1] * yz * sh[5] +\\n            SH_C2[2] * (2. * zz - xx - yy) * sh[6] +\\n            SH_C2[3] * xz * sh[7] +\\n            SH_C2[4] * (xx - yy) * sh[8];\\n        \\n        // unconditional\\n        result = result + 0.5;\\n\\n        return max(result, vec3<f32>(0.));\\n    }\\n\";\nvar shDeg1Code = \"\\n    // spherical harmonic coefficients\\n    const SH_C0 = 0.28209479177387814f;\\n    const SH_C1 = 0.4886025119029199f;\\n\\n    fn compute_color_from_sh(position: vec3<f32>, sh: array<vec3<f32>, 4>) -> vec3<f32> {\\n        let dir = normalize(position - uniforms.camera_position);\\n        var result = SH_C0 * sh[0];\\n\\n        // if deg > 0\\n        let x = dir.x;\\n        let y = dir.y;\\n        let z = dir.z;\\n\\n        result = result + SH_C1 * (-y * sh[1] + z * sh[2] - x * sh[3]);\\n\\n        // unconditional\\n        result = result + 0.5;\\n\\n        return max(result, vec3<f32>(0.));\\n    }\\n\";\nexport function getShaderCode(canvas, shDegree, nShCoeffs) {\n    var shComputeCode = {\n        1: shDeg1Code,\n        2: shDeg2Code,\n        3: shDeg3Code,\n    }[shDegree];\n    var shaderCode = \"\\n// for some reason passing these as uniform is broken\\nconst canvas_height = \".concat(canvas.height, \";\\nconst canvas_width = \").concat(canvas.width, \";\\nconst sh_degree = \").concat(shDegree, \";\\nconst n_sh_coeffs = \").concat(nShCoeffs, \";\\n\\nstruct PointInput {\\n    @location(0) position: vec3<f32>,\\n    @location(1) log_scale: vec3<f32>,\\n    @location(2) rot: vec4<f32>,\\n    @location(3) opacity_logit: f32,\\n    sh: array<vec3<f32>, n_sh_coeffs>,\\n};\\n\\nstruct PointOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) color: vec3<f32>,\\n    @location(1) uv: vec2<f32>,\\n    @location(2) conic_and_opacity: vec4<f32>,\\n};\\n\\nstruct Uniforms {\\n    viewMatrix: mat4x4<f32>,\\n    projMatrix: mat4x4<f32>,\\n    camera_position: vec3<f32>,\\n    tan_fovx: f32,\\n    tan_fovy: f32,\\n    focal_x: f32,\\n    focal_y: f32,\\n    scale_modifier: f32,\\n};\\n\\n\").concat(shComputeCode, \"\\n\\nfn sigmoid(x: f32) -> f32 {\\n    if (x >= 0.) {\\n        return 1. / (1. + exp(-x));\\n    } else {\\n        let z = exp(x);\\n        return z / (1. + z);\\n    }\\n}\\n\\nfn compute_cov3d(log_scale: vec3<f32>, rot: vec4<f32>) -> array<f32, 6> {\\n    let modifier = uniforms.scale_modifier;\\n    let S = mat3x3<f32>(\\n        exp(log_scale.x) * modifier, 0., 0.,\\n        0., exp(log_scale.y) * modifier, 0.,\\n        0., 0., exp(log_scale.z) * modifier,\\n    );\\n\\n    let r = rot.x;\\n    let x = rot.y;\\n    let y = rot.z;\\n    let z = rot.w;\\n\\n    let R = mat3x3<f32>(\\n        1. - 2. * (y * y + z * z), 2. * (x * y - r * z), 2. * (x * z + r * y),\\n        2. * (x * y + r * z), 1. - 2. * (x * x + z * z), 2. * (y * z - r * x),\\n        2. * (x * z - r * y), 2. * (y * z + r * x), 1. - 2. * (x * x + y * y),\\n    );\\n\\n    let M = S * R;\\n    let Sigma = transpose(M) * M;\\n\\n    return array<f32, 6>(\\n        Sigma[0][0],\\n        Sigma[0][1],\\n        Sigma[0][2],\\n        Sigma[1][1],\\n        Sigma[1][2],\\n        Sigma[2][2],\\n    );\\n} \\n\\nfn ndc2pix(v: f32, size: u32) -> f32 {\\n    return ((v + 1.0) * f32(size) - 1.0) * 0.5;\\n}\\n\\nfn compute_cov2d(position: vec3<f32>, log_scale: vec3<f32>, rot: vec4<f32>) -> vec3<f32> {\\n    let cov3d = compute_cov3d(log_scale, rot);\\n\\n    var t = uniforms.viewMatrix * vec4<f32>(position, 1.0);\\n\\n    let limx = 1.3 * uniforms.tan_fovx;\\n    let limy = 1.3 * uniforms.tan_fovy;\\n    let txtz = t.x / t.z;\\n    let tytz = t.y / t.z;\\n\\n    t.x = min(limx, max(-limx, txtz)) * t.z;\\n    t.y = min(limy, max(-limy, tytz)) * t.z;\\n\\n    let J = mat4x4(\\n        uniforms.focal_x / t.z, 0., -(uniforms.focal_x * t.x) / (t.z * t.z), 0.,\\n        0., uniforms.focal_y / t.z, -(uniforms.focal_y * t.y) / (t.z * t.z), 0.,\\n        0., 0., 0., 0.,\\n        0., 0., 0., 0.,\\n    );\\n\\n    let W = transpose(uniforms.viewMatrix);\\n\\n    let T = W * J;\\n\\n    let Vrk = mat4x4(\\n        cov3d[0], cov3d[1], cov3d[2], 0.,\\n        cov3d[1], cov3d[3], cov3d[4], 0.,\\n        cov3d[2], cov3d[4], cov3d[5], 0.,\\n        0., 0., 0., 0.,\\n    );\\n\\n    var cov = transpose(T) * transpose(Vrk) * T;\\n\\n    // Apply low-pass filter: every Gaussian should be at least\\n    // one pixel wide/high. Discard 3rd row and column.\\n    cov[0][0] += 0.3;\\n    cov[1][1] += 0.3;\\n\\n    return vec3<f32>(cov[0][0], cov[0][1], cov[1][1]);\\n}\\n\\n\\n@binding(0) @group(0) var<uniform> uniforms: Uniforms;\\n@binding(1) @group(1) var<storage, read> points: array<PointInput>;\\n\\nconst quadVertices = array<vec2<f32>, 6>(\\n    vec2<f32>(-1.0, -1.0),\\n    vec2<f32>(-1.0, 1.0),\\n    vec2<f32>(1.0, -1.0),\\n    vec2<f32>(1.0, 1.0),\\n    vec2<f32>(-1.0, 1.0),\\n    vec2<f32>(1.0, -1.0),\\n);\\n\\n@vertex\\nfn vs_points(@builtin(vertex_index) vertex_index: u32) -> PointOutput {\\n    var output: PointOutput;\\n    let pointIndex = vertex_index / 6u;\\n    let quadIndex = vertex_index % 6u;\\n    let quadOffset = quadVertices[quadIndex];\\n    let point = points[pointIndex];\\n\\n    let cov2d = compute_cov2d(point.position, point.log_scale, point.rot);\\n    let det = cov2d.x * cov2d.z - cov2d.y * cov2d.y;\\n    let det_inv = 1.0 / det;\\n    let conic = vec3<f32>(cov2d.z * det_inv, -cov2d.y * det_inv, cov2d.x * det_inv);\\n    let mid = 0.5 * (cov2d.x + cov2d.z);\\n    let lambda_1 = mid + sqrt(max(0.1, mid * mid - det));\\n    let lambda_2 = mid - sqrt(max(0.1, mid * mid - det));\\n    let radius_px = ceil(3. * sqrt(max(lambda_1, lambda_2)));\\n    let radius_ndc = vec2<f32>(\\n    radius_px / (canvas_height),\\n    radius_px / (canvas_width),\\n    );\\n    output.conic_and_opacity = vec4<f32>(conic, sigmoid(point.opacity_logit));\\n\\n    var projPosition = uniforms.projMatrix * vec4<f32>(point.position, 1.0);\\n    projPosition = projPosition / projPosition.w;\\n    output.position = vec4<f32>(projPosition.xy + 2 * radius_ndc * quadOffset, projPosition.zw);\\n    output.color = compute_color_from_sh(uniforms.camera_position, point.sh);\\n    output.uv = radius_px * quadOffset;\\n\\n    return output;\\n}\\n\\n@fragment\\nfn fs_main(input: PointOutput) -> @location(0) vec4<f32> {\\n    // we want the distance from the gaussian to the fragment while uv\\n    // is the reverse\\n    let d = -input.uv;\\n    let conic = input.conic_and_opacity.xyz;\\n    let power = -0.5 * (conic.x * d.x * d.x + conic.z * d.y * d.y) + conic.y * d.x * d.y;\\n    let opacity = input.conic_and_opacity.w;\\n\\n    if (power > 0.0) {\\n    discard;\\n    }\\n\\n    let alpha = min(0.99, opacity * exp(power));\\n\\n    return vec4<f32>(input.color * alpha, alpha);\\n}\\n\");\n    return shaderCode;\n}\n"],"names":["extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","roundUp","n","multiple","Math","ceil","PackingError","_super","message","_this","name","Error","PackingType","size","alignment","i32Type","pack","offset","value","view","concat","setInt32","unpack","content","getInt32","u32Type","setUint32","getUint32","f32Type","setFloat32","getFloat32","f32","VectorType","baseType","nValues","values","isArray","length","i","e","_a","newOffset","push","vec2","vec3","vec4","Struct","members","max","apply","map","_i","members_1","type","expectedKeys","actualKeys","keys","every","key","includes","startingOffset","_b","name_1","name_2","_c","StaticArray","nElements","stride","mat4x4","MatrixType","nRows","nColumns","vecType","arrayType","startOffset","j","outerValues","innerValues","PackedGaussians","arrayBuffer","decodeHeader","vertexCount","propertyTypes","vertexData","numGaussians","nRestCoeffs","propertyName","startsWith","nCoeffsPerColor","sphericalHarmonicsDegree","sqrt","console","log","shFeatureOrder","rgb","gaussianLayout","nShCoeffs","gaussianArrayLayout","positionsArray","gaussiansBuffer","ArrayBuffer","gaussianWriteView","DataView","readOffset","gaussianWriteOffset","readRawVertex","newReadOffset","rawVertex","arrangeVertex","x","y","z","plyArrayBuffer","decoder","TextDecoder","headerOffset","headerText","headerChunk","Uint8Array","decode","headerLines","split","line","trim","vertexCountMatch","match","parseInt","propertyMatch","propertyType","vertexByteOffset","indexOf","property","Float32Array","BYTES_PER_ELEMENT","getUint8","defineProperty","get","enumerable","configurable","shCoeffs","coeff","coeffName","position","logScale","scale_0","scale_1","scale_2","rotQuat","rot_0","rot_1","rot_2","rot_3","opacityLogit","opacity","EPSILON","VecType$2","create$5","dst","undefined","MatType$1","ctorMap","Map","Float64Array","fill","newMat3","copy$4","m","clone$4","identity$2","inverse$4","m00","m01","m02","m10","m11","m12","m20","m21","m22","b01","b11","b21","invDet","invert$3","multiply$4","a","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b02","b10","b12","b20","b22","mul$4","mat3Impl","freeze","setDefaultType","ctor","oldType","v0","v1","v2","v3","v4","v5","v6","v7","v8","set","fromMat4","m4","fromQuat","q","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","negate","copy","clone","equalsApproximately","abs","equals","identity","transpose","t","inverse","determinant","invert","multiply","mul","setTranslation","v","getTranslation","getAxis","axis","off","setAxis","getScaling","xy","translation","translate","rotation","angleInRadians","c","cos","s","sin","rotate","scaling","scale","uniformScaling","uniformScale","VecType$1","create$3","fromValues$2","subtract$2","sub$2","mulScalar$2","k","scale$3","inverse$3","invert$2","cross","t1","t2","dot$2","length$2","len$2","lengthSq$2","lenSq$2","distance$1","dx","dy","dz","dist$1","distanceSq$1","distSq$1","normalize$2","len","copy$3","clone$3","multiply$3","mul$3","divide$1","div$1","vec3Impl","fromValues","floor","round","clamp","min","add","addScaled","angle","ax","ay","az","bx","by","bz","mag","cosine","acos","subtract","sub","lerp","lerpV","mulScalar","divScalar","dot","lengthSq","lenSq","distance","dist","distanceSq","distSq","normalize","divide","div","random","PI","zScale","zero","transformMat4","transformMat4Upper3x3","transformMat3","transformQuat","qx","qy","qz","w2","uvX","uvY","uvZ","xz","yz","MatType","copy$2","clone$2","identity$1","inverse$2","m03","m13","m23","m30","m31","m32","m33","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","tmp12","tmp13","tmp14","tmp15","tmp16","tmp17","tmp18","tmp19","tmp20","tmp21","tmp22","tmp23","t0","t3","invert$1","multiply$2","a03","a13","a23","a30","a31","a32","a33","b03","b13","b23","b30","b31","b32","b33","mul$2","xAxis","yAxis","zAxis","axisRotation","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","mat4Impl","v9","v10","v11","v12","v13","v14","v15","fromMat3","m3","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","Infinity","rangeInv","ortho","left","right","bottom","top","near","far","frustum","aim","target","up","cameraAim","eye","lookAt","rotationX","rotateX","rotationY","rotateY","rotationZ","rotateZ","Camera","height","width","viewMatrix","focalX","focalY","scaleModifier","default","dotZ","depthAxis","getPosition","inverseViewMatrix","getProjMatrix","flippedY","viewInv","InteractiveCamera","camera","canvas","drag","oldX","oldY","dRX","dRY","dRZ","dTX","dTY","dTZ","dirty","window","createCallbacks","addEventListener","pageX","pageY","setDirty","preventDefault","deltaY","setNewCamera","newCamera","setClean","isDirty","getCamera","focal2fov","focal","pixels","atan","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","g","_","label","sent","trys","ops","verb","Symbol","iterator","op","pop","uniformLayout","mat4toArrayOfArrays","currentRenderer","Renderer","interactiveCamera","gaussians","adapter","device","contextGPU","destroyCallback","contextGpu","presentationFormat","configure","format","alphaMode","pointDataBuffer","createBuffer","usage","GPUBufferUsage","STORAGE","mappedAtCreation","getMappedRange","unmap","uniformBuffer","UNIFORM","COPY_DST","shaderCode","shDegree","shComputeCode","getShaderCode","shaderModule","createShaderModule","code","pipeline","createRenderPipeline","layout","vertex","module","entryPoint","fragment","targets","blend","color","srcFactor","dstFactor","operation","alpha","primitive","topology","stripIndexFormat","cullMode","pointPositions","drawOrder","from","requestAnimationFrame","animate","init","byteLength","navigator","gpu","requestAdapter","requestDevice","requiredLimits","maxStorageBufferBindingSize","maxBufferSize","getContext","destroy","draw","nextFrameCallback","commandEncoder","createCommandEncoder","renderPassDescriptor","colorAttachments","getCurrentTexture","createView","clearValue","r","storeOp","loadOp","passEncoder","beginRenderPass","setPipeline","setBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","quadId","end","queue","submit","finish","tanHalfFovX","tanHalfFovY","uniformsMatrixBuffer","uniforms","projMatrix","cameraPosition","writeBuffer","depthProjection","depthsWithIndices","index","depth","sort","d1","d2","document","getElementById","event","file","files","reader","FileReader","onload","onerror","error","readAsArrayBuffer","loadFileAsArrayBuffer","renderer","error_1","alert","catch","fileInput","listElement","cameraSetCallback","currentLineId","handleFileInputChange","handleFileLoad","readAsText","contents","jsonData","JSON","parse","innerHTML","forEach","cameraJSON","rawCamera","canvasW","canvasH","R","R_","camToWorld","minusT","znear","fovX","fovY","projectionMatrix","listItem","createElement","fx","fy","z_sign","flat","textContent","img_name","createCallbackForLine","appendChild","bind"],"sourceRoot":""}